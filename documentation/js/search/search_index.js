var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllErrorFilter.html",[0,0.189,1,3.258]],["body/classes/AllErrorFilter.html",[0,0.241,1,5.221,2,1.192,3,0.149,4,0.132,5,0.132,6,5.768,7,4.139,8,1.6,9,6.319,10,0.327,11,1.6,12,2.573,13,5.161,14,5.768,15,5.536,16,6.635,17,0.489,18,4.573,19,1.309,20,0.012,21,0.753,22,0.366,23,0.864,24,5.221,25,1.309,26,5.221,27,0.374,28,3.342,29,0.864,30,3.342,31,3.342,32,4.573,33,4.139,34,0.149,35,1.393,36,5.768,37,4.573,38,4.573,39,0.468,40,4.573,41,3.816,42,1.686,43,4.573,44,1.155,45,4.573,46,0.009,47,0.009]],["title/controllers/AppController.html",[48,1.626,49,3.003]],["body/controllers/AppController.html",[0,0.269,3,0.166,4,0.148,5,0.148,10,0.365,11,1.712,17,0.546,20,0.012,25,1.46,27,0.366,29,0.964,34,0.166,39,0.632,44,1.289,46,0.01,47,0.01,48,2.789,49,5.15,50,2.39,51,5.102,52,6.895,53,1.604,54,5.837,55,4.85,56,5.102,57,2.789,58,2.678,59,5.837]],["title/modules/AppModule.html",[60,1.57,61,3.003]],["body/modules/AppModule.html",[0,0.198,3,0.123,4,0.109,5,0.109,20,0.012,27,0.425,29,0.711,34,0.123,46,0.008,47,0.008,49,4.796,50,2.378,55,4.839,56,3.762,60,2.215,61,6.149,62,2.056,63,2.776,64,3.762,65,3.762,66,3.762,67,5.151,68,4.839,69,4.839,70,5.151,71,4.839,72,4.839,73,3.025,74,2.145,75,2.241,76,4.304,77,3.168,78,3.586,79,4.304,80,2.598,81,1.482,82,4.304,83,4.304,84,4.304,85,4.304,86,4.304,87,4.304,88,4.597,89,4.498,90,2.347,91,5.078,92,4.304,93,4.304,94,4.304,95,4.304,96,1.482,97,4.304,98,4.304,99,1.433,100,4.304,101,4.304,102,3.762]],["title/injectables/AppService.html",[55,2.63,103,0.657]],["body/injectables/AppService.html",[0,0.277,3,0.172,4,0.153,5,0.153,10,0.377,11,1.746,17,0.564,20,0.012,25,1.508,27,0.312,29,0.995,34,0.172,39,0.644,44,1.331,46,0.01,47,0.01,52,6.97,55,4.599,103,1.149,104,1.943,105,5.27,106,6.029,107,6.029,108,6.029]],["title/controllers/AuthController.html",[48,1.626,109,3.003]],["body/controllers/AuthController.html",[0,0.129,3,0.08,4,0.071,5,0.071,10,0.176,11,1.037,12,2.333,17,0.657,19,1.757,20,0.012,21,1.01,22,0.491,23,1.159,25,1.757,27,0.396,29,0.464,34,0.08,42,1.378,44,1.646,46,0.006,47,0.006,48,1.11,50,1.15,53,1.93,57,1.343,58,1.289,109,3.118,110,2.456,111,1.696,112,2.456,113,3.737,114,4.275,115,4.523,116,3.737,117,4.523,118,3.737,119,3.737,120,2.456,121,3.932,122,2.81,123,3.737,124,2.81,125,2.967,126,2.81,127,4.983,128,4.275,129,1.842,130,2.81,131,5.556,132,2.81,133,3.932,134,2.81,135,3.118,136,2.81,137,2.81,138,3.932,139,2.81,140,2.81,141,2.81,142,2.81,143,2.81,144,2.81,145,4.632,146,5.174,147,1.748,148,2.81,149,3.126,150,2.456,151,2.81,152,3.118,153,2.81,154,2.456,155,3.932,156,2.81,157,2.13,158,2.226,159,2.81,160,1.696,161,3.975,162,2.81,163,3.123,164,2.224,165,3.737,166,2.456,167,2.456,168,1.795,169,1.289,170,4.538,171,2.456,172,1.911,173,2.456,174,2.456,175,2.456,176,2.456,177,2.456,178,2.224,179,2.224,180,2.05,181,2.81,182,2.81,183,4.095,184,2.224,185,2.224,186,1.071,187,2.456,188,2.81,189,2.81,190,2.81,191,2.81,192,2.456,193,2.81,194,2.81,195,2.81,196,2.81,197,2.81,198,2.81,199,2.81,200,2.81,201,2.456,202,2.456,203,2.456,204,1.609,205,2.81,206,4.275,207,2.456,208,1.911,209,2.81,210,2.81,211,2.81,212,2.81,213,2.81,214,2.81,215,2.81,216,2.81,217,2.81,218,2.81,219,2.81,220,1.15,221,2.81,222,1.911,223,2.81]],["title/modules/AuthModule.html",[60,1.57,67,2.8]],["body/modules/AuthModule.html",[0,0.157,3,0.097,4,0.086,5,0.086,20,0.012,21,0.491,27,0.43,29,0.563,34,0.097,46,0.007,47,0.007,50,2.02,60,1.881,62,1.629,63,2.358,67,5.742,68,4.493,69,4.493,71,4.493,72,4.493,73,2.57,74,1.699,75,1.775,77,2.691,78,2.691,80,2.058,81,1.173,88,3.905,90,1.859,109,4.231,163,4.751,164,2.697,224,2.98,225,2.98,226,2.98,227,2.98,228,4.783,229,4.783,230,5.352,231,5.352,232,5.028,233,3.409,234,2.826,235,3.409,236,4.934,237,2.486,238,3.409,239,3.409,240,3.409,241,3.409,242,2.486,243,2.98,244,3.409,245,2.178,246,3.409,247,3.409,248,3.409,249,3.409,250,2.98,251,1.859,252,3.599,253,2.98,254,4.934,255,2.697,256,3.905,257,2.98,258,3.409,259,4.934,260,2.98,261,2.98,262,3.409,263,4.934,264,3.409,265,2.178,266,3.409,267,1.396,268,3.409,269,2.98,270,2.98,271,3.409,272,2.98,273,3.409,274,3.409,275,3.409,276,3.409]],["title/injectables/AuthService.html",[103,0.657,163,2.485]],["body/injectables/AuthService.html",[0,0.097,3,0.034,4,0.03,5,0.03,10,0.075,11,0.513,12,1.01,17,0.632,19,1.494,20,0.012,21,0.899,22,0.428,23,0.986,25,1.563,27,0.391,28,2.185,29,0.198,30,0.766,34,0.034,35,1.99,39,0.588,42,1.678,44,1.379,46,0.003,47,0.003,58,1.976,89,2.971,90,0.654,96,1.703,99,2.602,102,1.049,103,0.338,104,0.387,113,1.849,115,1.849,116,1.049,117,1.849,118,1.849,119,1.849,120,1.849,121,2.326,123,1.049,125,2.517,127,2.185,129,2.267,133,2.326,135,0.875,138,3.693,145,3.162,147,2.146,149,1.302,150,1.849,152,2.069,154,1.849,155,2.326,157,1.414,158,1.101,163,1.277,165,1.849,166,1.049,167,1.049,174,1.049,175,1.049,177,1.049,178,0.949,179,0.949,184,0.949,185,0.949,186,0.806,187,1.049,201,1.049,202,1.049,203,1.849,204,1.959,207,1.849,208,2.326,220,2.693,222,3.162,232,2.185,237,0.875,250,1.049,251,3.072,255,1.674,256,2.707,257,1.049,260,1.849,261,1.049,272,1.049,277,1.049,278,0.304,279,3.843,280,2.837,281,2.48,282,3.42,283,2.115,284,2.115,285,3.42,286,2.115,287,3.42,288,2.115,289,2.115,290,4.065,291,2.971,292,0.704,293,1.2,294,2.837,295,2.807,296,2.971,297,4.065,298,2.664,299,2.807,300,2.664,301,2.807,302,1.2,303,1.2,304,1.2,305,2.147,306,3.42,307,3.42,308,3.42,309,2.115,310,1.2,311,3.796,312,2.115,313,2.707,314,1.2,315,2.495,316,2.115,317,1.2,318,2.115,319,1.2,320,0.529,321,1.2,322,2.115,323,1.2,324,2.115,325,1.2,326,1.2,327,2.115,328,1.569,329,1.2,330,2.115,331,1.2,332,2.115,333,1.2,334,2.99,335,1.2,336,1.2,337,1.12,338,0.753,339,2.115,340,1.2,341,1.849,342,1.2,343,1.2,344,1.2,345,1.2,346,1.2,347,2.115,348,1.543,349,1.351,350,0.949,351,0.816,352,0.816,353,0.724,354,0.442,355,1.674,356,0.816,357,1.049,358,1.049,359,1.2,360,0.949,361,1.543,362,1.2,363,1.351,364,0.949,365,0.949,366,1.2,367,1.2,368,2.48,369,1.2,370,1.2,371,2.837,372,1.2,373,2.837,374,1.2,375,2.115,376,1.438,377,2.837,378,1.2,379,1.2,380,1.2,381,1.2,382,1.2,383,1.2,384,1.2,385,2.115,386,1.2,387,1.049,388,0.4,389,1.2,390,1.2,391,1.2,392,1.2,393,2.933,394,2.115,395,3.42,396,2.837,397,2.837,398,1.2,399,1.2,400,1.2,401,1.2,402,2.115,403,1.2,404,1.2,405,1.2,406,0.724,407,1.2,408,2.837,409,2.837,410,1.2,411,3.42,412,3.42,413,2.99,414,2.058,415,1.543,416,2.115,417,2.052,418,2.115,419,1.849,420,2.115,421,2.115,422,2.115,423,2.115,424,1.438,425,1.054,426,1.849,427,2.837,428,1.543,429,0.949,430,1.2,431,1.2,432,0.474,433,0.753,434,0.55,435,2.115,436,2.115,437,1.2,438,2.115,439,1.2,440,0.766,441,0.949,442,1.2,443,1.2,444,1.2,445,1.2,446,2.183,447,2.115,448,2.837,449,2.48,450,2.115,451,2.48,452,1.351,453,2.115,454,2.115,455,1.2,456,0.474,457,1.2,458,2.115,459,1.2,460,0.724,461,1.049,462,1.049,463,1.2,464,0.875,465,1.2,466,2.115,467,2.837,468,0.875,469,1.2,470,1.049,471,2.115,472,1.2,473,1.049,474,1.2,475,1.2,476,0.875,477,1.2,478,1.049,479,1.2,480,1.2,481,1.2,482,2.115,483,1.2,484,1.049,485,1.2,486,1.2,487,1.2,488,1.2,489,1.2,490,1.2,491,1.2,492,1.049,493,1.2,494,1.2,495,1.2,496,1.2,497,0.949,498,1.351,499,2.115,500,1.351,501,2.115,502,0.949,503,1.2,504,1.2,505,0.875,506,1.2,507,0.816,508,1.2,509,1.351,510,2.115,511,1.2,512,1.2,513,1.849,514,1.2,515,1.2,516,1.2,517,1.2,518,0.766,519,1.2,520,1.2,521,2.837,522,1.2,523,1.2,524,1.2,525,2.115,526,1.2,527,1.2,528,1.849,529,2.115,530,1.2,531,1.2,532,1.2,533,1.2,534,1.2,535,1.2,536,1.2,537,1.2,538,1.2,539,0.949,540,1.2,541,1.2,542,1.2,543,1.2,544,1.2,545,1.2,546,1.2,547,1.2,548,1.2,549,1.2,550,1.2]],["title/classes/CreateAccountDto.html",[0,0.189,121,2.8]],["body/classes/CreateAccountDto.html",[0,0.267,2,0.978,3,0.122,4,0.109,5,0.109,10,0.268,17,0.746,20,0.012,22,0.558,27,0.34,34,0.122,39,0.754,46,0.008,47,0.008,53,2.192,121,3.944,157,3.273,158,3.421,278,0.835,353,3.501,354,1.582,417,2.898,452,4.196,498,4.196,500,4.196,551,5.881,552,3.754,553,5.742,554,6.568,555,6.568,556,3.754,557,4.295,558,4.295,559,4.295,560,3.975,561,4.295,562,4.295,563,4.295,564,4.295,565,4.196,566,4.295,567,3.398,568,4.295,569,4.295,570,4.295,571,3.398,572,3.398,573,3.582,574,3.706,575,2.662,576,3.133,577,2.92,578,2.92,579,3.398,580,4.59,581,4.59,582,3.398]],["title/classes/CreateMemberDto.html",[0,0.189,583,2.485]],["body/classes/CreateMemberDto.html",[0,0.286,2,1.085,3,0.136,4,0.121,5,0.121,10,0.298,17,0.743,20,0.012,22,0.555,23,1.329,27,0.247,34,0.136,39,0.752,46,0.009,47,0.009,53,2.014,129,2.461,147,2.09,278,0.894,354,1.754,417,3.051,446,3.051,452,4.417,509,4.417,560,3.885,573,3.997,574,3.969,583,3.75,584,7.038,585,3.238,586,4.701,587,4.761,588,4.162,589,4.761,590,4.162,591,4.162,592,4.761,593,4.761,594,4.761,595,4.162,596,3.238,597,3.768]],["title/classes/CreateOrganizationDto.html",[0,0.189,598,2.358]],["body/classes/CreateOrganizationDto.html",[0,0.237,2,0.824,3,0.103,4,0.092,5,0.092,10,0.226,17,0.737,20,0.012,21,1.033,22,0.551,23,1.364,27,0.358,34,0.103,39,0.749,46,0.007,47,0.007,53,2.166,129,1.833,169,1.66,267,2.108,278,0.741,354,1.332,406,3.108,415,3.756,429,4.074,460,3.108,464,3.756,505,4.373,507,4.077,509,3.83,560,3.966,565,3.289,573,4.248,575,2.363,576,2.638,586,4.077,598,2.949,599,6.297,600,2.862,601,4.373,602,4.373,603,4.744,604,4.744,605,4.373,606,4.744,607,6.713,608,3.617,609,3.617,610,3.617,611,3.617,612,3.617,613,3.617,614,3.617,615,3.617,616,3.617,617,3.162,618,3.83,619,3.756,620,3.756,621,4.074,622,4.074,623,3.617,624,3.617,625,3.617,626,3.756,627,3.617,628,2.862]],["title/classes/CreateOrganizationPasswordDto.html",[0,0.189,208,2.8]],["body/classes/CreateOrganizationPasswordDto.html",[0,0.239,2,0.833,3,0.104,4,0.093,5,0.093,8,1.258,10,0.228,17,0.758,20,0.012,21,0.868,22,0.566,23,1.365,27,0.312,34,0.104,39,0.737,46,0.007,47,0.007,53,2.226,129,2.468,208,3.528,267,1.497,278,0.747,354,1.346,406,2.207,415,2.667,417,2.661,429,2.893,452,3.853,460,2.207,464,2.667,505,3.785,507,3.528,509,3.315,551,4.788,553,5.272,556,3.196,560,3.271,567,2.893,571,2.893,572,2.893,575,1.678,577,2.486,578,2.486,579,2.893,580,4.106,581,4.106,582,2.893,586,3.528,598,4.639,599,2.893,601,3.785,602,3.785,603,4.106,604,4.106,605,3.785,606,4.106,607,6.73,617,3.196,618,2.336,619,2.667,620,2.667,621,2.893,622,2.893,629,2.893,630,3.656,631,3.656,632,3.196,633,4.767,634,3.656,635,3.656,636,3.656,637,3.656,638,3.656,639,3.656,640,3.656,641,3.656,642,3.656,643,3.656,644,3.656,645,2.486]],["title/classes/CreateResourceDto.html",[0,0.189,646,2.485]],["body/classes/CreateResourceDto.html",[0,0.311,2,1.236,3,0.155,4,0.137,5,0.137,10,0.339,17,0.688,20,0.012,21,1.058,22,0.514,23,1.115,27,0.35,34,0.155,39,0.722,46,0.01,47,0.01,53,2.02,129,2.617,278,0.972,354,1.999,560,3.663,565,4.696,573,4.009,575,2.491,576,3.959,646,4.076,647,6.724,648,4.295,649,3.663,650,5.428,651,5.428,652,5.428]],["title/classes/CreateRoleDto.html",[0,0.189,653,2.485]],["body/classes/CreateRoleDto.html",[0,0.311,2,1.236,3,0.155,4,0.137,5,0.137,10,0.339,17,0.688,20,0.012,21,1.058,22,0.514,23,1.115,27,0.35,34,0.155,39,0.722,46,0.01,47,0.01,53,2.02,129,2.617,278,0.972,354,1.999,560,3.663,565,4.696,573,4.009,575,2.491,576,3.959,649,3.663,653,4.076,654,6.724,655,4.295,656,5.428,657,5.428,658,5.428]],["title/classes/CreateTokenDto.html",[0,0.189,659,3.003]],["body/classes/CreateTokenDto.html",[0,0.277,2,1.373,3,0.172,4,0.153,5,0.153,10,0.377,17,0.674,20,0.012,22,0.503,34,0.172,39,0.713,46,0.01,47,0.01,251,4.198,278,1.036,315,5.615,551,5.615,659,5.251,660,5.27,661,6.029,662,6.029]],["title/classes/CreateUserDto.html",[0,0.189,663,2.485]],["body/classes/CreateUserDto.html",[0,0.302,2,1.179,3,0.147,4,0.131,5,0.131,10,0.324,17,0.708,20,0.012,22,0.529,23,1.352,27,0.268,34,0.147,39,0.733,46,0.009,47,0.009,53,2.078,157,3.585,158,3.746,278,0.943,353,3.957,354,1.907,498,4.596,500,4.596,560,3.888,573,3.923,574,4.188,588,4.526,663,3.957,664,6.82,665,4.097,666,5.177,667,5.177,668,5.177,669,5.177,670,5.177]],["title/classes/DuplicateFieldError.html",[0,0.189,31,2.63]],["body/classes/DuplicateFieldError.html",[0,0.295,2,1.461,3,0.183,4,0.162,5,0.162,8,1.81,20,0.011,31,4.77,34,0.183,46,0.011,47,0.011,671,5.074,672,5.606,673,5.077]],["title/injectables/ElasticMailService.html",[103,0.657,674,2.63]],["body/injectables/ElasticMailService.html",[0,0.134,3,0.083,4,0.074,5,0.074,10,0.182,11,1.064,13,3.592,17,0.703,19,1.661,20,0.012,21,0.955,22,0.464,23,1.096,25,1.58,27,0.305,29,0.48,34,0.083,35,1.682,39,0.473,42,2.287,44,1.394,46,0.006,47,0.006,57,1.389,58,1.334,89,4.242,90,1.586,91,4.618,99,2.614,103,0.7,104,0.937,157,2.186,278,0.631,279,4.598,292,0.968,337,2.494,338,2.248,393,2.014,440,3.375,468,3.854,673,4.515,674,2.803,675,6.028,676,2.541,677,5.283,678,5.884,679,5.283,680,5.884,681,5.884,682,4.387,683,5.283,684,5.283,685,5.283,686,2.541,687,4.387,688,4.387,689,2.907,690,2.541,691,4.036,692,2.907,693,7.095,694,2.907,695,6.468,696,2.907,697,5.283,698,2.907,699,2.907,700,6.639,701,2.907,702,2.907,703,2.907,704,3.835,705,4.387,706,2.907,707,4.387,708,2.907,709,4.387,710,2.907,711,4.387,712,2.907,713,4.387,714,2.907,715,2.907,716,2.541,717,2.541,718,2.541,719,3.471,720,2.907,721,4.997,722,2.907,723,4.387,724,4.387,725,4.387,726,4.387,727,4.387,728,3.835,729,4.387,730,3.471,731,6.315,732,5.283,733,2.907,734,3.471,735,5.884,736,4.387,737,4.387,738,2.907,739,2.907,740,2.907,741,2.907,742,2.541]],["title/classes/FindUserOrganization.html",[0,0.189,133,2.8]],["body/classes/FindUserOrganization.html",[0,0.276,2,1.365,3,0.171,4,0.152,5,0.152,10,0.375,17,0.561,20,0.012,22,0.419,27,0.31,34,0.171,39,0.642,46,0.01,47,0.01,53,1.647,133,4.878,147,2.168,278,1.032,425,3.826,575,2.75,743,6.271,744,5.239,745,4.905,746,5.993,747,4.371]],["title/interfaces/IDoesNotExistParams.html",[748,1.967,749,3.003]],["body/interfaces/IDoesNotExistParams.html",[0,0.228,3,0.141,4,0.126,5,0.126,10,0.31,20,0.012,21,1.108,22,0.446,23,1.053,27,0.33,34,0.182,35,1.321,39,0.666,41,3.618,44,1.408,46,0.009,47,0.009,99,1.652,129,2.271,267,3.047,278,0.918,338,1.766,354,2.349,388,2.348,393,2.432,406,2.994,415,3.618,460,2.994,575,2.276,619,3.618,620,3.618,621,3.925,622,3.925,626,4.653,748,2.37,749,5.143,750,3.169,751,3.925,752,7.051,753,6.379,754,6.507,755,4.653,756,2.706,757,4.336,758,4.336,759,7.7,760,4.961,761,4.961,762,2.841,763,4.961,764,4.961,765,4.961,766,4.961,767,4.961,768,2.276]],["title/classes/InviteMemberDto.html",[0,0.189,769,3.003]],["body/classes/InviteMemberDto.html",[0,0.282,2,1.062,3,0.133,4,0.118,5,0.118,10,0.291,17,0.739,20,0.012,22,0.552,23,1.28,27,0.241,34,0.133,39,0.753,46,0.009,47,0.009,53,2.13,157,3.41,158,3.564,278,0.882,291,4.372,353,4.131,354,1.717,417,3.02,452,4.372,498,4.372,500,4.372,539,3.689,560,3.994,573,3.732,574,4.372,585,3.17,590,4.076,595,4.076,596,3.17,597,3.689,769,4.469,770,7.007,771,4.662,772,4.076,773,4.076,774,4.662,775,4.662,776,4.662]],["title/injectables/JwtAuthGuard.html",[103,0.657,777,3.258]],["body/injectables/JwtAuthGuard.html",[0,0.168,3,0.104,4,0.092,5,0.092,8,0.883,10,0.228,11,1.255,17,0.484,19,1.295,20,0.012,21,0.866,22,0.362,23,0.854,24,2.883,25,0.911,27,0.404,28,3.306,29,0.601,30,2.327,34,0.104,35,1.844,39,0.463,42,1.94,44,1.447,46,0.007,47,0.007,96,1.254,103,0.826,104,1.174,127,3.306,129,2.464,147,1.819,149,1.672,170,4.391,171,3.184,172,2.477,173,3.184,176,3.184,178,2.883,179,2.883,184,2.883,185,2.883,237,2.657,245,2.327,279,3.124,290,5.262,292,1.724,297,6.467,300,4.238,348,3.775,349,3.306,358,3.184,361,3.775,363,3.306,364,2.883,365,2.883,414,3.131,428,3.775,460,2.199,461,3.184,462,3.184,464,2.657,518,2.327,619,2.657,777,4.095,778,5.262,779,2.883,780,5.175,781,3.643,782,7.192,783,3.643,784,5.175,785,5.186,786,3.643,787,3.643,788,3.184,789,2.883,790,2.883,791,3.643,792,3.643,793,2.657,794,4.524,795,3.643,796,5.175,797,5.175,798,3.643,799,3.643,800,2.883,801,3.643,802,3.643,803,3.643,804,3.643,805,3.643,806,3.643,807,3.643,808,3.643,809,3.643,810,5.175,811,3.643,812,3.643,813,3.643,814,3.643,815,3.643,816,5.262,817,3.643,818,3.643,819,3.643,820,3.643]],["title/injectables/JwtStrategy.html",[103,0.657,230,2.8]],["body/injectables/JwtStrategy.html",[0,0.199,3,0.123,4,0.109,5,0.109,8,1.046,10,0.27,11,1.411,12,2.071,17,0.616,19,1.455,20,0.012,21,0.837,22,0.46,23,0.96,25,1.079,27,0.393,29,0.712,34,0.123,35,1.549,42,1.39,44,1.284,46,0.008,47,0.008,99,2.192,103,0.929,104,1.39,129,1.535,147,2.13,220,2.885,230,3.956,242,3.146,243,3.77,245,2.755,270,3.77,278,0.837,291,2.755,292,1.437,298,4.573,311,3.146,348,4.243,356,2.933,357,3.77,393,2.218,413,3.77,414,2.061,417,1.903,424,2.933,446,1.903,456,1.703,473,3.77,793,3.146,821,3.77,822,4.603,823,4.313,824,4.313,825,5.817,826,4.313,827,4.313,828,4.313,829,3.77,830,3.413,831,3.413,832,3.77,833,3.77,834,4.313,835,4.313,836,4.313,837,4.313,838,2.755,839,4.313,840,4.313,841,5.817,842,4.313,843,4.313,844,4.313,845,4.313,846,4.313,847,4.313,848,3.77,849,4.313]],["title/injectables/LocalAuthGuard.html",[103,0.657,180,3.003]],["body/injectables/LocalAuthGuard.html",[0,0.287,3,0.178,4,0.158,5,0.158,8,1.512,20,0.012,27,0.38,29,1.029,34,0.178,46,0.01,47,0.01,103,1.172,104,2.01,180,5.356,245,3.983,779,4.933,788,5.45,850,5.45,851,6.234]],["title/injectables/LocalStrategy.html",[103,0.657,231,2.8]],["body/injectables/LocalStrategy.html",[0,0.206,3,0.128,4,0.114,5,0.114,8,1.088,10,0.28,11,1.448,17,0.559,19,1.494,20,0.012,21,0.86,22,0.418,23,0.986,25,1.122,27,0.397,29,0.741,30,2.866,34,0.128,35,1.788,39,0.686,42,1.446,44,0.99,46,0.008,47,0.008,57,2.143,96,1.544,99,2.236,103,0.953,104,1.446,149,3.647,163,4.053,164,3.55,231,4.061,245,2.866,292,1.494,348,4.357,393,2.277,414,2.143,417,3.29,425,3.715,484,3.921,691,3.257,793,3.272,822,5.313,829,3.921,830,3.55,832,3.921,833,3.921,852,3.921,853,4.486,854,7.666,855,4.486,856,4.486,857,4.486,858,3.921,859,4.486,860,2.708,861,4.486,862,4.486,863,4.486,864,5.972,865,4.486,866,4.486,867,4.486,868,4.486,869,7.159,870,4.486]],["title/classes/LoginDto.html",[0,0.189,138,2.8]],["body/classes/LoginDto.html",[0,0.28,2,1.386,3,0.173,4,0.154,5,0.154,10,0.38,17,0.677,20,0.012,22,0.506,34,0.173,39,0.715,46,0.01,47,0.01,138,4.922,278,1.042,417,3.41,425,3.851,871,5.318,872,6.083,873,6.083]],["title/controllers/MailController.html",[48,1.626,874,3.258]],["body/controllers/MailController.html",[0,0.283,3,0.175,4,0.155,5,0.155,20,0.012,27,0.377,29,1.014,34,0.175,46,0.01,47,0.01,48,2.425,50,2.514,57,2.933,58,2.817,111,3.706,295,4.682,874,5.759,875,5.367,876,6.139,877,4.858,878,6.139]],["title/modules/MailModule.html",[60,1.57,228,2.8]],["body/modules/MailModule.html",[0,0.249,3,0.154,4,0.137,5,0.137,20,0.012,27,0.38,29,0.894,34,0.192,46,0.01,47,0.01,60,2.57,62,2.587,63,3.221,73,3.511,74,2.698,75,2.819,77,3.677,78,2.953,228,5.665,234,3.862,295,5.115,674,5.149,877,5.335,879,4.732,880,4.732,881,4.732,882,5.414,883,4.732,884,5.414]],["title/injectables/MailService.html",[103,0.657,295,2.485]],["body/injectables/MailService.html",[0,0.131,3,0.081,4,0.072,5,0.072,10,0.178,11,1.049,17,0.641,19,1.649,20,0.012,21,1.077,22,0.461,23,1.088,25,1.567,27,0.355,29,0.471,34,0.081,35,1.552,39,0.679,44,1.153,46,0.006,47,0.006,58,2.397,74,2.156,89,4.375,90,1.556,99,2.605,103,0.691,104,0.92,129,2.511,147,2.399,149,1.309,157,3.122,251,2.849,278,0.622,279,3.781,292,1.441,295,2.611,305,1.992,313,4.957,337,1.708,338,1.016,393,2.388,417,2.572,426,5.095,441,3.423,674,3.724,690,5.476,730,2.258,734,4.957,877,2.258,883,3.781,885,2.495,886,5.224,887,4.325,888,4.325,889,4.325,890,4.325,891,4.325,892,2.854,893,4.325,894,4.325,895,4.325,896,2.854,897,4.325,898,2.854,899,4.325,900,6.592,901,2.854,902,4.325,903,2.397,904,2.854,905,4.325,906,2.854,907,4.325,908,4.996,909,2.495,910,2.258,911,2.854,912,2.495,913,2.854,914,4.325,915,2.854,916,4.325,917,2.854,918,6.264,919,6.264,920,6.264,921,2.854,922,2.854,923,2.854,924,2.854,925,6.264,926,5.829,927,2.495,928,2.495,929,2.854,930,2.854,931,4.325,932,5.224,933,5.224,934,5.224,935,5.224,936,2.854,937,2.941,938,2.854,939,2.258,940,2.854,941,2.854,942,2.854,943,2.495,944,4.325,945,2.854]],["title/interfaces/Media.html",[748,1.967,946,3.003]],["body/interfaces/Media.html",[0,0.245,3,0.151,4,0.135,5,0.135,10,0.332,20,0.012,22,0.509,34,0.19,39,0.77,44,1.173,46,0.009,47,0.009,149,2.438,278,0.959,424,3.613,748,2.539,750,3.395,903,3.341,937,5.191,946,5.568,947,4.205,948,4.205,949,6.673,950,3.613,951,3.613,952,4.205,953,4.205,954,4.205,955,4.205,956,4.205,957,4.205,958,4.205,959,4.205,960,4.205,961,4.205,962,4.205,963,4.645,964,4.205,965,4.645,966,4.205,967,4.645]],["title/classes/Member.html",[0,0.189,220,1.686]],["body/classes/Member.html",[0,0.186,2,0.921,3,0.115,4,0.102,5,0.102,8,1.35,10,0.253,17,0.713,20,0.012,22,0.563,27,0.373,34,0.181,35,1.077,39,0.694,46,0.008,47,0.008,53,2.094,81,1.392,96,1.392,129,2.763,147,2.346,220,2.607,267,2.28,278,0.801,352,2.75,368,4.868,388,1.855,417,2.81,446,3.425,452,4.068,509,4.068,586,4.33,596,2.75,910,3.201,968,3.201,969,4.141,970,4.899,971,4.045,972,4.045,973,4.045,974,4.068,975,3.647,976,4.75,977,4.045,978,4.045,979,4.045,980,4.045,981,2.442,982,3.201,983,4.045,984,4.33,985,4.868,986,4.045,987,4.045,988,3.536,989,5.567,990,4.045,991,4.045,992,2.95,993,3.536]],["title/controllers/MemberController.html",[48,1.626,994,3.003]],["body/controllers/MemberController.html",[0,0.163,3,0.101,4,0.09,5,0.09,10,0.221,11,1.23,17,0.667,19,1.713,20,0.012,21,0.985,22,0.479,23,1.131,25,1.783,27,0.369,29,0.585,34,0.101,39,0.709,44,1.573,46,0.007,47,0.007,48,1.398,50,1.45,53,1.958,57,1.692,58,1.625,111,2.137,125,2.855,160,3.061,161,3.785,168,2.262,169,1.625,186,1.35,220,3.073,301,3.061,360,2.802,376,3.448,417,2.238,432,2.814,433,2.303,434,2.969,456,2.34,583,3.905,768,2.327,994,3.699,995,3.095,996,3.369,997,2.641,998,5.179,999,1.764,1000,2.582,1001,3.54,1002,2.582,1003,5.656,1004,3.54,1005,2.407,1006,2.582,1007,3.54,1008,2.671,1009,1.844,1010,2.582,1011,3.54,1012,1.45,1013,4.133,1014,4.013,1015,3.54,1016,3.095,1017,4.399,1018,5.071,1019,3.54,1020,2.582,1021,2.137,1022,3.095,1023,2.238,1024,4.989,1025,3.54,1026,3.54,1027,2.407,1028,4.845,1029,2.582,1030,3.095,1031,2.582,1032,2.407,1033,2.407,1034,2.407,1035,3.448,1036,2.407,1037,2.582,1038,3.54,1039,3.54,1040,2.407,1041,2.407,1042,2.407]],["title/modules/MemberModule.html",[60,1.57,68,2.63]],["body/modules/MemberModule.html",[0,0.231,3,0.143,4,0.127,5,0.127,20,0.012,21,0.721,27,0.409,29,0.827,34,0.143,46,0.009,47,0.009,50,2.628,60,2.448,62,2.394,63,3.067,68,5.293,73,3.343,74,2.497,75,2.609,77,3.501,78,2.732,80,3.024,81,1.725,220,2.051,234,3.677,265,3.201,267,2.051,301,5.062,992,4.683,994,5.167,1022,4.38,1043,4.38,1044,4.38,1045,4.38,1046,5.357,1047,5.01,1048,5.01,1049,4.38,1050,4.38,1051,5.01]],["title/injectables/MemberRepository.html",[103,0.657,1046,2.63]],["body/injectables/MemberRepository.html",[0,0.146,3,0.09,4,0.08,5,0.08,8,1.133,10,0.198,11,1.133,12,2.887,17,0.717,19,1.89,20,0.012,21,1.087,22,0.536,23,1.247,25,1.858,27,0.367,29,0.522,34,0.09,39,0.283,46,0.007,47,0.007,81,1.089,99,2.701,103,0.746,104,1.019,125,2.41,186,1.206,220,1.295,278,0.672,292,1.053,305,2.339,320,3.381,328,3.338,337,1.249,338,1.126,376,3.177,388,1.053,432,1.845,433,1.663,434,2.144,456,1.845,583,1.909,633,4.56,691,3.57,756,3.736,762,4.487,768,2.144,999,1.576,1008,2.184,1012,1.295,1013,2.02,1023,1.396,1046,2.984,1050,2.765,1052,2.765,1053,4.079,1054,2.82,1055,2.82,1056,2.82,1057,2.232,1058,2.82,1059,1.909,1060,3.163,1061,1.909,1062,2.02,1063,1.909,1064,2.02,1065,2.984,1066,2.82,1067,2.151,1068,1.909,1069,4.391,1070,2.02,1071,1.909,1072,2.02,1073,1.511,1074,2.02,1075,1.909,1076,2.82,1077,2.82,1078,2.82,1079,3.514,1080,2.02,1081,1.344,1082,2.82,1083,2.02,1084,1.909,1085,2.02,1086,2.151,1087,2.02,1088,2.02,1089,3.163,1090,2.02]],["title/injectables/MemberService.html",[103,0.657,301,2.485]],["body/injectables/MemberService.html",[0,0.133,3,0.082,4,0.073,5,0.073,8,1.06,10,0.181,11,1.06,12,2.893,17,0.679,19,1.773,20,0.012,21,1.02,22,0.495,23,1.17,25,1.722,27,0.383,29,0.478,34,0.082,39,0.681,42,1.409,44,1.519,46,0.006,47,0.006,58,2.694,89,4.397,90,1.579,99,2.706,103,0.698,104,0.933,125,2.671,147,0.875,157,1.443,172,1.968,186,1.104,220,2.404,278,0.629,279,3.544,281,4.606,292,1.456,301,2.639,305,2.624,320,1.277,328,3.532,337,1.143,338,1.03,341,3.822,355,3.46,360,2.291,376,3.583,388,0.964,393,1.667,417,1.929,432,1.727,433,2.09,440,1.849,446,1.277,451,5.51,456,1.143,583,3.544,769,4.283,989,2.53,996,2.277,997,2.277,998,4.606,1008,2.244,1009,2.277,1012,1.79,1013,3.751,1016,2.53,1017,3.992,1023,1.929,1046,3.751,1049,2.53,1057,2.089,1073,2.089,1081,1.23,1091,2.53,1092,3.018,1093,3.822,1094,4.372,1095,1.849,1096,4.372,1097,2.793,1098,3.822,1099,2.895,1100,2.793,1101,2.895,1102,2.895,1103,4.372,1104,2.895,1105,2.895,1106,2.895,1107,2.895,1108,1.968,1109,2.895,1110,1.968,1111,4.372,1112,4.372,1113,3.822,1114,1.968,1115,1.968,1116,2.973,1117,1.968,1118,2.895,1119,2.895,1120,2.895,1121,2.895]],["title/classes/Organization.html",[0,0.189,129,1.466]],["body/classes/Organization.html",[0,0.156,2,0.773,3,0.097,4,0.086,5,0.086,8,1.192,10,0.212,17,0.743,20,0.012,21,0.832,22,0.575,27,0.349,34,0.165,35,0.903,39,0.733,46,0.007,47,0.007,53,2.181,81,1.168,96,2.603,129,2.059,147,2.035,220,2.597,267,2.013,278,0.708,352,2.306,356,2.306,388,1.637,446,2.799,505,4.218,507,3.933,509,3.695,513,4.298,528,5.056,586,3.933,596,2.306,601,4.218,602,4.218,603,4.576,604,4.576,605,4.218,606,4.576,618,2.167,903,2.256,969,3.828,970,5.019,974,3.695,975,3.313,976,4.052,981,2.047,982,2.684,984,3.933,985,4.298,988,2.965,1003,5.056,1122,2.684,1123,4.576,1124,3.391,1125,3.391,1126,3.391,1127,3.391,1128,3.391,1129,3.391,1130,3.391,1131,3.391,1132,4.298,1133,3.391,1134,5.019,1135,3.391,1136,3.391,1137,4.916,1138,3.391,1139,3.391,1140,3.391,1141,3.391,1142,3.391,1143,3.391,1144,3.391,1145,2.965]],["title/controllers/OrganizationController.html",[48,1.626,1146,3.003]],["body/controllers/OrganizationController.html",[0,0.174,3,0.107,4,0.096,5,0.096,10,0.236,11,1.286,17,0.656,19,1.665,20,0.012,21,0.958,22,0.465,23,1.099,25,1.755,27,0.377,29,0.623,34,0.107,39,0.694,44,1.548,46,0.008,47,0.008,48,1.49,50,1.545,53,1.928,57,1.802,58,1.731,111,2.277,125,2.679,129,2.497,131,4.198,135,2.752,149,3.429,160,3.202,161,3.389,168,2.41,169,1.731,186,1.438,300,3.038,432,2.629,433,2.37,434,3.054,456,2.423,598,3.813,645,3.607,768,2.434,860,2.277,996,3.466,997,2.762,999,1.88,1005,2.565,1008,2.59,1009,1.964,1012,1.545,1020,2.752,1021,2.277,1023,1.665,1024,4.947,1027,2.565,1028,4.77,1029,2.752,1030,3.298,1031,2.752,1032,2.565,1033,2.565,1034,2.565,1035,2.565,1036,2.565,1037,2.752,1040,2.565,1041,2.565,1042,2.565,1146,3.869,1147,3.298,1148,7.014,1149,3.772,1150,3.772,1151,3.772,1152,3.772,1153,3.772,1154,3.772,1155,3.772,1156,3.772,1157,4.253,1158,3.772,1159,3.772,1160,3.298,1161,3.772,1162,3.772,1163,3.772,1164,3.772]],["title/modules/OrganizationModule.html",[60,1.57,69,2.63]],["body/modules/OrganizationModule.html",[0,0.223,3,0.138,4,0.123,5,0.123,20,0.012,21,0.904,27,0.413,29,0.799,34,0.138,46,0.009,47,0.009,50,2.571,60,2.394,62,2.313,63,3,69,5.262,73,3.27,74,2.413,75,2.521,77,3.425,78,2.641,80,2.922,81,1.667,129,1.723,147,1.463,234,3.597,265,3.093,267,2.571,300,4.78,352,3.292,618,4.012,628,3.831,927,4.232,1146,5.084,1160,4.232,1165,4.232,1166,4.232,1167,4.232,1168,5.332,1169,4.841,1170,4.841,1171,4.232,1172,4.27,1173,4.232]],["title/injectables/OrganizationRepository.html",[103,0.657,1168,2.63]],["body/injectables/OrganizationRepository.html",[0,0.114,3,0.07,4,0.063,5,0.063,8,0.939,10,0.155,11,0.939,12,2.909,17,0.704,19,1.861,20,0.012,21,1.07,22,0.526,23,1.228,25,1.835,27,0.349,29,0.408,34,0.07,35,1.031,39,0.619,42,0.797,44,1.295,46,0.005,47,0.005,81,0.851,96,1.644,99,2.721,103,0.618,104,0.797,125,2.396,129,2.215,135,1.803,147,0.747,186,0.943,278,0.557,279,1.492,291,3.452,292,1.29,305,2.48,320,3.185,328,3.09,337,0.976,338,0.88,352,1.681,388,0.823,393,2.372,432,1.529,433,1.379,434,1.777,449,3.385,456,1.529,507,3.246,598,3.726,605,2.825,628,1.956,633,4.275,645,2.633,691,3.2,756,3.776,762,4.358,768,1.777,838,1.579,999,1.93,1008,1.923,1012,1.012,1023,1.091,1053,3.873,1054,2.882,1055,2.338,1056,2.338,1057,1.85,1058,2.882,1059,1.492,1061,1.492,1062,1.579,1063,1.492,1064,1.579,1066,3.261,1068,1.492,1069,4.064,1070,1.579,1071,1.492,1072,1.579,1073,1.181,1074,1.579,1075,1.492,1076,2.338,1077,2.338,1078,2.338,1079,3.095,1080,1.579,1081,1.05,1082,2.338,1083,1.579,1084,1.492,1085,1.579,1087,1.579,1088,1.579,1090,1.579,1157,1.579,1168,2.474,1174,2.161,1175,3.385,1176,2.338,1177,3.873,1178,4.774,1179,2.472,1180,2.472,1181,3.873,1182,2.472,1183,2.338,1184,2.472,1185,3.873,1186,2.472,1187,3.873,1188,2.472,1189,2.472,1190,2.472,1191,2.472,1192,3.873,1193,2.472,1194,2.472,1195,2.472,1196,2.472,1197,1.956,1198,2.472,1199,1.803,1200,2.825,1201,1.681]],["title/injectables/OrganizationService.html",[103,0.657,300,2.358]],["body/injectables/OrganizationService.html",[0,0.159,3,0.099,4,0.088,5,0.088,8,1.21,10,0.216,11,1.21,12,2.923,17,0.682,19,1.823,20,0.012,21,1.049,22,0.509,23,1.203,25,1.769,27,0.366,29,0.571,34,0.099,35,0.922,39,0.706,42,1.116,44,1.561,46,0.007,47,0.007,96,1.718,99,2.735,103,0.796,104,1.116,125,2.5,147,1.768,186,1.32,292,1.153,300,2.858,305,2.696,320,1.527,328,3.54,337,1.367,338,1.232,349,2.211,388,1.153,393,1.32,414,1.654,425,1.725,432,1.971,518,2.211,598,3.667,645,3.393,996,2.598,997,2.598,1008,2.083,1009,2.598,1012,2.043,1023,1.527,1057,2.384,1073,2.384,1081,1.471,1092,3.351,1093,4.362,1095,2.211,1097,3.188,1098,4.362,1100,3.188,1108,2.354,1110,2.354,1113,3.026,1114,2.354,1115,2.354,1116,2.354,1117,2.354,1157,4.09,1168,4.09,1171,3.026,1175,4.362,1202,3.026,1203,3.461,1204,3.461,1205,3.461,1206,3.461,1207,4.989,1208,4.67,1209,3.461,1210,3.461,1211,3.461,1212,2.211,1213,3.461,1214,3.461]],["title/interfaces/PaginateQuery.html",[748,1.967,1215,3.003]],["body/interfaces/PaginateQuery.html",[3,0.092,4,0.081,5,0.081,10,0.201,15,2.347,20,0.012,21,0.681,22,0.522,23,1.285,27,0.291,29,0.531,34,0.135,35,2.093,39,0.734,42,1.037,44,0.71,46,0.007,47,0.007,149,2.839,278,0.681,305,1.227,560,1.604,748,1.538,750,2.056,785,3.744,860,2.856,903,3.163,937,3.218,975,3.948,1021,3.979,1081,3.027,1215,4.093,1216,2.547,1217,5.762,1218,5.762,1219,6.026,1220,5.762,1221,6.229,1222,6.229,1223,4.732,1224,4.136,1225,4.136,1226,4.136,1227,4.136,1228,2.813,1229,3.218,1230,2.547,1231,2.813,1232,2.813,1233,2.813,1234,3.023,1235,2.813,1236,2.813,1237,2.813,1238,2.813,1239,2.813,1240,2.813,1241,2.813,1242,2.813,1243,4.905,1244,4.136,1245,4.136,1246,2.813,1247,2.813,1248,2.813,1249,2.813,1250,2.813,1251,2.813,1252,2.813,1253,2.813,1254,4.905,1255,5.408,1256,2.813,1257,4.905,1258,2.813,1259,2.813,1260,2.813,1261,2.813,1262,2.813,1263,4.905,1264,2.813,1265,2.813,1266,2.813,1267,2.813,1268,2.813,1269,2.813,1270,2.813,1271,2.813,1272,2.813,1273,2.813,1274,3.744,1275,2.813,1276,2.813,1277,2.813,1278,2.813,1279,2.813,1280,2.813,1281,2.813]],["title/classes/QueryErrorFilter.html",[0,0.189,1282,3.258]],["body/classes/QueryErrorFilter.html",[0,0.239,2,1.182,3,0.148,4,0.131,5,0.131,7,4.107,8,1.592,9,6.296,10,0.324,11,1.592,12,2.564,13,4.897,14,5.74,15,5.521,16,6.616,17,0.486,18,4.537,19,1.299,20,0.012,21,0.747,22,0.363,23,0.857,24,5.699,25,1.299,26,5.196,27,0.373,28,3.316,29,0.857,30,3.316,31,3.316,32,4.537,33,4.107,34,0.148,35,1.383,36,5.74,37,4.537,38,4.537,39,0.464,40,4.537,41,3.786,42,1.673,43,4.537,44,1.146,45,4.537,46,0.009,47,0.009,1282,5.699,1283,5.74,1284,5.19,1285,5.19]],["title/classes/RegisterMember.html",[0,0.189,222,2.8]],["body/classes/RegisterMember.html",[0,0.291,2,1.116,3,0.14,4,0.124,5,0.124,10,0.306,17,0.718,20,0.012,22,0.536,27,0.363,34,0.14,39,0.725,46,0.009,47,0.009,53,2.036,220,2.006,222,4.304,255,3.878,256,5.008,278,0.911,354,1.805,417,3.093,425,3.493,498,4.478,500,4.478,539,5.547,560,3.823,567,3.878,571,3.878,572,3.878,573,3.452,575,2.249,580,3.878,581,3.878,585,3.332,591,4.284,596,3.332,597,5.008,745,4.043,747,3.574,772,4.284,773,4.284,903,2.904,1286,6.867,1287,4.9,1288,4.9,1289,4.9,1290,4.9,1291,4.9]],["title/classes/Resource.html",[0,0.189,1292,2.246]],["body/classes/Resource.html",[0,0.228,2,1.13,3,0.141,4,0.126,5,0.126,8,1.547,10,0.31,17,0.66,20,0.012,21,1.015,22,0.551,27,0.365,34,0.201,35,1.321,39,0.666,46,0.009,47,0.009,53,1.938,81,1.708,96,1.708,267,2.612,278,0.918,388,2.125,649,3.514,969,4.493,970,4.757,974,3.169,975,2.841,976,3.169,981,2.994,1292,4.059,1293,3.925,1294,7.051,1295,4.961,1296,5.061,1297,4.961,1298,4.961,1299,4.336,1300,4.961,1301,4.961,1302,4.961,1303,4.336,1304,4.961,1305,3.618,1306,4.961,1307,3.618,1308,4.336]],["title/controllers/ResourceController.html",[48,1.626,1309,3.003]],["body/controllers/ResourceController.html",[0,0.167,3,0.103,4,0.092,5,0.092,10,0.226,11,1.25,17,0.672,19,1.728,20,0.012,21,0.994,22,0.483,23,1.141,25,1.796,27,0.358,29,0.598,34,0.103,39,0.712,44,1.585,46,0.007,47,0.007,48,1.431,50,1.483,53,1.973,57,1.731,58,1.663,111,2.187,125,2.644,160,3.112,161,3.294,168,2.315,169,1.663,186,1.381,432,2.582,433,2.327,434,3.464,456,2.37,646,3.946,649,3.258,768,2.366,996,3.405,997,2.685,999,1.806,1000,2.643,1002,2.643,1005,2.464,1006,2.643,1008,2.556,1009,1.887,1010,2.643,1012,1.483,1014,2.867,1020,2.643,1021,2.187,1023,1.599,1024,5.023,1027,2.464,1028,4.882,1029,2.643,1031,2.643,1032,2.464,1033,2.464,1034,2.464,1035,2.464,1036,2.464,1037,2.643,1040,2.464,1041,2.464,1042,2.464,1292,4.299,1309,3.76,1310,3.167,1311,3.294,1312,3.623,1313,5.155,1314,3.623,1315,2.315,1316,4.507,1317,3.167,1318,3.623,1319,3.623,1320,3.623,1321,4.177,1322,3.623,1323,3.294,1324,3.167,1325,3.76,1326,3.623,1327,3.623,1328,3.167,1329,3.167,1330,3.167,1331,3.167]],["title/modules/ResourceModule.html",[60,1.57,70,2.8]],["body/modules/ResourceModule.html",[0,0.222,3,0.138,4,0.122,5,0.122,20,0.012,21,0.902,27,0.413,29,0.797,34,0.138,46,0.009,47,0.009,50,2.567,60,2.39,62,2.308,63,2.996,70,5.599,73,3.265,74,2.407,75,2.515,77,3.42,78,2.634,80,2.915,81,1.663,234,3.591,265,3.086,267,2.567,1292,2.634,1296,3.284,1299,4.222,1307,4.573,1309,5.078,1323,5.33,1324,4.222,1332,4.222,1333,4.222,1334,4.222,1335,5.33,1336,4.83,1337,4.83,1338,4.222,1339,4.222,1340,4.573,1341,4.83,1342,4.83,1343,4.83]],["title/injectables/ResourceRepository.html",[103,0.657,1335,2.63]],["body/injectables/ResourceRepository.html",[0,0.129,3,0.08,4,0.071,5,0.071,8,1.032,10,0.175,11,1.032,12,2.879,17,0.715,19,1.889,20,0.012,21,1.087,22,0.534,23,1.247,25,1.863,27,0.352,29,0.461,34,0.08,35,0.744,39,0.516,42,0.901,44,1.138,46,0.006,47,0.006,81,0.962,96,1.775,99,2.693,103,0.68,104,0.901,125,2.504,186,1.065,278,0.613,292,0.931,305,2.366,320,3.286,328,3.216,337,1.104,338,0.995,388,0.931,393,1.623,432,1.681,433,1.515,434,1.953,456,1.681,633,4.421,646,3.481,649,2.874,691,3.385,756,3.566,762,4.377,768,1.953,838,1.785,999,1.393,1008,2.053,1012,1.144,1023,1.233,1053,3.979,1054,2.57,1055,2.57,1056,2.57,1057,2.034,1058,3.113,1059,1.687,1061,1.687,1062,1.785,1063,1.687,1064,1.785,1065,2.72,1066,2.57,1067,1.9,1068,1.687,1069,4.23,1070,1.785,1071,1.687,1072,1.785,1073,1.335,1074,1.785,1075,1.687,1076,2.57,1077,2.57,1078,2.57,1079,3.303,1080,1.785,1081,1.187,1082,2.57,1083,1.785,1084,1.687,1085,1.785,1086,1.9,1087,1.785,1088,1.785,1090,1.785,1176,2.57,1183,2.57,1197,2.211,1199,2.038,1200,3.105,1201,1.9,1292,3.385,1311,2.72,1315,2.72,1321,1.785,1325,3.105,1335,2.72,1339,2.443,1344,2.443,1345,2.794,1346,2.794,1347,2.794,1348,2.794,1349,2.038,1350,2.211]],["title/classes/ResourceRole.html",[0,0.189,1296,2.8]],["body/classes/ResourceRole.html",[0,0.215,2,1.064,3,0.133,4,0.118,5,0.118,8,1.488,10,0.292,17,0.707,20,0.012,22,0.553,27,0.355,34,0.195,35,1.245,46,0.009,47,0.009,53,2.077,81,1.609,96,1.609,267,2.512,278,0.883,388,2.044,446,3.539,969,4.391,970,4.942,974,2.985,975,2.677,976,3.92,981,2.821,982,3.698,984,3.178,1296,4.659,1305,3.409,1340,3.409,1351,6.137,1352,3.698,1353,6.851,1354,6.851,1355,6.851,1356,6.851,1357,6.346,1358,4.673,1359,4.673,1360,4.673,1361,4.673,1362,4.673,1363,4.673,1364,4.085]],["title/injectables/ResourceService.html",[103,0.657,1323,2.63]],["body/injectables/ResourceService.html",[0,0.157,3,0.097,4,0.086,5,0.086,8,1.198,10,0.213,11,1.198,12,2.918,17,0.679,19,1.816,20,0.012,21,1.044,22,0.507,23,1.198,25,1.761,27,0.376,29,0.564,34,0.097,35,0.909,39,0.704,42,1.101,44,1.554,46,0.007,47,0.007,96,1.701,99,2.73,103,0.789,104,1.101,125,2.486,186,1.302,292,1.137,305,2.683,320,1.507,328,3.529,337,1.349,338,1.215,349,2.181,388,1.137,393,1.302,414,1.631,432,1.951,518,2.181,646,3.84,649,1.702,996,2.573,997,2.573,1008,2.067,1009,2.573,1012,2.023,1023,1.507,1057,2.361,1073,2.361,1081,1.451,1092,3.325,1095,2.181,1097,3.156,1100,3.156,1108,2.322,1110,2.322,1114,2.322,1115,2.322,1116,2.322,1117,2.322,1176,2.982,1183,2.982,1208,4.641,1212,2.181,1292,3.166,1311,3.156,1315,3.156,1321,4.065,1323,3.156,1325,3.604,1335,4.065,1338,2.985,1349,3.604,1365,2.985,1366,3.414,1367,3.414,1368,3.414,1369,3.414,1370,3.414,1371,3.414,1372,3.414,1373,3.909,1374,2.985,1375,2.702,1376,2.985,1377,3.414]],["title/classes/Role.html",[0,0.189,446,1.817]],["body/classes/Role.html",[0,0.211,2,1.045,3,0.131,4,0.116,5,0.116,8,1.47,10,0.287,17,0.635,20,0.012,21,0.977,22,0.505,27,0.352,34,0.173,35,1.222,39,0.646,46,0.009,47,0.009,53,1.866,81,1.579,96,2.586,129,2.877,147,1.387,267,2.482,278,0.872,388,2.019,428,4.422,433,2.417,446,3.187,470,4.011,476,3.347,649,3.384,793,4.422,910,3.631,969,4.098,970,4.36,974,2.931,975,2.628,976,3.873,981,2.769,984,3.12,1123,4.797,1132,5.3,1134,4.797,1292,2.502,1305,3.347,1378,3.631,1379,4.588,1380,4.588,1381,4.588,1382,6.062,1383,6.062,1384,6.062,1385,4.588,1386,5.3,1387,4.588,1388,4.588,1389,4.588,1390,4.011,1391,4.588,1392,4.011,1393,4.588,1394,4.588,1395,4.588,1396,4.011,1397,4.588,1398,3.347,1399,4.011]],["title/controllers/RoleController.html",[48,1.626,1400,3.003]],["body/controllers/RoleController.html",[0,0.167,3,0.103,4,0.092,5,0.092,10,0.226,11,1.25,17,0.672,19,1.728,20,0.012,21,0.994,22,0.483,23,1.141,25,1.796,27,0.358,29,0.598,34,0.103,39,0.712,44,1.585,46,0.007,47,0.007,48,1.431,50,1.483,53,1.973,57,1.731,58,1.663,111,2.187,125,2.644,160,3.112,161,3.294,168,2.315,169,1.663,186,1.381,299,3.112,432,2.582,433,2.327,434,3.294,446,3.478,456,2.37,649,3.258,653,3.946,768,2.366,996,3.405,997,2.685,999,1.806,1000,2.643,1002,2.643,1005,2.464,1006,2.643,1008,2.556,1009,1.887,1010,2.643,1012,1.483,1014,2.867,1020,2.643,1021,2.187,1023,1.599,1024,5.023,1027,2.464,1028,4.882,1029,2.643,1031,2.643,1032,2.464,1033,2.464,1034,2.464,1035,2.464,1036,2.464,1037,2.643,1040,2.464,1041,2.464,1042,2.464,1123,4.079,1311,3.294,1315,2.315,1316,4.507,1317,3.167,1328,3.167,1329,3.167,1330,3.167,1331,3.167,1400,3.76,1401,3.167,1402,5.155,1403,3.623,1404,3.623,1405,3.623,1406,3.623,1407,3.623,1408,4.177,1409,3.623,1410,3.167,1411,3.76,1412,3.623,1413,3.623]],["title/modules/RoleModule.html",[60,1.57,71,2.63]],["body/modules/RoleModule.html",[0,0.231,3,0.143,4,0.127,5,0.127,20,0.012,21,0.721,27,0.409,29,0.827,34,0.143,46,0.009,47,0.009,50,2.628,60,2.448,62,2.394,63,3.067,71,5.293,73,3.343,74,2.497,75,2.609,77,3.501,78,2.732,80,3.024,81,1.725,234,3.677,265,3.201,267,2.051,299,5.062,446,2.211,1398,4.683,1400,5.167,1410,4.38,1414,4.38,1415,4.38,1416,4.38,1417,5.357,1418,5.01,1419,5.01,1420,4.38,1421,4.38,1422,5.01]],["title/injectables/RoleRepository.html",[103,0.657,1417,2.63]],["body/injectables/RoleRepository.html",[0,0.129,3,0.08,4,0.071,5,0.071,8,1.035,10,0.175,11,1.035,12,2.88,17,0.715,19,1.89,20,0.012,21,1.087,22,0.535,23,1.247,25,1.864,27,0.352,29,0.463,34,0.08,35,0.746,39,0.517,42,0.903,44,1.14,46,0.006,47,0.006,81,0.965,96,1.778,99,2.695,103,0.681,104,0.903,125,2.507,186,1.068,278,0.614,292,0.933,305,2.369,320,3.288,328,3.219,337,1.107,338,0.998,388,0.933,393,1.626,432,1.685,433,1.519,434,1.958,446,2.742,456,1.685,633,4.424,649,2.878,653,3.486,691,3.389,756,3.57,762,4.38,768,1.958,838,1.79,999,1.396,1008,2.056,1012,1.147,1023,1.236,1053,3.982,1054,2.575,1055,2.575,1056,2.575,1057,2.038,1058,3.118,1059,1.691,1061,1.691,1062,1.79,1063,1.691,1064,1.79,1065,2.725,1066,2.575,1067,1.905,1068,1.691,1069,4.234,1070,1.79,1071,1.691,1072,1.79,1073,1.339,1074,1.79,1075,1.691,1076,2.575,1077,2.575,1078,2.575,1079,3.308,1080,1.79,1081,1.19,1082,2.575,1083,1.79,1084,1.691,1085,1.79,1086,1.905,1087,1.79,1088,1.79,1090,1.79,1176,2.575,1183,2.575,1197,2.217,1199,2.044,1200,3.112,1201,1.905,1311,2.725,1315,2.725,1349,2.044,1350,2.217,1408,1.79,1411,3.112,1417,2.725,1421,2.45,1423,2.45,1424,2.802,1425,2.802,1426,2.802,1427,2.802]],["title/injectables/RoleService.html",[103,0.657,299,2.485]],["body/injectables/RoleService.html",[0,0.146,3,0.09,4,0.08,5,0.08,8,1.137,10,0.199,11,1.137,12,2.957,17,0.696,19,1.776,20,0.012,21,1.021,22,0.496,23,1.172,25,1.822,27,0.368,29,0.525,34,0.09,35,0.846,39,0.694,42,1.024,44,1.608,46,0.007,47,0.007,96,1.614,99,2.766,103,0.748,104,1.024,125,2.415,186,1.212,220,1.301,292,1.058,299,2.83,305,2.777,320,1.402,328,3.47,337,1.255,338,1.131,349,2.03,388,1.058,393,1.212,414,1.518,432,1.851,446,2.458,518,2.03,649,2.776,653,3.712,996,2.441,997,2.441,1008,1.983,1009,2.441,1012,1.919,1023,1.402,1057,2.24,1073,2.24,1081,1.35,1092,3.191,1095,2.03,1097,2.995,1100,2.995,1108,2.161,1110,2.161,1114,2.161,1115,2.161,1116,2.161,1117,2.161,1176,2.83,1183,2.83,1208,4.485,1212,2.03,1311,2.995,1315,2.995,1349,3.419,1373,3.709,1374,2.778,1375,2.514,1376,2.778,1386,2.778,1408,3.928,1411,3.419,1417,3.928,1420,2.778,1428,2.778,1429,6.149,1430,6.149,1431,3.178,1432,3.178,1433,3.178,1434,3.178,1435,3.178,1436,3.178,1437,3.178,1438,3.178,1439,3.178,1440,4.688,1441,3.178]],["title/injectables/SharedRepository.html",[103,0.657,1053,2.144]],["body/injectables/SharedRepository.html",[0,0.124,3,0.077,4,0.068,5,0.068,10,0.169,11,1.007,12,2.93,17,0.691,19,1.817,20,0.012,21,1.045,22,0.516,23,1.199,25,1.78,27,0.215,29,0.447,34,0.077,35,0.72,39,0.371,42,1.971,44,1.425,46,0.006,47,0.006,96,0.931,99,2.741,103,0.663,104,0.872,125,2.555,278,0.597,292,0.901,305,2.161,320,3.259,328,3.482,337,1.068,338,0.963,388,0.901,414,2.415,432,1.996,433,1.478,434,2.319,456,1.64,691,3.96,756,3.521,758,2.364,762,4.651,768,2.319,999,2.069,1008,2.298,1012,1.107,1053,2.162,1054,3.05,1055,2.506,1056,2.506,1057,2.415,1058,2.506,1059,1.632,1061,2.506,1063,2.506,1065,3.228,1066,3.422,1068,2.506,1069,4.581,1071,1.632,1073,1.984,1075,2.506,1076,3.422,1077,3.422,1078,3.422,1079,3.697,1081,1.764,1082,3.05,1084,2.506,1212,1.728,1350,3.285,1442,2.364,1443,2.704,1444,2.704,1445,2.704,1446,2.704,1447,2.704,1448,2.704,1449,2.704,1450,2.704,1451,2.704,1452,2.704,1453,2.704,1454,2.704,1455,2.704,1456,4.152,1457,5.053,1458,5.053,1459,4.152,1460,2.704,1461,2.704,1462,2.704,1463,2.704,1464,2.704,1465,5.053,1466,5.053]],["title/classes/SharedService.html",[0,0.189,1092,2.358]],["body/classes/SharedService.html",[0,0.28,2,1.386,3,0.173,4,0.154,5,0.154,17,0.569,19,1.522,20,0.012,21,0.875,22,0.425,23,1.004,27,0.315,34,0.173,46,0.01,47,0.01,292,2.026,1053,3.168,1092,4.146,1095,3.887,1097,5.218,1212,3.887,1467,5.318,1468,6.083,1469,6.083]],["title/modules/SmsModule.html",[60,1.57,229,2.8]],["body/modules/SmsModule.html",[0,0.244,3,0.151,4,0.134,5,0.134,20,0.012,27,0.395,29,0.875,34,0.151,46,0.009,47,0.009,60,2.536,62,2.532,63,3.179,73,3.464,74,2.641,75,2.76,77,3.628,78,2.89,88,5.264,90,2.89,229,5.685,234,3.811,296,5.399,1470,4.633,1471,4.633,1472,4.633,1473,5.399,1474,5.3,1475,5.3,1476,4.633]],["title/injectables/SmsService.html",[103,0.657,296,2.63]],["body/injectables/SmsService.html",[0,0.258,3,0.117,4,0.104,5,0.104,10,0.256,11,1.362,17,0.676,19,1.808,20,0.012,21,1.04,22,0.505,23,1.193,25,1.725,27,0.357,29,0.676,34,0.117,39,0.75,44,1.522,46,0.008,47,0.008,57,1.956,103,0.896,104,1.32,152,5.76,158,4.053,292,1.364,296,3.587,354,1.508,414,3.295,441,3.24,574,2.616,800,3.24,903,3.164,908,5.03,909,3.579,1473,4.405,1476,3.579,1477,3.579,1478,4.908,1479,5.615,1480,5.615,1481,4.443,1482,4.094,1483,4.094,1484,5.615,1485,5.615,1486,4.094,1487,5.615,1488,4.094,1489,5.615,1490,4.094,1491,5.615,1492,4.094,1493,6.895,1494,6.895,1495,5.615,1496,5.615,1497,4.094,1498,4.094,1499,3.579]],["title/classes/TermiiRequestParams.html",[0,0.189,950,2.8]],["body/classes/TermiiRequestParams.html",[0,0.17,2,0.84,3,0.105,4,0.093,5,0.093,10,0.231,11,1.266,17,0.775,19,0.923,20,0.012,21,0.531,22,0.583,23,1.361,25,0.923,34,0.149,39,0.758,44,0.814,46,0.007,47,0.007,149,3.814,278,0.752,292,1.229,424,3.551,748,1.763,903,3.314,937,2.509,946,5.268,947,6.577,948,2.919,949,3.225,950,3.551,951,4.122,952,4.797,953,4.797,954,4.797,955,4.797,956,4.797,957,4.797,958,4.797,959,4.797,960,4.797,961,4.797,962,4.797,963,4.565,964,4.797,965,3.225,966,5.216,967,3.225,1500,5.222,1501,3.689,1502,3.689,1503,3.689,1504,3.689,1505,3.689,1506,3.689,1507,3.689,1508,3.689,1509,3.689,1510,3.689,1511,3.689,1512,3.689,1513,3.689,1514,3.689,1515,3.689,1516,3.689]],["title/interfaces/TermiiSendSmsResponse.html",[748,1.967,1517,3.003]],["body/interfaces/TermiiSendSmsResponse.html",[3,0.163,4,0.145,5,0.145,10,0.358,20,0.012,22,0.548,34,0.163,39,0.752,46,0.01,47,0.01,147,2.368,278,1.004,406,4.728,440,3.655,748,2.734,750,3.655,903,3.453,951,3.89,1517,5.088,1518,5.001,1519,5.001,1520,7.833,1521,7.833]],["title/injectables/TermiiService.html",[103,0.657,1473,2.63]],["body/injectables/TermiiService.html",[0,0.119,3,0.074,4,0.065,5,0.065,10,0.162,11,0.973,13,2.728,17,0.671,19,1.499,20,0.012,21,0.862,22,0.511,23,0.989,25,1.499,26,2.047,27,0.31,29,0.427,34,0.074,35,1.309,39,0.735,42,2.044,44,1.46,46,0.006,47,0.006,57,1.236,58,2.909,89,4.05,90,1.411,99,2.47,103,0.64,104,0.834,149,1.187,158,1.347,278,0.577,279,4.634,292,0.861,305,2.111,337,2.504,338,2.257,393,2.285,406,4.237,414,1.917,440,1.652,468,2.926,673,4.075,686,2.261,695,4.84,704,4.296,719,4.742,721,3.888,728,2.261,734,3.174,742,4.296,903,1.187,950,4.075,951,3.341,952,5.78,953,4.381,954,4.742,955,3.174,956,2.047,957,2.047,958,2.047,959,2.047,960,2.047,961,2.047,962,2.047,964,3.174,966,3.888,1079,2.298,1134,2.047,1274,2.047,1473,2.563,1478,4.296,1481,3.174,1499,5.542,1517,1.887,1522,2.261,1523,4.914,1524,5.536,1525,4.914,1526,4.011,1527,2.586,1528,2.586,1529,2.586,1530,7.515,1531,6.34,1532,2.586,1533,2.586,1534,2.586,1535,4.011,1536,2.586,1537,4.011,1538,2.586,1539,4.011,1540,2.586,1541,4.011,1542,4.011,1543,4.011,1544,4.011,1545,5.536,1546,4.011,1547,2.586,1548,4.011,1549,5.992,1550,2.586,1551,4.011,1552,2.586,1553,4.011,1554,2.586,1555,2.586,1556,2.586,1557,2.586,1558,2.586,1559,2.586,1560,2.586,1561,2.586,1562,2.586,1563,5.536,1564,2.586,1565,2.586,1566,2.586,1567,5.536,1568,2.586,1569,4.011,1570,4.011,1571,2.586,1572,2.586,1573,4.011,1574,2.261,1575,2.586,1576,2.586]],["title/classes/Token.html",[0,0.189,251,2.246]],["body/classes/Token.html",[0,0.254,2,1.257,3,0.157,4,0.14,5,0.14,8,1.654,10,0.345,17,0.638,20,0.012,22,0.477,27,0.353,34,0.194,35,1.47,39,0.692,46,0.01,47,0.01,53,1.875,81,1.899,96,1.899,251,4.335,252,4.024,267,2.793,278,0.982,315,5.401,388,2.272,969,4.47,970,4.798,981,3.33,1305,4.024,1577,4.366,1578,5.517,1579,5.517,1580,4.823]],["title/classes/TokenData.html",[0,0.189,363,2.63]],["body/classes/TokenData.html",[0,0.255,2,1.26,3,0.158,4,0.14,5,0.14,10,0.346,17,0.744,20,0.012,22,0.556,34,0.158,39,0.753,46,0.01,47,0.01,278,0.983,291,4.737,311,5.408,334,6.481,363,4.365,425,3.695,492,6.481,1581,7.083,1582,4.836,1583,5.532,1584,5.532,1585,5.532,1586,5.532,1587,5.532]],["title/injectables/TokenRepository.html",[103,0.657,232,2.63]],["body/injectables/TokenRepository.html",[0,0.209,3,0.087,4,0.077,5,0.077,8,1.102,10,0.19,11,1.102,12,2.872,17,0.72,19,1.901,20,0.012,21,1.094,22,0.538,23,1.255,25,1.873,27,0.363,29,0.503,34,0.087,39,0.539,44,0.673,46,0.006,47,0.006,81,1.049,99,2.687,103,0.726,104,0.982,125,2.373,147,0.921,186,1.162,232,2.904,251,1.662,253,2.664,278,0.654,292,1.015,305,2.297,311,3.315,320,3.353,328,3.302,337,1.204,338,1.085,353,1.84,354,1.123,388,1.015,432,1.795,433,1.618,434,2.086,456,1.795,633,4.52,659,2.223,691,3.515,756,3.686,762,4.455,768,2.086,999,1.519,1008,2.145,1012,1.248,1053,4.05,1054,2.743,1055,2.743,1056,2.743,1057,2.172,1058,2.743,1059,1.84,1061,1.84,1062,1.947,1063,1.84,1064,1.947,1065,2.904,1066,2.743,1067,2.073,1068,1.84,1069,4.344,1070,1.947,1071,1.84,1072,1.947,1073,1.456,1074,1.947,1075,1.84,1076,2.743,1077,2.743,1078,2.743,1079,3.451,1080,1.947,1081,1.295,1082,2.743,1083,1.947,1084,1.84,1085,1.947,1086,2.073,1087,1.947,1088,1.947,1090,1.947,1201,2.073,1588,2.664,1589,4.545,1590,3.048,1591,4.545,1592,3.048,1593,3.048,1594,3.048]],["title/interfaces/TokenRequest.html",[127,2.63,748,1.967]],["body/interfaces/TokenRequest.html",[3,0.159,4,0.141,5,0.141,8,1.665,10,0.349,20,0.012,22,0.52,27,0.385,34,0.159,46,0.01,47,0.01,127,4.388,147,2.347,149,3.415,220,3.18,278,0.988,291,4.961,356,3.793,363,5.308,364,4.414,365,4.414,748,2.665,750,3.564,860,3.367,903,3.415,1595,4.877,1596,4.877]],["title/classes/UpdateMemberDto.html",[0,0.189,1013,2.63]],["body/classes/UpdateMemberDto.html",[0,0.273,2,1.353,3,0.169,4,0.15,5,0.15,8,1.44,10,0.371,17,0.556,20,0.012,22,0.415,23,1.178,27,0.37,34,0.169,39,0.638,46,0.01,47,0.01,169,2.726,278,1.027,376,4.039,433,2.115,583,3.586,585,4.039,1008,2.723,1013,4.559,1597,5.646,1598,5.94,1599,4.039,1600,5.94]],["title/classes/UpdateMemberPasswordDto.html",[0,0.189,1017,2.8]],["body/classes/UpdateMemberPasswordDto.html",[0,0.318,2,1.281,3,0.16,4,0.142,5,0.142,10,0.352,17,0.646,20,0.012,22,0.483,27,0.358,34,0.16,39,0.697,46,0.01,47,0.01,53,1.897,220,3.058,278,0.993,354,2.072,417,3.296,560,3.722,575,2.581,577,3.825,578,3.825,579,4.451,582,5.463,629,4.451,632,4.917,1017,4.694,1597,5.91,1601,7.469,1602,5.625]],["title/classes/UpdateOrganizationDto.html",[0,0.189,1157,2.63]],["body/classes/UpdateOrganizationDto.html",[0,0.273,2,1.353,3,0.169,4,0.15,5,0.15,8,1.44,10,0.371,17,0.556,20,0.012,22,0.415,23,1.178,27,0.37,34,0.169,39,0.638,46,0.01,47,0.01,169,2.726,278,1.027,433,2.115,598,3.402,600,4.7,645,4.039,1008,2.723,1157,4.559,1599,4.039,1603,6.238,1604,5.94,1605,5.94]],["title/classes/UpdateResourceDto.html",[0,0.189,1321,2.63]],["body/classes/UpdateResourceDto.html",[0,0.287,2,1.42,3,0.178,4,0.158,5,0.158,8,1.512,20,0.012,27,0.38,34,0.178,46,0.01,47,0.01,169,2.861,433,2.219,646,3.763,648,4.933,1321,4.691,1325,4.547,1599,4.239,1606,5.45,1607,6.234]],["title/classes/UpdateRoleDto.html",[0,0.189,1408,2.63]],["body/classes/UpdateRoleDto.html",[0,0.273,2,1.353,3,0.169,4,0.15,5,0.15,8,1.44,10,0.371,17,0.556,20,0.012,22,0.415,23,1.178,27,0.37,34,0.169,39,0.638,46,0.01,47,0.01,169,2.726,278,1.027,433,2.115,653,3.586,655,4.7,1008,2.723,1408,4.559,1411,4.333,1599,4.039,1608,6.238,1609,5.94,1610,5.94]],["title/classes/UpdateUserDto.html",[0,0.189,204,2.358]],["body/classes/UpdateUserDto.html",[0,0.345,2,1.289,3,0.161,4,0.143,5,0.143,8,1.372,10,0.354,17,0.529,20,0.012,22,0.395,23,1.144,27,0.404,34,0.161,46,0.01,47,0.01,53,1.555,169,2.596,204,3.968,278,0.997,350,5.481,351,3.847,354,2.083,433,2.014,573,3.778,663,3.414,665,4.476,1357,5.481,1599,3.847,1611,7.487,1612,5.657,1613,5.657,1614,6.927,1615,4.945,1616,5.657]],["title/classes/User.html",[0,0.189,147,1.244]],["body/classes/User.html",[0,0.216,2,0.726,3,0.091,4,0.081,5,0.081,8,1.139,10,0.199,17,0.665,20,0.012,21,0.459,22,0.529,27,0.356,28,2.036,29,0.526,31,2.036,33,2.522,34,0.159,35,1.64,39,0.652,41,2.325,42,1.985,44,1.232,46,0.007,47,0.007,53,1.952,81,1.097,96,2.12,99,1.565,147,2.249,157,3.54,158,3.577,220,2.521,267,1.924,278,0.676,313,2.522,338,2.445,353,1.924,354,1.174,356,2.168,388,1.565,393,1.791,414,2.942,460,2.836,468,2.325,476,2.325,498,3.565,500,3.565,574,2.036,601,4.07,602,2.325,620,4.07,671,2.522,673,3.795,755,4.07,822,4.416,848,2.787,903,2.156,969,3.717,970,4.401,974,2.036,975,3.196,976,2.036,981,1.924,984,2.168,1172,2.168,1357,4.873,1617,2.522,1618,5.58,1619,5.58,1620,5.58,1621,3.188,1622,3.188,1623,3.188,1624,3.188,1625,3.188,1626,3.188,1627,3.188,1628,6.158,1629,3.188,1630,3.188,1631,3.188,1632,3.188,1633,3.188,1634,3.188,1635,4.107,1636,5.58,1637,4.699,1638,4.699,1639,3.188,1640,4.699,1641,3.188,1642,3.188,1643,3.188,1644,3.188,1645,2.787,1646,3.188,1647,3.188,1648,3.188,1649,3.188,1650,6.158,1651,6.158,1652,6.158,1653,3.188,1654,3.188,1655,3.188,1656,3.188,1657,3.188,1658,3.188,1659,4.699,1660,3.188,1661,3.188,1662,3.188,1663,4.699,1664,3.188,1665,3.188,1666,3.188,1667,3.188]],["title/controllers/UserController.html",[48,1.626,1668,3.003]],["body/controllers/UserController.html",[0,0.171,3,0.106,4,0.094,5,0.094,10,0.233,11,1.275,12,2.579,17,0.619,19,1.656,20,0.012,21,0.952,22,0.463,23,1.093,25,1.656,27,0.361,29,0.615,34,0.106,35,0.992,39,0.666,44,1.599,46,0.007,47,0.007,48,1.471,50,1.525,53,1.819,57,1.779,58,1.709,99,2.413,111,2.248,125,1.936,147,2.337,160,3.173,161,3.892,168,2.379,169,1.709,186,1.42,204,2.133,298,3.011,305,2.004,351,2.532,393,2.004,406,2.248,433,2.485,434,3.324,456,2.406,663,4.373,721,5.891,730,2.946,768,2.412,860,2.248,996,2.737,997,2.737,1000,2.716,1002,2.716,1005,2.532,1006,2.716,1008,2.485,1009,1.939,1010,2.716,1021,2.248,1024,4.746,1027,2.532,1028,4.5,1032,2.532,1033,2.532,1034,2.532,1035,2.532,1036,2.532,1040,2.532,1041,2.532,1042,2.532,1081,2.233,1100,2.379,1234,2.379,1392,4.595,1668,3.834,1669,3.255,1670,3.723,1671,3.723,1672,3.723,1673,3.723,1674,3.723,1675,4.595,1676,3.255,1677,3.723,1678,3.723,1679,3.723,1680,3.723,1681,3.723,1682,3.723,1683,3.723,1684,3.723,1685,3.723,1686,3.723]],["title/modules/UserModule.html",[60,1.57,72,2.63]],["body/modules/UserModule.html",[0,0.231,3,0.143,4,0.127,5,0.127,20,0.012,21,0.721,27,0.409,29,0.827,34,0.143,46,0.009,47,0.009,50,2.628,60,2.448,62,2.394,63,3.067,72,5.293,73,3.343,74,2.497,75,2.609,77,3.501,78,2.732,80,3.024,81,1.725,147,1.514,234,3.677,265,3.201,267,2.051,298,4.803,1172,4.365,1173,4.38,1668,5.167,1676,4.38,1687,4.38,1688,4.38,1689,4.38,1690,5.357,1691,5.01,1692,5.01,1693,4.38,1694,4.38]],["title/injectables/UserRepository.html",[103,0.657,1690,2.63]],["body/injectables/UserRepository.html",[0,0.188,3,0.075,4,0.067,5,0.067,8,0.991,10,0.166,11,0.991,12,2.858,17,0.707,19,1.866,20,0.012,21,1.074,22,0.528,23,1.232,25,1.839,27,0.357,29,0.438,34,0.075,35,1.089,39,0.502,42,0.855,44,1.102,46,0.006,47,0.006,81,0.913,96,1.718,99,2.674,103,0.653,104,0.855,125,2.458,147,1.832,157,2.487,158,2.599,186,1.011,204,1.518,278,0.588,292,0.883,305,2.311,320,3.243,328,3.162,337,1.047,338,0.944,351,2.78,353,1.6,354,0.976,388,0.883,393,1.559,425,2.487,432,1.615,433,1.455,434,1.876,456,1.615,497,4.439,502,3.949,633,4.359,663,3.386,691,3.306,756,3.493,762,4.328,768,1.876,838,1.694,999,1.321,1008,1.997,1012,1.085,1023,1.17,1053,3.935,1054,2.468,1055,2.468,1056,2.468,1057,1.954,1058,3.013,1059,1.6,1061,1.6,1062,1.694,1063,1.6,1064,1.694,1065,2.612,1066,2.468,1067,1.803,1068,1.6,1069,4.16,1070,1.694,1071,1.6,1072,1.694,1073,1.267,1074,1.694,1075,1.6,1076,2.468,1077,2.468,1078,2.468,1079,3.213,1080,1.694,1081,1.126,1082,2.468,1083,1.694,1084,1.6,1085,1.694,1086,1.803,1087,1.694,1088,1.694,1090,1.694,1176,2.468,1183,2.468,1199,1.934,1200,2.982,1201,1.803,1234,1.694,1690,2.612,1694,2.317,1695,2.317,1696,3.574,1697,2.651,1698,3.574,1699,2.651,1700,2.651,1701,2.651,1702,2.651,1703,2.651]],["title/injectables/UserService.html",[103,0.657,298,2.358]],["body/injectables/UserService.html",[0,0.153,3,0.095,4,0.084,5,0.084,8,1.175,10,0.208,11,1.175,12,2.908,17,0.674,19,1.801,20,0.012,21,1.036,22,0.503,23,1.188,25,1.744,27,0.361,28,3.096,29,0.549,34,0.095,35,0.885,39,0.701,42,1.562,44,1.539,46,0.007,47,0.007,96,1.668,99,2.72,103,0.774,104,1.072,112,2.906,125,2.46,147,1.728,157,1.657,158,1.731,186,1.267,204,3.599,292,1.107,298,2.775,305,2.658,320,1.467,328,3.507,337,1.313,338,1.183,349,2.124,351,3.295,388,1.107,393,1.267,414,2.315,425,1.657,432,1.914,456,1.313,497,2.631,502,2.631,518,2.124,663,3.793,816,2.906,903,1.525,928,2.906,996,2.523,997,2.523,1008,2.035,1009,2.523,1012,1.984,1023,1.467,1057,2.315,1073,2.315,1081,1.412,1092,3.275,1095,2.124,1097,3.096,1100,3.096,1108,2.261,1110,2.261,1114,2.261,1115,2.261,1116,2.261,1117,2.261,1176,2.925,1183,2.925,1208,4.583,1212,2.124,1375,2.631,1481,2.631,1635,2.906,1690,4.014,1693,2.906,1696,4.236,1698,4.236,1704,2.906,1705,3.324,1706,3.324,1707,3.324,1708,3.324,1709,3.324,1710,3.324,1711,3.324,1712,3.324,1713,3.324,1714,3.324,1715,3.324,1716,3.324,1717,3.324]],["title/classes/VerifyEmailDto.html",[0,0.189,155,2.8]],["body/classes/VerifyEmailDto.html",[0,0.277,2,1.373,3,0.172,4,0.153,5,0.153,10,0.377,17,0.564,20,0.012,22,0.421,27,0.312,34,0.172,39,0.644,46,0.01,47,0.01,53,1.657,155,4.895,278,1.036,425,3.836,575,2.766,745,4.917,747,4.398,1718,5.697,1719,5.27,1720,6.029]],["title/classes/VerifyOtpDto.html",[0,0.189,145,2.8]],["body/classes/VerifyOtpDto.html",[0,0.32,2,1.296,3,0.162,4,0.144,5,0.144,10,0.356,17,0.65,20,0.012,22,0.486,27,0.36,34,0.162,39,0.622,46,0.01,47,0.01,53,1.91,145,4.727,152,5.475,278,1,354,2.095,425,3.741,575,2.61,745,4.795,747,4.149,903,3.19,1718,5.94,1721,4.973,1722,7.506,1723,5.689,1724,5.689]],["title/coverage.html",[1725,4.46]],["body/coverage.html",[0,0.377,1,1.754,5,0.056,6,1.938,7,2.811,12,0.789,20,0.012,22,0.155,31,1.416,42,0.715,46,0.005,47,0.005,48,2.559,49,1.617,51,1.938,55,1.416,103,1.253,105,1.938,109,1.617,110,1.938,121,1.507,127,1.416,129,1.264,133,1.507,138,1.507,145,1.507,147,1.536,149,1.63,155,1.507,163,1.338,170,1.617,172,2.415,180,1.617,183,1.754,204,1.27,208,1.507,220,1.454,222,1.507,230,1.507,231,1.507,232,1.416,242,1.617,251,1.209,252,1.617,277,1.938,295,1.338,296,1.416,298,1.27,299,1.338,300,1.27,301,1.338,315,1.617,350,1.754,361,1.617,363,1.416,440,1.416,446,0.978,551,3.242,552,1.938,565,1.416,575,2.552,577,1.507,578,1.507,583,1.338,584,1.938,585,3.456,598,1.27,599,1.754,600,2.811,618,1.416,626,1.617,629,2.811,646,1.338,647,1.938,648,2.811,653,1.338,654,1.938,655,2.811,659,1.617,660,1.938,663,1.338,664,1.938,665,2.811,671,1.754,672,1.938,674,1.416,675,1.754,676,1.938,743,1.938,744,1.938,745,1.416,748,2.658,749,1.617,751,2.811,755,4.548,769,1.617,770,1.938,777,1.754,778,1.938,779,2.811,789,1.754,790,1.754,821,1.938,850,1.938,852,1.938,871,1.938,874,1.754,875,1.938,885,1.938,908,1.617,946,1.617,947,2.811,948,2.811,950,1.507,951,1.507,968,2.811,992,1.617,994,1.617,995,1.938,1013,1.416,1017,1.507,1046,1.416,1052,1.938,1053,1.154,1091,1.938,1092,1.27,1122,2.811,1146,1.617,1147,1.938,1157,1.416,1168,1.416,1172,1.507,1174,1.938,1202,1.938,1215,1.617,1216,2.811,1230,1.754,1234,1.416,1282,1.754,1283,1.938,1286,1.938,1292,1.209,1293,2.811,1296,1.507,1307,1.617,1309,1.617,1310,1.938,1321,1.416,1323,1.416,1335,1.416,1340,1.617,1344,1.938,1351,2.811,1352,2.811,1365,1.938,1378,2.811,1398,1.617,1400,1.617,1401,1.938,1408,1.416,1417,1.416,1423,1.938,1428,1.938,1442,1.938,1467,1.938,1473,1.416,1477,1.938,1517,1.617,1518,1.938,1519,1.938,1522,1.938,1577,2.811,1581,1.938,1582,1.938,1588,1.938,1595,1.938,1596,1.938,1597,2.811,1603,1.938,1606,1.938,1608,1.938,1617,2.811,1668,1.617,1669,1.938,1690,1.416,1695,1.938,1704,1.938,1718,2.811,1719,1.938,1721,1.938,1725,1.754,1726,2.217,1727,2.217,1728,1.938,1729,7.511,1730,8.645,1731,8.032,1732,7.004,1733,2.217,1734,3.552,1735,1.938,1736,3.105,1737,3.105,1738,2.811,1739,2.811,1740,3.105,1741,4.444,1742,3.552,1743,6.683,1744,5.562,1745,5.935,1746,2.217,1747,5.083,1748,6.683,1749,1.938,1750,1.938,1751,4.444,1752,5.083,1753,1.938,1754,1.938,1755,1.938,1756,1.938,1757,1.938,1758,1.938,1759,1.938,1760,1.938,1761,4.444,1762,2.217,1763,2.217,1764,2.217]],["title/dependencies.html",[63,2.368,1765,2.998]],["body/dependencies.html",[0,0.295,20,0.012,29,0.823,30,3.185,46,0.009,47,0.009,63,2.382,81,1.716,90,2.719,169,2.287,237,3.636,245,3.185,354,1.836,355,3.945,387,4.358,388,1.66,716,4.358,717,4.358,718,4.358,719,5.064,830,5.593,831,3.945,858,4.358,860,3.863,1228,4.358,1373,3.945,1615,4.358,1766,4.985,1767,4.985,1768,4.985,1769,4.985,1770,4.985,1771,4.985,1772,7.457,1773,4.985,1774,4.985,1775,4.985,1776,4.985,1777,4.985,1778,4.985,1779,4.985,1780,4.985,1781,4.985,1782,4.985,1783,4.985,1784,4.985,1785,4.985,1786,4.985,1787,4.985,1788,4.985,1789,4.985,1790,4.985,1791,4.985,1792,4.985,1793,4.985,1794,4.985,1795,4.985,1796,4.985,1797,4.985,1798,4.985,1799,4.985,1800,4.985,1801,4.985,1802,4.985,1803,6.399,1804,4.985,1805,4.985,1806,4.985,1807,4.985]],["title/miscellaneous/enumerations.html",[1808,2.191,1809,4.333]],["body/miscellaneous/enumerations.html",[10,0.398,20,0.012,46,0.011,47,0.011,338,2.648,675,5.042,912,6.502,1808,4.071,1809,5.57,1810,6.372,1811,7.438,1812,7.438,1813,7.438]],["title/miscellaneous/functions.html",[1808,2.191,1814,4.333]],["body/miscellaneous/functions.html",[10,0.317,19,1.878,20,0.011,21,1.08,22,0.525,23,1.239,39,0.579,46,0.009,47,0.009,183,5.639,320,3.312,565,4.134,575,3.444,577,4.4,578,4.4,626,4.72,745,4.134,749,4.72,751,5.121,754,7.407,756,2.767,1234,4.134,1738,4.014,1739,5.121,1749,4.435,1750,6.229,1755,5.657,1756,5.657,1757,5.657,1758,4.435,1759,5.657,1760,6.229,1808,3.241,1814,4.435,1815,5.073,1816,7.505,1817,4.435,1818,5.073,1819,5.073,1820,5.073,1821,5.073,1822,5.073,1823,5.073]],["title/index.html",[10,0.214,1824,3.43,1825,3.43]],["body/index.html",[4,0.13,20,0.012,46,0.009,47,0.009,460,3.109,478,4.503,939,4.076,943,4.503,1303,6.274,1725,4.076,1826,5.151,1827,5.151,1828,6.534,1829,5.151,1830,5.151,1831,5.151,1832,5.151,1833,5.151,1834,5.151,1835,4.503,1836,5.151,1837,5.151,1838,5.151,1839,8.085,1840,5.151,1841,5.151,1842,7.959,1843,5.151,1844,5.151,1845,6.534,1846,5.151,1847,5.151,1848,5.151,1849,5.151,1850,6.534,1851,6.534,1852,5.151,1853,5.151,1854,5.151,1855,6.534,1856,6.534,1857,5.151,1858,5.151,1859,5.151,1860,5.151,1861,5.151,1862,5.151,1863,5.151,1864,5.151,1865,5.151,1866,5.151,1867,5.151,1868,4.503,1869,5.151,1870,5.151,1871,4.503,1872,5.151,1873,5.151,1874,5.151,1875,5.151,1876,5.151,1877,5.151,1878,4.503]],["title/modules.html",[62,2.693]],["body/modules.html",[20,0.01,46,0.01,47,0.01,61,4.258,62,2.789,67,3.969,68,3.729,69,3.729,70,3.969,71,3.729,72,3.729,228,3.969,229,3.969,939,6.675,1879,8.436,1880,8.436,1881,8.436]],["title/overview.html",[1882,4.927]],["body/overview.html",[2,0.733,20,0.012,46,0.007,47,0.007,50,1.318,55,3.585,61,5.865,62,1.538,63,2.261,64,2.813,65,2.813,66,2.813,67,5.7,68,4.846,69,4.846,70,5.073,71,4.846,72,4.846,73,2.464,74,1.604,75,1.676,104,1.037,163,4.301,224,2.813,225,2.813,226,2.813,227,2.813,228,4.971,229,5.073,230,4.845,231,4.845,232,4.552,295,4.301,296,4.552,298,4.081,299,4.301,300,4.081,301,4.301,674,3.585,750,2.056,879,2.813,880,2.813,881,2.813,1043,2.813,1044,2.813,1045,2.813,1046,4.552,1165,2.813,1166,2.813,1167,2.813,1168,4.552,1323,4.552,1332,2.813,1333,2.813,1334,2.813,1335,4.552,1414,2.813,1415,2.813,1416,2.813,1417,4.552,1470,2.813,1471,2.813,1472,2.813,1473,4.552,1574,2.813,1687,2.813,1688,2.813,1689,2.813,1690,4.552,1882,2.813,1883,3.218,1884,3.218,1885,3.218,1886,3.218]],["title/properties.html",[278,0.713,1765,2.998]],["body/properties.html",[20,0.012,46,0.011,47,0.011,278,0.935,1835,5.678,1871,5.678,1878,5.678,1887,6.495,1888,6.495,1889,6.495]],["title/miscellaneous/variables.html",[1808,2.191,1890,4.333]],["body/miscellaneous/variables.html",[10,0.159,11,0.617,12,1.41,13,1.73,15,1.856,20,0.012,21,0.57,22,0.416,35,2.017,39,0.639,42,0.82,44,0.874,46,0.006,47,0.006,96,2.168,129,0.906,131,2.013,147,1.659,149,2.231,160,1.536,170,2.889,172,3.306,192,2.224,242,2.889,251,2.993,252,2.889,269,3.462,305,0.97,337,3.049,338,2.749,361,2.889,419,2.224,424,1.73,428,1.856,456,1.005,476,2.889,618,2.53,649,1.268,673,2.693,755,1.856,757,2.224,785,2.013,789,3.134,790,3.134,794,2.224,800,2.013,831,2.013,838,1.625,860,1.536,908,2.889,937,2.693,968,2.013,975,3.607,992,2.889,993,2.224,1021,3.589,1081,2.066,1122,2.013,1145,2.224,1172,2.693,1215,1.856,1216,2.013,1217,2.224,1218,2.224,1219,3.462,1220,2.224,1221,4.251,1222,4.251,1224,2.224,1225,2.224,1226,2.224,1227,2.224,1230,3.134,1231,2.224,1232,2.224,1233,2.224,1234,3.106,1235,2.224,1236,2.224,1237,2.224,1238,2.224,1239,2.224,1240,2.224,1241,2.224,1242,2.224,1243,4.251,1244,3.462,1245,3.462,1246,2.224,1247,2.224,1248,2.224,1249,2.224,1250,2.224,1251,2.224,1252,2.224,1253,2.224,1254,4.251,1255,4.797,1256,2.224,1257,4.251,1258,2.224,1259,2.224,1260,2.224,1261,2.224,1262,2.224,1263,4.251,1264,2.224,1265,2.224,1266,2.224,1267,2.224,1268,2.224,1269,2.224,1270,2.224,1271,2.224,1272,2.224,1273,2.224,1274,3.134,1275,2.224,1276,2.224,1277,2.224,1278,2.224,1279,2.224,1280,2.224,1281,2.224,1292,1.387,1293,2.013,1307,2.889,1308,2.224,1340,2.889,1351,2.013,1352,3.134,1364,2.224,1378,2.013,1390,3.462,1396,2.224,1398,2.889,1399,2.224,1577,2.013,1580,2.224,1617,2.013,1645,2.224,1675,2.224,1728,2.224,1735,2.224,1736,2.224,1737,4.251,1738,2.013,1739,3.134,1740,2.224,1753,2.224,1754,3.462,1808,1.625,1817,2.224,1868,2.224,1890,2.224,1891,3.96,1892,2.544,1893,2.544,1894,3.96,1895,2.544,1896,2.544,1897,2.544,1898,2.544,1899,2.544,1900,2.544,1901,2.544,1902,2.544,1903,2.544,1904,2.544,1905,2.544,1906,2.544,1907,2.544,1908,2.544,1909,2.544,1910,2.544,1911,3.96,1912,2.544,1913,2.544,1914,2.544,1915,2.544,1916,2.544,1917,2.544,1918,2.544,1919,2.544,1920,2.544,1921,2.544,1922,6.297,1923,2.544,1924,2.544,1925,2.544,1926,5.487,1927,2.544,1928,2.544,1929,2.544,1930,2.544,1931,2.544,1932,2.544,1933,2.544,1934,2.544,1935,2.544,1936,2.544,1937,2.544,1938,2.544,1939,2.544]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1730,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1888,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1797,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1784,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":1781,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1783,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1792,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1731,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1741,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1762,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1747,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1746,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1752,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1742,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1734,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1732,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1743,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1745,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1761,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1744,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1751,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1748,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1733,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":810,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["1.0.0",{"_index":1794,"title":{},"body":{"dependencies.html":{}}}],["1.2.22",{"_index":1805,"title":{},"body":{"dependencies.html":{}}}],["1.3.1",{"_index":1775,"title":{},"body":{"dependencies.html":{}}}],["1.6.5",{"_index":1802,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":1769,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1274,"title":{},"body":{"interfaces/PaginateQuery.html":{},"injectables/TermiiService.html":{},"miscellaneous/variables.html":{}}}],["11000",{"_index":1658,"title":{},"body":{"classes/User.html":{}}}],["2",{"_index":1261,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["2.2.0",{"_index":1771,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":1885,"title":{},"body":{"overview.html":{}}}],["24h",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["3.0.2",{"_index":1799,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":1788,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1886,"title":{},"body":{"overview.html":{}}}],["4",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":1793,"title":{},"body":{"dependencies.html":{}}}],["4.0.18",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1787,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1807,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1786,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1574,"title":{},"body":{"injectables/TermiiService.html":{},"overview.html":{}}}],["5.0.0",{"_index":1780,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1782,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1575,"title":{},"body":{"injectables/TermiiService.html":{}}}],["6.1.2",{"_index":1778,"title":{},"body":{"dependencies.html":{}}}],["6.6.1",{"_index":1789,"title":{},"body":{"dependencies.html":{}}}],["6.7.8",{"_index":1791,"title":{},"body":{"dependencies.html":{}}}],["60d",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.2.0",{"_index":1801,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1884,"title":{},"body":{"overview.html":{}}}],["9",{"_index":1883,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1772,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1770,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":1776,"title":{},"body":{"dependencies.html":{}}}],["900000",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["_data",{"_index":1231,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["_id",{"_index":1194,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["_member",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["_member.password",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["_param",{"_index":1270,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":1546,"title":{},"body":{"injectables/TermiiService.html":{}}}],["acceptorganizationinvite",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["access",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["account.dto",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["account.dto.ts",{"_index":552,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{}}}],["account.dto.ts:14",{"_index":561,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:16",{"_index":562,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:20",{"_index":559,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:24",{"_index":570,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:27",{"_index":564,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:29",{"_index":566,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:33",{"_index":568,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:38",{"_index":557,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:41",{"_index":563,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["acguard",{"_index":845,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["add",{"_index":1388,"title":{},"body":{"classes/Role.html":{}}}],["address",{"_index":601,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{},"classes/User.html":{}}}],["addtoset",{"_index":1195,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["admin",{"_index":1386,"title":{},"body":{"classes/Role.html":{},"injectables/RoleService.html":{}}}],["adminurl",{"_index":916,"title":{},"body":{"injectables/MailService.html":{}}}],["again",{"_index":1667,"title":{},"body":{"classes/User.html":{}}}],["aggregate",{"_index":1055,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["aggregate(options",{"_index":1061,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["aggregatepaginate",{"_index":1056,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["aggregatepaginate(options",{"_index":1063,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["allerrorfilter",{"_index":1,"title":{"classes/AllErrorFilter.html":{}},"body":{"classes/AllErrorFilter.html":{},"coverage.html":{}}}],["allow",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowed",{"_index":819,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["allowuserwithoutorganization",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["allowuserwithoutorganization()@get('me",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["allowuserwithoutorganization()@post('find",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["already",{"_index":620,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/User.html":{}}}],["amazing",{"_index":1862,"title":{},"body":{"index.html":{}}}],["another",{"_index":622,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{}}}],["any).roles",{"_index":846,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).user",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["any[]).every((p",{"_index":1268,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":728,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{}}}],["api.decorator",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["api.decorator.ts",{"_index":1739,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":953,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["apibearerauth",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apikey",{"_index":704,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{}}}],["apioperation",{"_index":1024,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":1148,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["apiproperty",{"_index":625,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["apitags",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('member",{"_index":1025,"title":{},"body":{"controllers/MemberController.html":{}}}],["apitags('organization",{"_index":1161,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["apitags('resource",{"_index":1326,"title":{},"body":{"controllers/ResourceController.html":{}}}],["apitags('role",{"_index":1412,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('user",{"_index":1677,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":943,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["app.controller",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_name",{"_index":908,"title":{},"body":{"injectables/MailService.html":{},"injectables/SmsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":49,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appended",{"_index":934,"title":{},"body":{"injectables/MailService.html":{}}}],["application/json",{"_index":1545,"title":{},"body":{"injectables/TermiiService.html":{}}}],["applications",{"_index":1834,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":61,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":55,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":16,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["array.isarray(param",{"_index":1267,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(query.searchby",{"_index":1264,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(query.sortby",{"_index":1256,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":779,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:19",{"_index":783,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":786,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":109,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":815,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authenticity",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":788,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":791,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":851,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":67,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1871,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":163,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.validatemember",{"_index":870,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["automatically",{"_index":935,"title":{},"body":{"injectables/MailService.html":{}}}],["await",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/TermiiService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":719,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{},"dependencies.html":{}}}],["axios.create",{"_index":1541,"title":{},"body":{"injectables/TermiiService.html":{}}}],["axiosresponse",{"_index":720,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["backers",{"_index":1863,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":28,"title":{},"body":{"classes/AllErrorFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/QueryErrorFilter.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["badrequestexception('bad",{"_index":1665,"title":{},"body":{"classes/User.html":{}}}],["badrequestexception('membership",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('the",{"_index":1664,"title":{},"body":{"classes/User.html":{}}}],["badrequestexception(detail",{"_index":43,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["balance",{"_index":1520,"title":{},"body":{"interfaces/TermiiSendSmsResponse.html":{}}}],["base",{"_index":1242,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":1383,"title":{},"body":{"classes/Role.html":{}}}],["baseexceptionfilter",{"_index":9,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["baseurl",{"_index":1542,"title":{},"body":{"injectables/TermiiService.html":{}}}],["bcrypt",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MemberService.html":{},"dependencies.html":{}}}],["bcrypt.compare(dto.password",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(dto.password",{"_index":1111,"title":{},"body":{"injectables/MemberService.html":{}}}],["bearer",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["bearertoken",{"_index":806,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bearertoken.length",{"_index":809,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bio",{"_index":586,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Member.html":{},"classes/Organization.html":{}}}],["body",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":1357,"title":{},"body":{"classes/ResourceRole.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":1750,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1881,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1879,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1829,"title":{},"body":{"index.html":{}}}],["bulkdto",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["c",{"_index":986,"title":{},"body":{"classes/Member.html":{}}}],["c.member",{"_index":987,"title":{},"body":{"classes/Member.html":{}}}],["called",{"_index":729,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["canactivate",{"_index":780,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":784,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cancelatperiodend",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["caption",{"_index":949,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{}}}],["catch",{"_index":13,"title":{},"body":{"classes/AllErrorFilter.html":{},"injectables/ElasticMailService.html":{},"classes/QueryErrorFilter.html":{},"injectables/TermiiService.html":{},"miscellaneous/variables.html":{}}}],["catch((err",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch(duplicatefielderror",{"_index":1284,"title":{},"body":{"classes/QueryErrorFilter.html":{}}}],["catch(exception",{"_index":14,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["channel",{"_index":952,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["channels",{"_index":1566,"title":{},"body":{"injectables/TermiiService.html":{}}}],["check",{"_index":814,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["checkifapikeyisset",{"_index":1524,"title":{},"body":{"injectables/TermiiService.html":{}}}],["choose",{"_index":621,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{}}}],["class",{"_index":0,"title":{"classes/AllErrorFilter.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"classes/FindUserOrganization.html":{},"classes/InviteMemberDto.html":{},"classes/LoginDto.html":{},"classes/Member.html":{},"classes/Organization.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/SharedService.html":{},"classes/TermiiRequestParams.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"classes/FindUserOrganization.html":{},"classes/InviteMemberDto.html":{},"classes/LoginDto.html":{},"classes/Member.html":{},"classes/Organization.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/SharedService.html":{},"classes/TermiiRequestParams.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"overview.html":{}}}],["client",{"_index":717,"title":{},"body":{"injectables/ElasticMailService.html":{},"dependencies.html":{}}}],["clienturl",{"_index":886,"title":{},"body":{"injectables/MailService.html":{}}}],["cluster_appmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":879,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":881,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":880,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_membermodule",{"_index":1043,"title":{},"body":{"modules/MemberModule.html":{},"overview.html":{}}}],["cluster_membermodule_exports",{"_index":1044,"title":{},"body":{"modules/MemberModule.html":{},"overview.html":{}}}],["cluster_membermodule_providers",{"_index":1045,"title":{},"body":{"modules/MemberModule.html":{},"overview.html":{}}}],["cluster_organizationmodule",{"_index":1165,"title":{},"body":{"modules/OrganizationModule.html":{},"overview.html":{}}}],["cluster_organizationmodule_exports",{"_index":1166,"title":{},"body":{"modules/OrganizationModule.html":{},"overview.html":{}}}],["cluster_organizationmodule_providers",{"_index":1167,"title":{},"body":{"modules/OrganizationModule.html":{},"overview.html":{}}}],["cluster_resourcemodule",{"_index":1332,"title":{},"body":{"modules/ResourceModule.html":{},"overview.html":{}}}],["cluster_resourcemodule_exports",{"_index":1334,"title":{},"body":{"modules/ResourceModule.html":{},"overview.html":{}}}],["cluster_resourcemodule_providers",{"_index":1333,"title":{},"body":{"modules/ResourceModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":1414,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_exports",{"_index":1415,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":1416,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_smsmodule",{"_index":1470,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_exports",{"_index":1471,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_providers",{"_index":1472,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1687,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1688,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1689,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{},"classes/User.html":{}}}],["code.tostring",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":1229,"title":{},"body":{"interfaces/PaginateQuery.html":{}}}],["common",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RegisterMember.html":{}}}],["commonfield",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"classes/Organization.html":{}}}],["commonfield.organization",{"_index":1141,"title":{},"body":{"classes/Organization.html":{}}}],["commonfields",{"_index":596,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/InviteMemberDto.html":{},"classes/Member.html":{},"classes/Organization.html":{},"classes/RegisterMember.html":{}}}],["config",{"_index":677,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["config/configuration",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SmsModule.html":{}}}],["configmodule.forroot",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/MailService.html":{},"injectables/MemberService.html":{},"injectables/TermiiService.html":{}}}],["configservice.get('mongodb_uri",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"injectables/ElasticMailService.html":{}}}],["confirm",{"_index":944,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmpassword",{"_index":553,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{}}}],["confirmuseremail",{"_index":887,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmuseremail(user",{"_index":895,"title":{},"body":{"injectables/MailService.html":{}}}],["console.log('dummy",{"_index":1285,"title":{},"body":{"classes/QueryErrorFilter.html":{}}}],["console.log(error.response.data",{"_index":1570,"title":{},"body":{"injectables/TermiiService.html":{}}}],["const",{"_index":35,"title":{},"body":{"classes/AllErrorFilter.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/Resource.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["constructor(@injectmodel(member.name",{"_index":1089,"title":{},"body":{"injectables/MemberRepository.html":{}}}],["constructor(@injectmodel(resource.name",{"_index":1348,"title":{},"body":{"injectables/ResourceRepository.html":{}}}],["constructor(@injectmodel(role.name",{"_index":1427,"title":{},"body":{"injectables/RoleRepository.html":{}}}],["constructor(@injectmodel(token.name",{"_index":1594,"title":{},"body":{"injectables/TokenRepository.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1701,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(configservice",{"_index":686,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{}}}],["constructor(mailerservice",{"_index":892,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(model",{"_index":1059,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["constructor(moduleref",{"_index":853,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(payload",{"_index":963,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{}}}],["constructor(private",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/ElasticMailService.html":{},"injectables/LocalStrategy.html":{},"controllers/MailController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"controllers/UserController.html":{}}}],["constructor(public",{"_index":834,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(readonly",{"_index":1212,"title":{},"body":{"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":781,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(repo",{"_index":1095,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"classes/SharedService.html":{},"injectables/UserService.html":{}}}],["constructor(request",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(termii",{"_index":1482,"title":{},"body":{"injectables/SmsService.html":{}}}],["constructor(userservice",{"_index":823,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["contactemail",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{}}}],["contactphone",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Member.html":{},"classes/Organization.html":{}}}],["content",{"_index":734,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/MailService.html":{},"injectables/TermiiService.html":{}}}],["context",{"_index":787,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.getclass",{"_index":797,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":796,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":798,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contextid",{"_index":864,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["contextidfactory",{"_index":859,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["contextidfactory.getbyrequest(request",{"_index":865,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["control",{"_index":1384,"title":{},"body":{"classes/Role.html":{}}}],["controller",{"_index":48,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MailController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MailController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('mail",{"_index":878,"title":{},"body":{"controllers/MailController.html":{}}}],["controller('member",{"_index":1026,"title":{},"body":{"controllers/MemberController.html":{}}}],["controller('organization",{"_index":1162,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["controller('resource",{"_index":1327,"title":{},"body":{"controllers/ResourceController.html":{}}}],["controller('role",{"_index":1413,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('user",{"_index":1678,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MailController.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["country",{"_index":602,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{},"classes/User.html":{}}}],["coverage",{"_index":1725,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{}}}],["create(@body",{"_index":1029,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["create(createuserdto",{"_index":1670,"title":{},"body":{"controllers/UserController.html":{}}}],["create(dto",{"_index":999,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["createaccountdto",{"_index":121,"title":{"classes/CreateAccountDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"coverage.html":{}}}],["created",{"_index":1200,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/UserRepository.html":{}}}],["createdto",{"_index":1065,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["createduser",{"_index":1460,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["createduser.save(options",{"_index":1462,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["createmembercommonfielddto",{"_index":597,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{}}}],["creatememberdto",{"_index":583,"title":{"classes/CreateMemberDto.html":{}},"body":{"classes/CreateMemberDto.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/UpdateMemberDto.html":{},"coverage.html":{}}}],["createnewaccount",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createnewaccount(@body",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["createnewaccount(dto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createone",{"_index":1093,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{}}}],["createone(dto",{"_index":1098,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{}}}],["createorganization",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createorganization(userid",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["createorganizationdto",{"_index":598,"title":{"classes/CreateOrganizationDto.html":{}},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["createorganizationdto:19",{"_index":643,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:23",{"_index":636,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:27",{"_index":637,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:31",{"_index":635,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:35",{"_index":640,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:39",{"_index":634,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:43",{"_index":644,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:47",{"_index":638,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:51",{"_index":639,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:55",{"_index":642,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationdto:9",{"_index":641,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["createorganizationpassworddto",{"_index":208,"title":{"classes/CreateOrganizationPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateOrganizationPasswordDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1224,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["createresourcedto",{"_index":646,"title":{"classes/CreateResourceDto.html":{}},"body":{"classes/CreateResourceDto.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/UpdateResourceDto.html":{},"coverage.html":{}}}],["createroledto",{"_index":653,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createtoken",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(identifier",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtokendto",{"_index":659,"title":{"classes/CreateTokenDto.html":{}},"body":{"classes/CreateTokenDto.html":{},"injectables/TokenRepository.html":{},"coverage.html":{}}}],["createuserdto",{"_index":663,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["ctx",{"_index":1232,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1233,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["currency",{"_index":603,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{}}}],["currentdt",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentdt.plus",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentdt.tojsdate",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentorganization",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["currentorganization(@request",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["currentorganization(req",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["currentperiodend",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentperiodstart",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":695,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{}}}],["data.content",{"_index":737,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["data.dto",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/TokenRequest.html":{}}}],["data.dto.ts",{"_index":1582,"title":{},"body":{"classes/TokenData.html":{},"coverage.html":{}}}],["data.dto.ts:2",{"_index":1587,"title":{},"body":{"classes/TokenData.html":{}}}],["data.dto.ts:3",{"_index":1586,"title":{},"body":{"classes/TokenData.html":{}}}],["data.dto.ts:4",{"_index":1584,"title":{},"body":{"classes/TokenData.html":{}}}],["data.dto.ts:5",{"_index":1583,"title":{},"body":{"classes/TokenData.html":{}}}],["data.dto.ts:6",{"_index":1585,"title":{},"body":{"classes/TokenData.html":{}}}],["datetime",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["datetime.now",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":1396,"title":{},"body":{"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["db.getperms",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserOrganization.html":{},"classes/InviteMemberDto.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"classes/Token.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["decorators/allow",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decorators/organization",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["decorators/public.decorator",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decrypt",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaultpaymentmethod",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["defaultstrategy",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["delete",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["delete(':id",{"_index":1040,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1010,"title":{},"body":{"controllers/MemberController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":1068,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["deleted",{"_index":1686,"title":{},"body":{"controllers/UserController.html":{}}}],["denied",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":63,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["description",{"_index":1835,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detail",{"_index":36,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["detail.includes('already",{"_index":40,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["details",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["determine",{"_index":1235,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1841,"title":{},"body":{"index.html":{}}}],["di",{"_index":884,"title":{},"body":{"modules/MailModule.html":{}}}],["dictionary",{"_index":1226,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["dnd",{"_index":1499,"title":{},"body":{"injectables/SmsService.html":{},"injectables/TermiiService.html":{}}}],["doc",{"_index":1654,"title":{},"body":{"classes/User.html":{}}}],["document",{"_index":969,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/Token.html":{},"classes/User.html":{}}}],["documentation",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":1240,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["dto",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto.commonfields.map",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.email",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto.firstname",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.lastname",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.membershipplanid",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.officetitle",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.organizationname",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.organizationsitename",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.otp.tostring",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.owner",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.ownerid",{"_index":1163,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["dto.password",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MemberService.html":{}}}],["dto.phone",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto.sitename",{"_index":1198,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["dto.slug",{"_index":1349,"title":{},"body":{"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{}}}],["dto.username",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.verified",{"_index":1715,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/create",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto/find",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/invite",{"_index":1109,"title":{},"body":{"injectables/MemberService.html":{}}}],["dto/login.dto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/termii",{"_index":1554,"title":{},"body":{"injectables/TermiiService.html":{}}}],["dto/token",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/TokenRequest.html":{}}}],["dto/update",{"_index":1023,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto/verify",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto?.username",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["duplicatefielderror",{"_index":31,"title":{"classes/DuplicateFieldError.html":{}},"body":{"classes/AllErrorFilter.html":{},"classes/DuplicateFieldError.html":{},"classes/QueryErrorFilter.html":{},"classes/User.html":{},"coverage.html":{}}}],["duration",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["duration.fromobject",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":1852,"title":{},"body":{"index.html":{}}}],["eager",{"_index":988,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{}}}],["efficient",{"_index":1830,"title":{},"body":{"index.html":{}}}],["elastic",{"_index":883,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["elasticemail/elasticemail",{"_index":716,"title":{},"body":{"injectables/ElasticMailService.html":{},"dependencies.html":{}}}],["elasticmailservice",{"_index":674,"title":{"injectables/ElasticMailService.html":{}},"body":{"injectables/ElasticMailService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["elasticmailservice.name",{"_index":731,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["elasticmailtemplatenames",{"_index":912,"title":{},"body":{"injectables/MailService.html":{},"miscellaneous/enumerations.html":{}}}],["elasticmailtemplatenames.verifyyouremail",{"_index":929,"title":{},"body":{"injectables/MailService.html":{}}}],["elasticmailtemplatenames.welcometogembrs",{"_index":924,"title":{},"body":{"injectables/MailService.html":{}}}],["email",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/InviteMemberDto.html":{},"injectables/MailService.html":{},"injectables/MemberService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["email.dto",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["email.dto.ts",{"_index":1719,"title":{},"body":{"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:5",{"_index":1720,"title":{},"body":{"classes/VerifyEmailDto.html":{}}}],["email.template.hbs",{"_index":945,"title":{},"body":{"injectables/MailService.html":{}}}],["emaildata",{"_index":733,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["emailmessagedata",{"_index":700,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["emailsapi",{"_index":678,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["emailsapi(this.config",{"_index":707,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["emailsend",{"_index":714,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["emailtransactionalmessagedata",{"_index":693,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["emitter",{"_index":1774,"title":{},"body":{"dependencies.html":{}}}],["enddt",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["enddt.tojsdate",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["ensure",{"_index":848,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/User.html":{}}}],["enter",{"_index":1635,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{}}}],["entered",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["enumerations",{"_index":1809,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":578,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":673,"title":{},"body":{"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["error('a",{"_index":1644,"title":{},"body":{"classes/User.html":{}}}],["error('invalid",{"_index":1494,"title":{},"body":{"injectables/SmsService.html":{}}}],["error('method",{"_index":1465,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["error('please",{"_index":1634,"title":{},"body":{"classes/User.html":{}}}],["error.code",{"_index":1657,"title":{},"body":{"classes/User.html":{}}}],["error.filter.ts",{"_index":7,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:7",{"_index":18,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["error.name",{"_index":1655,"title":{},"body":{"classes/User.html":{}}}],["errors/duplicate",{"_index":32,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["eslint",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["exception",{"_index":24,"title":{},"body":{"classes/AllErrorFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/QueryErrorFilter.html":{}}}],["exception.message",{"_index":37,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["exclude",{"_index":1614,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["exec",{"_index":1350,"title":{},"body":{"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{}}}],["executioncontext",{"_index":785,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":41,"title":{},"body":{"classes/AllErrorFilter.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/QueryErrorFilter.html":{},"classes/User.html":{}}}],["expiresin",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["exports",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":860,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/OrganizationController.html":{},"interfaces/PaginateQuery.html":{},"interfaces/TokenRequest.html":{},"controllers/UserController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Member.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"classes/Resource.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"classes/Token.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["extension",{"_index":933,"title":{},"body":{"injectables/MailService.html":{}}}],["extractjwt",{"_index":828,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":836,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":838,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["fastify",{"_index":1236,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["field",{"_index":1659,"title":{},"body":{"classes/User.html":{}}}],["field.dto",{"_index":1291,"title":{},"body":{"classes/RegisterMember.html":{}}}],["field.error",{"_index":33,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{},"classes/User.html":{}}}],["field.error.ts",{"_index":672,"title":{},"body":{"classes/DuplicateFieldError.html":{},"coverage.html":{}}}],["field.module",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["field.schema",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["field.service",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["field/dto/create",{"_index":1290,"title":{},"body":{"classes/RegisterMember.html":{}}}],["field/member",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["field/schemas/member",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["fields",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["fill",{"_index":1641,"title":{},"body":{"classes/User.html":{}}}],["filter",{"_index":1081,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["filterquery",{"_index":1076,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["finally",{"_index":1391,"title":{},"body":{"classes/Role.html":{}}}],["find",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{}}}],["find(options",{"_index":1071,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["findall",{"_index":996,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@query('filter",{"_index":1679,"title":{},"body":{"controllers/UserController.html":{}}}],["findall(filter",{"_index":1100,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":1057,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":1073,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findbysitename",{"_index":1175,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{}}}],["findbysitename(organizationslug",{"_index":802,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["findbysitename(sitename",{"_index":1181,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["findbysitename(username",{"_index":1207,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["findbyslug",{"_index":1311,"title":{},"body":{"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{}}}],["findbyslug(@param('slug",{"_index":1330,"title":{},"body":{"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["findbyslug(slug",{"_index":1315,"title":{},"body":{"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{}}}],["findbyusername",{"_index":1696,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":1698,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":768,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{}}}],["findone(@param('id",{"_index":1033,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["findone(filter",{"_index":1075,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["findone(id",{"_index":1005,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["findorcreate",{"_index":1176,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findorcreate(dto",{"_index":1183,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["findtokenbyuser",{"_index":1589,"title":{},"body":{"injectables/TokenRepository.html":{}}}],["findtokenbyuser(userid",{"_index":1591,"title":{},"body":{"injectables/TokenRepository.html":{}}}],["finduserorganization",{"_index":133,"title":{"classes/FindUserOrganization.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/FindUserOrganization.html":{},"coverage.html":{}}}],["finduserorganizations",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["finduserorganizations(dto",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserorganizations(req",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["first",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"classes/Role.html":{}}}],["firstname",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{},"classes/User.html":{}}}],["fond",{"_index":1402,"title":{},"body":{"controllers/RoleController.html":{}}}],["found",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1828,"title":{},"body":{"index.html":{}}}],["frommail",{"_index":679,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["full",{"_index":1648,"title":{},"body":{"classes/User.html":{}}}],["fullname",{"_index":1650,"title":{},"body":{"classes/User.html":{}}}],["function",{"_index":755,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1814,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1640,"title":{},"body":{"classes/User.html":{}}}],["gembrs",{"_index":800,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SmsService.html":{},"miscellaneous/variables.html":{}}}],["generic",{"_index":1530,"title":{},"body":{"injectables/TermiiService.html":{}}}],["get('/by",{"_index":1316,"title":{},"body":{"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["get(':id",{"_index":1032,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1006,"title":{},"body":{"controllers/MemberController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get('current",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({summary",{"_index":1002,"title":{},"body":{"controllers/MemberController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["getauth",{"_index":1754,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getauthdata",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["getauthdata(member",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["getdefaultadminrole",{"_index":1429,"title":{},"body":{"injectables/RoleService.html":{}}}],["getdefaultmemberrole",{"_index":1430,"title":{},"body":{"injectables/RoleService.html":{}}}],["gethello",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getorganizationid",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["getorganizationslug",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":1824,"title":{"index.html":{}},"body":{}}],["global",{"_index":1387,"title":{},"body":{"classes/Role.html":{}}}],["grow",{"_index":1859,"title":{},"body":{"index.html":{}}}],["guards/local",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["guest",{"_index":1385,"title":{},"body":{"classes/Role.html":{}}}],["handle",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlebars",{"_index":1785,"title":{},"body":{"dependencies.html":{}}}],["handler",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["happen",{"_index":1716,"title":{},"body":{"injectables/UserService.html":{}}}],["hashed",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["hbs",{"_index":932,"title":{},"body":{"injectables/MailService.html":{}}}],["headers",{"_index":1544,"title":{},"body":{"injectables/TermiiService.html":{}}}],["hello",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1868,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["home",{"_index":923,"title":{},"body":{"injectables/MailService.html":{}}}],["host",{"_index":15,"title":{},"body":{"classes/AllErrorFilter.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"miscellaneous/variables.html":{}}}],["https://${organization.sitename}.${this.clienturl",{"_index":915,"title":{},"body":{"injectables/MailService.html":{}}}],["https://blog.nextwebb.tech/role",{"_index":1394,"title":{},"body":{"classes/Role.html":{}}}],["https://nestjs.com",{"_index":1875,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/62704600/mongoose",{"_index":1301,"title":{},"body":{"classes/Resource.html":{}}}],["https://termii.com/account/api",{"_index":1561,"title":{},"body":{"injectables/TermiiService.html":{}}}],["https://termii.com/api",{"_index":1551,"title":{},"body":{"injectables/TermiiService.html":{}}}],["hydrateddocument",{"_index":1454,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["id",{"_index":1008,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTokenDto.html":{},"classes/Token.html":{},"coverage.html":{}}}],["idoesnotexistparams",{"_index":749,"title":{"interfaces/IDoesNotExistParams.html":{}},"body":{"interfaces/IDoesNotExistParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ignoreexpiration",{"_index":837,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":1466,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":1643,"title":{},"body":{"classes/User.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":1393,"title":{},"body":{"classes/Role.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["inherited",{"_index":633,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{},"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["initforgotmemberpassword",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["inject(request",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":103,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":1088,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["injectmodel(organization.name",{"_index":1189,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["injectmodel(user.name",{"_index":1190,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["input",{"_index":1666,"title":{},"body":{"classes/User.html":{}}}],["installation",{"_index":1838,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1840,"title":{},"body":{"index.html":{}}}],["instead",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["interface",{"_index":748,"title":{"interfaces/IDoesNotExistParams.html":{},"interfaces/Media.html":{},"interfaces/PaginateQuery.html":{},"interfaces/TermiiSendSmsResponse.html":{},"interfaces/TokenRequest.html":{}},"body":{"interfaces/IDoesNotExistParams.html":{},"interfaces/Media.html":{},"interfaces/PaginateQuery.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"interfaces/TokenRequest.html":{},"coverage.html":{}}}],["interfaces",{"_index":750,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"interfaces/Media.html":{},"interfaces/PaginateQuery.html":{},"interfaces/TermiiSendSmsResponse.html":{},"interfaces/TokenRequest.html":{},"overview.html":{}}}],["interfaces/termii",{"_index":1556,"title":{},"body":{"injectables/TermiiService.html":{}}}],["interfaces/token",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["internalservererrorexception",{"_index":1553,"title":{},"body":{"injectables/TermiiService.html":{}}}],["invalid",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["invitation",{"_index":1120,"title":{},"body":{"injectables/MemberService.html":{}}}],["invite",{"_index":1121,"title":{},"body":{"injectables/MemberService.html":{}}}],["invitemember",{"_index":1094,"title":{},"body":{"injectables/MemberService.html":{}}}],["invitemember(dto",{"_index":1103,"title":{},"body":{"injectables/MemberService.html":{}}}],["invitememberdto",{"_index":769,"title":{"classes/InviteMemberDto.html":{}},"body":{"classes/InviteMemberDto.html":{},"injectables/MemberService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":790,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdevserver",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["isemail()@isoptional",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail(dto.username",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail(username",{"_index":1703,"title":{},"body":{"injectables/UserRepository.html":{}}}],["isemail(value",{"_index":1633,"title":{},"body":{"classes/User.html":{}}}],["isequalto",{"_index":577,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isequalto('password",{"_index":582,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/UpdateMemberPasswordDto.html":{}}}],["isequalto(property",{"_index":1819,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isglobal",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["isnumber",{"_index":1722,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["isoptional",{"_index":573,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@exclude",{"_index":1612,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isemail",{"_index":558,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["isoptional()@isphonenumber",{"_index":569,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["isoptional()@isstring",{"_index":607,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{}}}],["isoptional()@isusername",{"_index":1288,"title":{},"body":{"classes/RegisterMember.html":{}}}],["isphonenumber",{"_index":574,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"injectables/SmsService.html":{},"classes/User.html":{}}}],["isphonenumber()@isoptional",{"_index":588,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/CreateUserDto.html":{}}}],["isphonenumber(phone",{"_index":1493,"title":{},"body":{"injectables/SmsService.html":{}}}],["isphonenumber(value",{"_index":1642,"title":{},"body":{"classes/User.html":{}}}],["ispublic",{"_index":794,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isslug",{"_index":565,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isslug()@isunique({name",{"_index":617,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{}}}],["isslug(validationoptions",{"_index":1821,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isstring",{"_index":560,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"interfaces/PaginateQuery.html":{},"classes/RegisterMember.html":{},"classes/UpdateMemberPasswordDto.html":{}}}],["isstring()@isoptional",{"_index":590,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/InviteMemberDto.html":{}}}],["isstring(p",{"_index":1269,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["isstring(param",{"_index":1257,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["isunique",{"_index":626,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"interfaces/IDoesNotExistParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isunique(model",{"_index":1822,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isusername",{"_index":745,"title":{},"body":{"classes/FindUserOrganization.html":{},"classes/RegisterMember.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isusername(validationoptions",{"_index":1823,"title":{},"body":{"miscellaneous/functions.html":{}}}],["items",{"_index":1258,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["items.length",{"_index":1260,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":1865,"title":{},"body":{"index.html":{}}}],["joining",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["js",{"_index":1304,"title":{},"body":{"classes/Resource.html":{}}}],["json.stringify(this",{"_index":967,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{}}}],["jwt",{"_index":831,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":777,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":835,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["jwtstrategy",{"_index":230,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1872,"title":{},"body":{"index.html":{}}}],["key",{"_index":1562,"title":{},"body":{"injectables/TermiiService.html":{}}}],["lastname",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{},"classes/User.html":{}}}],["level",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":1878,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1856,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1217,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["link",{"_index":900,"title":{},"body":{"injectables/MailService.html":{}}}],["literal",{"_index":1223,"title":{},"body":{"interfaces/PaginateQuery.html":{}}}],["load",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["loadtemplate",{"_index":682,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["loadtemplate(templatename",{"_index":688,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["local",{"_index":858,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":180,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":231,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":1228,"title":{},"body":{"interfaces/PaginateQuery.html":{},"dependencies.html":{}}}],["logger",{"_index":680,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["logger(elasticmailservice.name",{"_index":711,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["login",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(dto",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":138,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logintoorganization",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["logintoorganization(dto",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["logourl",{"_index":604,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{}}}],["lowercase",{"_index":1632,"title":{},"body":{"classes/User.html":{}}}],["luxon",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mail",{"_index":876,"title":{},"body":{"controllers/MailController.html":{}}}],["mail.service",{"_index":877,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["mail.service.ts",{"_index":676,"title":{},"body":{"injectables/ElasticMailService.html":{},"coverage.html":{}}}],["mail.service.ts:16",{"_index":712,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:17",{"_index":710,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:18",{"_index":706,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:21",{"_index":708,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:22",{"_index":687,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:26",{"_index":703,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:41",{"_index":694,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:59",{"_index":701,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:74",{"_index":698,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.service.ts:88",{"_index":689,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["mail.templates",{"_index":913,"title":{},"body":{"injectables/MailService.html":{}}}],["mail.templates.ts",{"_index":1811,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mailcontroller",{"_index":874,"title":{"controllers/MailController.html":{}},"body":{"controllers/MailController.html":{},"coverage.html":{}}}],["mailerservice",{"_index":894,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":228,"title":{"modules/MailModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":295,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["make",{"_index":921,"title":{},"body":{"injectables/MailService.html":{}}}],["mapkeys",{"_index":1227,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["mapping",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":1639,"title":{},"body":{"classes/User.html":{}}}],["matching",{"_index":47,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(100000",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.random",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxlength",{"_index":572,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/RegisterMember.html":{}}}],["maxlength(20",{"_index":581,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/RegisterMember.html":{}}}],["me(@request",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(req",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["media",{"_index":946,"title":{"interfaces/Media.html":{}},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"coverage.html":{}}}],["member",{"_index":220,"title":{"classes/Member.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"classes/RegisterMember.html":{},"injectables/RoleService.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["member's",{"_index":1018,"title":{},"body":{"controllers/MemberController.html":{}}}],["member._id",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.controller",{"_index":1048,"title":{},"body":{"modules/MemberModule.html":{}}}],["member.dto",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/UpdateMemberDto.html":{}}}],["member.dto.ts",{"_index":585,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{},"classes/UpdateMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:10",{"_index":773,"title":{},"body":{"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{}}}],["member.dto.ts:11",{"_index":587,"title":{},"body":{"classes/CreateMemberDto.html":{}}}],["member.dto.ts:13",{"_index":771,"title":{},"body":{"classes/InviteMemberDto.html":{}}}],["member.dto.ts:14",{"_index":1289,"title":{},"body":{"classes/RegisterMember.html":{}}}],["member.dto.ts:15",{"_index":589,"title":{},"body":{"classes/CreateMemberDto.html":{}}}],["member.dto.ts:16",{"_index":776,"title":{},"body":{"classes/InviteMemberDto.html":{}}}],["member.dto.ts:18",{"_index":1287,"title":{},"body":{"classes/RegisterMember.html":{}}}],["member.dto.ts:19",{"_index":591,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/RegisterMember.html":{}}}],["member.dto.ts:20",{"_index":774,"title":{},"body":{"classes/InviteMemberDto.html":{}}}],["member.dto.ts:22",{"_index":593,"title":{},"body":{"classes/CreateMemberDto.html":{}}}],["member.dto.ts:23",{"_index":775,"title":{},"body":{"classes/InviteMemberDto.html":{}}}],["member.dto.ts:4",{"_index":595,"title":{},"body":{"classes/CreateMemberDto.html":{},"classes/InviteMemberDto.html":{}}}],["member.dto.ts:5",{"_index":1598,"title":{},"body":{"classes/UpdateMemberDto.html":{}}}],["member.dto.ts:6",{"_index":592,"title":{},"body":{"classes/CreateMemberDto.html":{}}}],["member.dto.ts:7",{"_index":772,"title":{},"body":{"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{}}}],["member.dto.ts:8",{"_index":594,"title":{},"body":{"classes/CreateMemberDto.html":{}}}],["member.findone",{"_index":842,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["member.id",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.name",{"_index":1051,"title":{},"body":{"modules/MemberModule.html":{}}}],["member.organization",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.organization._id",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.password",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["member.reload",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.repository",{"_index":1049,"title":{},"body":{"modules/MemberModule.html":{},"injectables/MemberService.html":{}}}],["member.role._id",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.role.slug",{"_index":847,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["member.service",{"_index":1022,"title":{},"body":{"controllers/MemberController.html":{},"modules/MemberModule.html":{}}}],["member.toobject",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.user._id",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.user.email",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["member.user.phone",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["member/member.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["membercommonfield",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"classes/Member.html":{}}}],["membercommonfieldmodule",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["membercommonfieldservice",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["membercontroller",{"_index":994,"title":{"controllers/MemberController.html":{}},"body":{"controllers/MemberController.html":{},"modules/MemberModule.html":{},"coverage.html":{}}}],["memberdocument",{"_index":983,"title":{},"body":{"classes/Member.html":{}}}],["memberid",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenData.html":{}}}],["membermodule",{"_index":68,"title":{"modules/MemberModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MemberModule.html":{},"modules.html":{},"overview.html":{}}}],["memberrepository",{"_index":1046,"title":{"injectables/MemberRepository.html":{}},"body":{"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"coverage.html":{},"overview.html":{}}}],["members",{"_index":1003,"title":{},"body":{"controllers/MemberController.html":{},"classes/Organization.html":{}}}],["memberschema",{"_index":992,"title":{},"body":{"classes/Member.html":{},"modules/MemberModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["memberservice",{"_index":301,"title":{"injectables/MemberService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberService.html":{},"coverage.html":{},"overview.html":{}}}],["membership",{"_index":1118,"title":{},"body":{"injectables/MemberService.html":{}}}],["membershipplan",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"classes/Organization.html":{}}}],["membershipplan.id",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["membershipplan.paymentmethod",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["membershipplan.renewalduration",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["membershipplan.renewaldurationcount",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["membershipplanid",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{}}}],["membershipplanmodule",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["membershipplans",{"_index":1144,"title":{},"body":{"classes/Organization.html":{}}}],["membershipplanservice",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["memberships",{"_index":1618,"title":{},"body":{"classes/User.html":{}}}],["memberurl",{"_index":914,"title":{},"body":{"injectables/MailService.html":{}}}],["memberurl}/admin",{"_index":917,"title":{},"body":{"injectables/MailService.html":{}}}],["merge",{"_index":925,"title":{},"body":{"injectables/MailService.html":{}}}],["message",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"controllers/UserController.html":{}}}],["message_id",{"_index":1521,"title":{},"body":{"interfaces/TermiiSendSmsResponse.html":{}}}],["message_text",{"_index":960,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["message_type",{"_index":962,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["messageid",{"_index":724,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["metadata",{"_index":1796,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["minlength",{"_index":571,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/RegisterMember.html":{}}}],["minlength(6",{"_index":580,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/RegisterMember.html":{}}}],["minlength(6)@maxlength(20",{"_index":567,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/RegisterMember.html":{}}}],["minlength(6)@maxlength(20)@isequalto('password",{"_index":556,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{}}}],["miscellaneous",{"_index":1808,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1855,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1845,"title":{},"body":{"index.html":{}}}],["model",{"_index":756,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["model(model.name",{"_index":766,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["model.name",{"_index":763,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["model.schema",{"_index":767,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["module",{"_index":60,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{}}}],["moduleref",{"_index":854,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["modules",{"_index":62,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1768,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/Member.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/Resource.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/Token.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoose.connect(process.env.mongodb_uri",{"_index":765,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["mongoose.schema",{"_index":752,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["mongoose.schema.types.objectid",{"_index":984,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["mongoose.types.objectid",{"_index":1306,"title":{},"body":{"classes/Resource.html":{}}}],["mongoosemodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoservererror",{"_index":1656,"title":{},"body":{"classes/User.html":{}}}],["more",{"_index":1867,"title":{},"body":{"index.html":{}}}],["mp",{"_index":1142,"title":{},"body":{"classes/Organization.html":{}}}],["mp.organization",{"_index":1143,"title":{},"body":{"classes/Organization.html":{}}}],["myśliwiec",{"_index":1873,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.includes('filter",{"_index":1266,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["name.replace('filter",{"_index":1271,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":1712,"title":{},"body":{"injectables/UserService.html":{}}}],["nest",{"_index":1303,"title":{},"body":{"classes/Resource.html":{},"index.html":{}}}],["nestframework",{"_index":1877,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1767,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/MailService.html":{},"injectables/MemberService.html":{},"modules/SmsModule.html":{},"injectables/TermiiService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":30,"title":{},"body":{"classes/AllErrorFilter.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/QueryErrorFilter.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":1773,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Member.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"classes/Organization.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"classes/Resource.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"classes/Token.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1777,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateOrganizationDto.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":42,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"classes/Role.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["next(new",{"_index":1663,"title":{},"body":{"classes/User.html":{}}}],["nice",{"_index":942,"title":{},"body":{"injectables/MailService.html":{}}}],["node.js",{"_index":1827,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1397,"title":{},"body":{"classes/Role.html":{}}}],["nodemailer",{"_index":1790,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":1565,"title":{},"body":{"injectables/TermiiService.html":{}}}],["nosql",{"_index":1395,"title":{},"body":{"classes/Role.html":{}}}],["notfoundexception",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["notfoundexception(`organization",{"_index":1214,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["notfoundexception(`resource",{"_index":1377,"title":{},"body":{"injectables/ResourceService.html":{}}}],["notfoundexception(`role",{"_index":1441,"title":{},"body":{"injectables/RoleService.html":{}}}],["notfoundexception(`user",{"_index":1714,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":1839,"title":{},"body":{"index.html":{}}}],["null",{"_index":1079,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["number",{"_index":903,"title":{},"body":{"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Organization.html":{},"interfaces/PaginateQuery.html":{},"classes/RegisterMember.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"interfaces/TokenRequest.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/VerifyOtpDto.html":{}}}],["numeric",{"_index":1573,"title":{},"body":{"injectables/TermiiService.html":{}}}],["object",{"_index":757,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"miscellaneous/variables.html":{}}}],["object.assign(this",{"_index":965,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{}}}],["object.constructor",{"_index":761,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["object.keys(filter).length",{"_index":1281,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["officetitle",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/InviteMemberDto.html":{},"classes/Member.html":{}}}],["omit",{"_index":697,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["one",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{}}}],["onetomany",{"_index":985,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{}}}],["open",{"_index":1857,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":762,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["options.decorator.ts",{"_index":1759,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["organization",{"_index":129,"title":{"classes/Organization.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"classes/Role.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["organization'})@delete(':id",{"_index":1155,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organization'})@get(':id",{"_index":1153,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organization'})@patch(':id",{"_index":1158,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organization'})@post",{"_index":1149,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organization..dto",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["organization..dto.ts",{"_index":744,"title":{},"body":{"classes/FindUserOrganization.html":{},"coverage.html":{}}}],["organization..dto.ts:5",{"_index":746,"title":{},"body":{"classes/FindUserOrganization.html":{}}}],["organization._id",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OrganizationRepository.html":{}}}],["organization.controller",{"_index":1170,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["organization.decorator",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["organization.decorator.ts",{"_index":1737,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["organization.dto",{"_index":645,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/UpdateOrganizationDto.html":{}}}],["organization.dto.ts",{"_index":600,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["organization.dto.ts:19",{"_index":623,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:23",{"_index":610,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:27",{"_index":611,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:31",{"_index":609,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:35",{"_index":614,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:39",{"_index":608,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:43",{"_index":624,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:47",{"_index":612,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:5",{"_index":1604,"title":{},"body":{"classes/UpdateOrganizationDto.html":{}}}],["organization.dto.ts:51",{"_index":613,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:55",{"_index":616,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:9",{"_index":615,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.id",{"_index":805,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["organization.name",{"_index":927,"title":{},"body":{"injectables/MailService.html":{},"modules/OrganizationModule.html":{}}}],["organization.repository",{"_index":1171,"title":{},"body":{"modules/OrganizationModule.html":{},"injectables/OrganizationService.html":{}}}],["organization.service",{"_index":1160,"title":{},"body":{"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{}}}],["organization/organization.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["organization_api_header",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["organizationapi",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["organizationapi()@useguards(localauthguard)@public()@post('login",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["organizationcontroller",{"_index":1146,"title":{"controllers/OrganizationController.html":{}},"body":{"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"coverage.html":{}}}],["organizationdocument",{"_index":1140,"title":{},"body":{"classes/Organization.html":{}}}],["organizationid",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtStrategy.html":{},"injectables/OrganizationRepository.html":{},"classes/TokenData.html":{},"interfaces/TokenRequest.html":{}}}],["organizationmember",{"_index":869,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["organizationmodule",{"_index":69,"title":{"modules/OrganizationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/OrganizationModule.html":{},"modules.html":{},"overview.html":{}}}],["organizationname",{"_index":554,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["organizationrepository",{"_index":1168,"title":{"injectables/OrganizationRepository.html":{}},"body":{"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"coverage.html":{},"overview.html":{}}}],["organizations",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{}}}],["organizations'})@get",{"_index":1151,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organizationschema",{"_index":618,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{},"modules/OrganizationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["organizationservice",{"_index":300,"title":{"injectables/OrganizationService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationService.html":{},"coverage.html":{},"overview.html":{}}}],["organizationsitename",{"_index":555,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["organizationslug",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["original",{"_index":1238,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["originalurl",{"_index":1243,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["otp",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SmsService.html":{},"classes/VerifyOtpDto.html":{}}}],["otp.dto",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["otp.dto.ts",{"_index":1721,"title":{},"body":{"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["otp.dto.ts:6",{"_index":1724,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["otp.dto.ts:9",{"_index":1723,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["out",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["override",{"_index":941,"title":{},"body":{"injectables/MailService.html":{}}}],["overview",{"_index":1882,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":605,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{}}}],["ownerid",{"_index":1187,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["package",{"_index":1765,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1218,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["paginate",{"_index":1230,"title":{},"body":{"interfaces/PaginateQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginatequery",{"_index":1215,"title":{"interfaces/PaginateQuery.html":{}},"body":{"interfaces/PaginateQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginatequeryoptions",{"_index":1760,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["param",{"_index":1021,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"interfaces/PaginateQuery.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["param('id",{"_index":1038,"title":{},"body":{"controllers/MemberController.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1255,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["params.dto",{"_index":1555,"title":{},"body":{"injectables/TermiiService.html":{}}}],["params.dto.ts",{"_index":948,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"coverage.html":{}}}],["params.dto.ts:10",{"_index":1508,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:11",{"_index":1507,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:12",{"_index":1511,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:13",{"_index":1509,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:14",{"_index":1510,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:15",{"_index":1505,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:16",{"_index":1512,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:17",{"_index":1500,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:2",{"_index":1514,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:23",{"_index":1516,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:3",{"_index":1503,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:4",{"_index":1513,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:5",{"_index":1515,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:6",{"_index":1502,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:7",{"_index":1501,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:8",{"_index":1504,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["params.dto.ts:9",{"_index":1506,"title":{},"body":{"classes/TermiiRequestParams.html":{}}}],["parseint(query.limit.tostring",{"_index":1276,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["parseint(query.page.tostring",{"_index":1273,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["partial",{"_index":964,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["partialtype",{"_index":1599,"title":{},"body":{"classes/UpdateMemberDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(creatememberdto",{"_index":1600,"title":{},"body":{"classes/UpdateMemberDto.html":{}}}],["partialtype(createorganizationdto",{"_index":1605,"title":{},"body":{"classes/UpdateOrganizationDto.html":{}}}],["partialtype(createresourcedto",{"_index":1607,"title":{},"body":{"classes/UpdateResourceDto.html":{}}}],["partialtype(createroledto",{"_index":1610,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createuserdto",{"_index":1616,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":830,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":832,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":833,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":863,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"injectables/MemberService.html":{},"classes/RegisterMember.html":{},"classes/UpdateMemberPasswordDto.html":{}}}],["password.dto",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberService.html":{}}}],["password.dto.ts",{"_index":629,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:13",{"_index":630,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["password.dto.ts:16",{"_index":631,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{}}}],["password.dto.ts:6",{"_index":1602,"title":{},"body":{"classes/UpdateMemberPasswordDto.html":{}}}],["password.dto.ts:8",{"_index":632,"title":{},"body":{"classes/CreateOrganizationPasswordDto.html":{},"classes/UpdateMemberPasswordDto.html":{}}}],["passwordconfirm",{"_index":1601,"title":{},"body":{"classes/UpdateMemberPasswordDto.html":{}}}],["passwordfield",{"_index":862,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordmatch",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1020,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["patch(':id",{"_index":1035,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":1014,"title":{},"body":{"controllers/MemberController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["path",{"_index":1219,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"miscellaneous/variables.html":{}}}],["payload.organizationid",{"_index":841,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perm",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perm.delete",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":1390,"title":{},"body":{"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["perms.create",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perms.foreach(function",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perms.read",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perms.write",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["personal",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["phone",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/InviteMemberDto.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["phone.replace",{"_index":1496,"title":{},"body":{"injectables/SmsService.html":{}}}],["pickby",{"_index":1225,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["pin",{"_index":954,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["pin_attempts",{"_index":956,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["pin_id",{"_index":955,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["pin_length",{"_index":958,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["pin_placeholder",{"_index":959,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["pin_time_to_live",{"_index":957,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["pin_type",{"_index":961,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["plain",{"_index":1548,"title":{},"body":{"injectables/TermiiService.html":{}}}],["plan",{"_index":1119,"title":{},"body":{"injectables/MemberService.html":{}}}],["plan.module",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["plan.service",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["plan/enums/plan",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["plan/membership",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["planrenewalduration",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtAuthGuard.html":{},"classes/User.html":{},"index.html":{}}}],["populate",{"_index":1457,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["populate('organization",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["populate(['organization",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["populate(this.populateonfind",{"_index":1459,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["populateonfind",{"_index":1054,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["post",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["post('create",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('find",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('update",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":1000,"title":{},"body":{"controllers/MemberController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MailController.html":{},"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailService.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/TermiiService.html":{}}}],["process.env.secret",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1847,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1826,"title":{},"body":{"index.html":{}}}],["project",{"_index":1858,"title":{},"body":{"index.html":{}}}],["projection",{"_index":1077,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["projectiontype",{"_index":1078,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["promise",{"_index":691,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["prop",{"_index":970,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/Token.html":{},"classes/User.html":{}}}],["prop(boolean",{"_index":1628,"title":{},"body":{"classes/User.html":{}}}],["prop({lowercase",{"_index":1621,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":1132,"title":{},"body":{"classes/Organization.html":{},"classes/Role.html":{}}}],["prop({type",{"_index":974,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["prop({validate",{"_index":1626,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":278,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{},"interfaces/PaginateQuery.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"properties.html":{}}}],["property",{"_index":1820,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propertyname",{"_index":759,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["protected",{"_index":792,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["protocol",{"_index":1241,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":867,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["providers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('create",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('validate",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('verify",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["put",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":1234,"title":{},"body":{"interfaces/PaginateQuery.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["query.limit",{"_index":1275,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["query.page",{"_index":1272,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["query.search",{"_index":1278,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["query.search.tostring",{"_index":1279,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["query.searchby",{"_index":1263,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["query.sortby",{"_index":1254,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["queryerrorfilter",{"_index":1282,"title":{"classes/QueryErrorFilter.html":{}},"body":{"classes/QueryErrorFilter.html":{},"coverage.html":{}}}],["queryoptions",{"_index":1069,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["rbac",{"_index":1382,"title":{},"body":{"classes/Role.html":{}}}],["rcreate",{"_index":1353,"title":{},"body":{"classes/ResourceRole.html":{}}}],["rdelete",{"_index":1354,"title":{},"body":{"classes/ResourceRole.html":{}}}],["read",{"_index":1866,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"injectables/TermiiService.html":{},"controllers/UserController.html":{}}}],["rebuild",{"_index":1237,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["recipients",{"_index":919,"title":{},"body":{"injectables/MailService.html":{}}}],["record",{"_index":758,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"injectables/SharedRepository.html":{}}}],["reduce",{"_index":1239,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["ref",{"_index":976,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["reflect",{"_index":1795,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":782,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["registerdecorator",{"_index":753,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["registered",{"_index":1638,"title":{},"body":{"classes/User.html":{}}}],["registermember",{"_index":222,"title":{"classes/RegisterMember.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterMember.html":{},"coverage.html":{}}}],["registermember(@body",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["registermember(dto",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations",{"_index":843,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["remove",{"_index":997,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":1041,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":1009,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removed",{"_index":849,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["renewal",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["replyto",{"_index":736,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["repo",{"_index":1097,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"classes/SharedService.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":1837,"title":{},"body":{"index.html":{}}}],["req",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OrganizationController.html":{},"miscellaneous/variables.html":{}}}],["req.app.get('db",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers['authorization",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.method",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.resource.id",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["req.user.organization",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.role_id",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"controllers/OrganizationController.html":{},"interfaces/PaginateQuery.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"interfaces/TokenRequest.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.get('host",{"_index":1246,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["request.headers",{"_index":799,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.headers.authorization",{"_index":807,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.headers.authorization.split",{"_index":813,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.hostname",{"_index":1247,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["request.interface",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["request.interface.ts",{"_index":1596,"title":{},"body":{"interfaces/TokenRequest.html":{},"coverage.html":{}}}],["request.organizationid",{"_index":804,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.originalurl",{"_index":1244,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["request.protocol",{"_index":1245,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["request.tokendata",{"_index":811,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.tokendata?.organizationid",{"_index":818,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.url",{"_index":1248,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["request.user.id",{"_index":1164,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["requested",{"_index":930,"title":{},"body":{"injectables/MailService.html":{}}}],["required",{"_index":1134,"title":{},"body":{"classes/Organization.html":{},"classes/Role.html":{},"injectables/TermiiService.html":{}}}],["res",{"_index":1675,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["res.status(400).send",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.status(403).send",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["reset.template.hbs",{"_index":931,"title":{},"body":{"injectables/MailService.html":{}}}],["resetmemberpassword",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword",{"_index":888,"title":{},"body":{"injectables/MailService.html":{}}}],["resetpassword(user",{"_index":897,"title":{},"body":{"injectables/MailService.html":{}}}],["resetpasswordrequest",{"_index":889,"title":{},"body":{"injectables/MailService.html":{}}}],["resetpasswordrequest(user",{"_index":899,"title":{},"body":{"injectables/MailService.html":{}}}],["resource",{"_index":1292,"title":{"classes/Resource.html":{}},"body":{"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resource.controller",{"_index":1337,"title":{},"body":{"modules/ResourceModule.html":{}}}],["resource.dto",{"_index":1325,"title":{},"body":{"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/UpdateResourceDto.html":{}}}],["resource.dto.ts",{"_index":648,"title":{},"body":{"classes/CreateResourceDto.html":{},"classes/UpdateResourceDto.html":{},"coverage.html":{}}}],["resource.dto.ts:12",{"_index":651,"title":{},"body":{"classes/CreateResourceDto.html":{}}}],["resource.dto.ts:6",{"_index":650,"title":{},"body":{"classes/CreateResourceDto.html":{}}}],["resource.dto.ts:9",{"_index":652,"title":{},"body":{"classes/CreateResourceDto.html":{}}}],["resource.name",{"_index":1342,"title":{},"body":{"modules/ResourceModule.html":{}}}],["resource.repository",{"_index":1338,"title":{},"body":{"modules/ResourceModule.html":{},"injectables/ResourceService.html":{}}}],["resource.service",{"_index":1324,"title":{},"body":{"controllers/ResourceController.html":{},"modules/ResourceModule.html":{}}}],["resource/resource.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["resource_id",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourcecontroller",{"_index":1309,"title":{"controllers/ResourceController.html":{}},"body":{"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"coverage.html":{}}}],["resourcedocument",{"_index":1300,"title":{},"body":{"classes/Resource.html":{}}}],["resourcemodule",{"_index":70,"title":{"modules/ResourceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ResourceModule.html":{},"modules.html":{},"overview.html":{}}}],["resourcerepository",{"_index":1335,"title":{"injectables/ResourceRepository.html":{}},"body":{"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"coverage.html":{},"overview.html":{}}}],["resourcerole",{"_index":1296,"title":{"classes/ResourceRole.html":{}},"body":{"classes/Resource.html":{},"modules/ResourceModule.html":{},"classes/ResourceRole.html":{},"coverage.html":{}}}],["resourcerole.name",{"_index":1343,"title":{},"body":{"modules/ResourceModule.html":{}}}],["resourceroledocument",{"_index":1363,"title":{},"body":{"classes/ResourceRole.html":{}}}],["resourceroleschema",{"_index":1340,"title":{},"body":{"modules/ResourceModule.html":{},"classes/ResourceRole.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resources",{"_index":1313,"title":{},"body":{"controllers/ResourceController.html":{}}}],["resources_roles",{"_index":1294,"title":{},"body":{"classes/Resource.html":{}}}],["resourceschema",{"_index":1307,"title":{},"body":{"classes/Resource.html":{},"modules/ResourceModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resourceservice",{"_index":1323,"title":{"injectables/ResourceService.html":{}},"body":{"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceService.html":{},"coverage.html":{},"overview.html":{}}}],["response",{"_index":721,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{},"controllers/UserController.html":{}}}],["response.data",{"_index":742,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{}}}],["response.data.messageid",{"_index":725,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["response.data.transactionid",{"_index":727,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["response.interface",{"_index":1557,"title":{},"body":{"injectables/TermiiService.html":{}}}],["response.interface.ts",{"_index":1519,"title":{},"body":{"interfaces/TermiiSendSmsResponse.html":{},"coverage.html":{}}}],["response.status(200).json(user.user",{"_index":1684,"title":{},"body":{"controllers/UserController.html":{}}}],["response.status(201).json(user.user",{"_index":1683,"title":{},"body":{"controllers/UserController.html":{}}}],["result",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":46,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":44,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"controllers/MemberController.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/QueryErrorFilter.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":1798,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":446,"title":{"classes/Role.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateMemberDto.html":{},"injectables/JwtStrategy.html":{},"classes/Member.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["role's",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role._id",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.controller",{"_index":1419,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.dto",{"_index":1411,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":655,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:12",{"_index":657,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:5",{"_index":1609,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["role.dto.ts:6",{"_index":656,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.dto.ts:9",{"_index":658,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.name",{"_index":1422,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.repository",{"_index":1420,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["role.schema",{"_index":1299,"title":{},"body":{"classes/Resource.html":{},"modules/ResourceModule.html":{}}}],["role.schema.ts",{"_index":1352,"title":{},"body":{"classes/ResourceRole.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role.schema.ts:10",{"_index":1360,"title":{},"body":{"classes/ResourceRole.html":{}}}],["role.schema.ts:13",{"_index":1358,"title":{},"body":{"classes/ResourceRole.html":{}}}],["role.schema.ts:16",{"_index":1359,"title":{},"body":{"classes/ResourceRole.html":{}}}],["role.schema.ts:19",{"_index":1362,"title":{},"body":{"classes/ResourceRole.html":{}}}],["role.schema.ts:22",{"_index":1361,"title":{},"body":{"classes/ResourceRole.html":{}}}],["role.service",{"_index":1410,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{}}}],["role/role.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["role_id",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":1400,"title":{"controllers/RoleController.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["roleid",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenData.html":{}}}],["rolemodule",{"_index":71,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules.html":{},"overview.html":{}}}],["rolerepository",{"_index":1417,"title":{"injectables/RoleRepository.html":{}},"body":{"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["roles",{"_index":1123,"title":{},"body":{"classes/Organization.html":{},"classes/Role.html":{},"controllers/RoleController.html":{}}}],["roles_id",{"_index":1389,"title":{},"body":{"classes/Role.html":{}}}],["roleschema",{"_index":1398,"title":{},"body":{"classes/Role.html":{},"modules/RoleModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleservice",{"_index":299,"title":{"injectables/RoleService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["route",{"_index":816,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["routes",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["rread",{"_index":1355,"title":{},"body":{"classes/ResourceRole.html":{}}}],["run",{"_index":1842,"title":{},"body":{"index.html":{}}}],["rupdate",{"_index":1356,"title":{},"body":{"classes/ResourceRole.html":{}}}],["rxjs",{"_index":1800,"title":{},"body":{"dependencies.html":{}}}],["s[a",{"_index":1660,"title":{},"body":{"classes/User.html":{}}}],["saltrounds",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MemberService.html":{}}}],["save",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveoptions",{"_index":1066,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["scalable",{"_index":1831,"title":{},"body":{"index.html":{}}}],["schema",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/Member.html":{},"modules/MemberModule.html":{},"classes/Organization.html":{},"modules/OrganizationModule.html":{},"classes/Resource.html":{},"modules/ResourceModule.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"modules/RoleModule.html":{},"classes/Token.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":981,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/Token.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(member",{"_index":993,"title":{},"body":{"classes/Member.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(organization",{"_index":1145,"title":{},"body":{"classes/Organization.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(resource",{"_index":1308,"title":{},"body":{"classes/Resource.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(resourcerole",{"_index":1364,"title":{},"body":{"classes/ResourceRole.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(role",{"_index":1399,"title":{},"body":{"classes/Role.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(token",{"_index":1580,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1645,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/member.schema",{"_index":1050,"title":{},"body":{"modules/MemberModule.html":{},"injectables/MemberRepository.html":{}}}],["schemas/organization.schema",{"_index":628,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{}}}],["schemas/resource",{"_index":1341,"title":{},"body":{"modules/ResourceModule.html":{}}}],["schemas/resource.schema",{"_index":1339,"title":{},"body":{"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{}}}],["schemas/role.schema",{"_index":1421,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleRepository.html":{}}}],["schemas/token.schema",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokenRepository.html":{}}}],["schemas/user.schema",{"_index":1694,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserRepository.html":{}}}],["scope",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["scope.request",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["scoped",{"_index":866,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["search",{"_index":1220,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["searchby",{"_index":1221,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["searchby.length",{"_index":1280,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["searchby.push(param",{"_index":1265,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":839,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["send",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/MemberService.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"coverage.html":{}}}],["send(data",{"_index":692,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendbulk",{"_index":683,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendbulk(data",{"_index":696,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendbulkmail",{"_index":684,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendbulkmail(data",{"_index":699,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendmail",{"_index":685,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendmail(data",{"_index":702,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["sendotp",{"_index":1478,"title":{},"body":{"injectables/SmsService.html":{},"injectables/TermiiService.html":{}}}],["sendotp(phone",{"_index":1485,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendotp(to",{"_index":1529,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sendotplocal",{"_index":1479,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendotplocal(phone",{"_index":1487,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendsms",{"_index":1525,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sendsms(to",{"_index":1533,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sendsmsfromrandomnumber",{"_index":1526,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sendsmsfromrandomnumber(to",{"_index":1535,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sendverificationcode",{"_index":890,"title":{},"body":{"injectables/MailService.html":{}}}],["sendverificationcode(email",{"_index":902,"title":{},"body":{"injectables/MailService.html":{}}}],["sendwelcomesms",{"_index":1480,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendwelcomesms(phone",{"_index":1489,"title":{},"body":{"injectables/SmsService.html":{}}}],["sent",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":1832,"title":{},"body":{"index.html":{}}}],["service",{"_index":1027,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["set",{"_index":1559,"title":{},"body":{"injectables/TermiiService.html":{}}}],["setmetadata(is_public_key",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(user_without_organization",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setowner",{"_index":1177,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["setowner(ownerid",{"_index":1185,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["shared.repository",{"_index":1469,"title":{},"body":{"classes/SharedService.html":{}}}],["sharedrepository",{"_index":1053,"title":{"injectables/SharedRepository.html":{}},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["sharedrepository:19",{"_index":1072,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:23",{"_index":1188,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["sharedrepository:25",{"_index":1180,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["sharedrepository:27",{"_index":1086,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:29",{"_index":1074,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:45",{"_index":1080,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:61",{"_index":1067,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:66",{"_index":1083,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:78",{"_index":1070,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:82",{"_index":1085,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:85",{"_index":1064,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedrepository:88",{"_index":1062,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["sharedservice",{"_index":1092,"title":{"classes/SharedService.html":{}},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"classes/SharedService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["side",{"_index":1833,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["site",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["sitename",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{}}}],["slug",{"_index":649,"title":{},"body":{"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"miscellaneous/variables.html":{}}}],["slug.decorator",{"_index":576,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{}}}],["slug.decorator.ts",{"_index":1756,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["slug/:slug",{"_index":1329,"title":{},"body":{"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["slug/:slug')@apioperation({summary",{"_index":1317,"title":{},"body":{"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["slugify",{"_index":1373,"title":{},"body":{"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"dependencies.html":{}}}],["slugify(dto.name)).tolowercase",{"_index":1374,"title":{},"body":{"injectables/ResourceService.html":{},"injectables/RoleService.html":{}}}],["sms",{"_index":951,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"coverage.html":{}}}],["sms.service",{"_index":1475,"title":{},"body":{"modules/SmsModule.html":{}}}],["sms/number/send",{"_index":1571,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sms/otp/send",{"_index":1572,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sms/otp/verify",{"_index":1576,"title":{},"body":{"injectables/TermiiService.html":{}}}],["sms/send",{"_index":1568,"title":{},"body":{"injectables/TermiiService.html":{}}}],["smsmodule",{"_index":229,"title":{"modules/SmsModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/SmsModule.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":296,"title":{"injectables/SmsService.html":{}},"body":{"injectables/AuthService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"coverage.html":{},"overview.html":{}}}],["sortby",{"_index":1222,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["sortby.length",{"_index":1277,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["sortby.push(items",{"_index":1262,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DuplicateFieldError.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"modules/MemberModule.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"modules/ResourceModule.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateResourceDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["specified",{"_index":619,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/JwtAuthGuard.html":{}}}],["specify",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["split",{"_index":808,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["sponsors",{"_index":1861,"title":{},"body":{"index.html":{}}}],["src/.../allow",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.constants.ts",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../decorator.ts",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../elastic",{"_index":1810,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../is",{"_index":1816,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1815,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../member.schema.ts",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../organization",{"_index":1817,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../organization.schema.ts",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../paginate",{"_index":1818,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resource",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../resource.schema.ts",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.middleware.ts",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.schema.ts",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.schema.ts",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.constants",{"_index":909,"title":{},"body":{"injectables/MailService.html":{},"injectables/SmsService.html":{}}}],["src/app.constants.ts",{"_index":1728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:72",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:78",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:87",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:92",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:132",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:138",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:156",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:197",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:202",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:216",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:225",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:257",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:284",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:288",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:292",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:296",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:99",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1735,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/allow",{"_index":1736,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/organization",{"_index":1738,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/create",{"_index":551,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/find",{"_index":743,"title":{},"body":{"classes/FindUserOrganization.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":871,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":873,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":872,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register",{"_index":1286,"title":{},"body":{"classes/RegisterMember.html":{},"coverage.html":{}}}],["src/auth/dto/token",{"_index":1581,"title":{},"body":{"classes/TokenData.html":{},"coverage.html":{}}}],["src/auth/dto/verify",{"_index":1718,"title":{},"body":{"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":778,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":850,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/token",{"_index":1595,"title":{},"body":{"interfaces/TokenRequest.html":{},"coverage.html":{}}}],["src/auth/schemas/token.schema.ts",{"_index":1577,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/schemas/token.schema.ts:10",{"_index":1578,"title":{},"body":{"classes/Token.html":{}}}],["src/auth/schemas/token.schema.ts:7",{"_index":1579,"title":{},"body":{"classes/Token.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":821,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:10",{"_index":827,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:18",{"_index":826,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:9",{"_index":824,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":852,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:18",{"_index":857,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:9",{"_index":855,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/token.repository.ts",{"_index":1588,"title":{},"body":{"injectables/TokenRepository.html":{},"coverage.html":{}}}],["src/auth/token.repository.ts:10",{"_index":1590,"title":{},"body":{"injectables/TokenRepository.html":{}}}],["src/auth/token.repository.ts:15",{"_index":1592,"title":{},"body":{"injectables/TokenRepository.html":{}}}],["src/mail/elastic",{"_index":675,"title":{},"body":{"injectables/ElasticMailService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/mail/mail.controller.ts",{"_index":875,"title":{},"body":{"controllers/MailController.html":{},"coverage.html":{}}}],["src/mail/mail.module",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mail/mail.module.ts",{"_index":882,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mail/mail.service.ts",{"_index":885,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:11",{"_index":893,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:17",{"_index":906,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:37",{"_index":904,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:52",{"_index":901,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:66",{"_index":898,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:82",{"_index":896,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1749,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/member",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/RegisterMember.html":{}}}],["src/member/dto/create",{"_index":584,"title":{},"body":{"classes/CreateMemberDto.html":{},"coverage.html":{}}}],["src/member/dto/invite",{"_index":770,"title":{},"body":{"classes/InviteMemberDto.html":{},"coverage.html":{}}}],["src/member/dto/update",{"_index":1597,"title":{},"body":{"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"coverage.html":{}}}],["src/member/member.controller.ts",{"_index":995,"title":{},"body":{"controllers/MemberController.html":{},"coverage.html":{}}}],["src/member/member.controller.ts:23",{"_index":1001,"title":{},"body":{"controllers/MemberController.html":{}}}],["src/member/member.controller.ts:29",{"_index":1004,"title":{},"body":{"controllers/MemberController.html":{}}}],["src/member/member.controller.ts:35",{"_index":1007,"title":{},"body":{"controllers/MemberController.html":{}}}],["src/member/member.controller.ts:41",{"_index":1015,"title":{},"body":{"controllers/MemberController.html":{}}}],["src/member/member.controller.ts:47",{"_index":1019,"title":{},"body":{"controllers/MemberController.html":{}}}],["src/member/member.controller.ts:56",{"_index":1011,"title":{},"body":{"controllers/MemberController.html":{}}}],["src/member/member.module",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/member/member.module.ts",{"_index":1047,"title":{},"body":{"modules/MemberModule.html":{}}}],["src/member/member.repository.ts",{"_index":1052,"title":{},"body":{"injectables/MemberRepository.html":{},"coverage.html":{}}}],["src/member/member.repository.ts:14",{"_index":1060,"title":{},"body":{"injectables/MemberRepository.html":{}}}],["src/member/member.service",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/member/member.service.ts",{"_index":1091,"title":{},"body":{"injectables/MemberService.html":{},"coverage.html":{}}}],["src/member/member.service.ts:14",{"_index":1096,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:22",{"_index":1099,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:29",{"_index":1101,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:33",{"_index":1102,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:37",{"_index":1106,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:42",{"_index":1105,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:46",{"_index":1107,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/member.service.ts:54",{"_index":1104,"title":{},"body":{"injectables/MemberService.html":{}}}],["src/member/schemas/member.schema",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Organization.html":{},"interfaces/TokenRequest.html":{},"classes/User.html":{}}}],["src/member/schemas/member.schema.ts",{"_index":968,"title":{},"body":{"classes/Member.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/member/schemas/member.schema.ts:12",{"_index":980,"title":{},"body":{"classes/Member.html":{}}}],["src/member/schemas/member.schema.ts:15",{"_index":977,"title":{},"body":{"classes/Member.html":{}}}],["src/member/schemas/member.schema.ts:18",{"_index":979,"title":{},"body":{"classes/Member.html":{}}}],["src/member/schemas/member.schema.ts:21",{"_index":971,"title":{},"body":{"classes/Member.html":{}}}],["src/member/schemas/member.schema.ts:24",{"_index":972,"title":{},"body":{"classes/Member.html":{}}}],["src/member/schemas/member.schema.ts:27",{"_index":973,"title":{},"body":{"classes/Member.html":{}}}],["src/member/schemas/member.schema.ts:30",{"_index":978,"title":{},"body":{"classes/Member.html":{}}}],["src/membership",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/organization/dto/create",{"_index":599,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"coverage.html":{}}}],["src/organization/dto/update",{"_index":1603,"title":{},"body":{"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["src/organization/organization.controller.ts",{"_index":1147,"title":{},"body":{"controllers/OrganizationController.html":{},"coverage.html":{}}}],["src/organization/organization.controller.ts:24",{"_index":1152,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:30",{"_index":1150,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:37",{"_index":1154,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:43",{"_index":1159,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:49",{"_index":1156,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.module",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/organization/organization.module.ts",{"_index":1169,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["src/organization/organization.repository.ts",{"_index":1174,"title":{},"body":{"injectables/OrganizationRepository.html":{},"coverage.html":{}}}],["src/organization/organization.repository.ts:15",{"_index":1179,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["src/organization/organization.repository.ts:30",{"_index":1186,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["src/organization/organization.repository.ts:38",{"_index":1184,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["src/organization/organization.repository.ts:57",{"_index":1182,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["src/organization/organization.service",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["src/organization/organization.service.ts",{"_index":1202,"title":{},"body":{"injectables/OrganizationService.html":{},"coverage.html":{}}}],["src/organization/organization.service.ts:14",{"_index":1204,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:18",{"_index":1209,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:26",{"_index":1205,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:30",{"_index":1206,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:34",{"_index":1211,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:38",{"_index":1210,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:9",{"_index":1203,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/schemas/organization.schema",{"_index":910,"title":{},"body":{"injectables/MailService.html":{},"classes/Member.html":{},"classes/Role.html":{}}}],["src/organization/schemas/organization.schema.ts",{"_index":1122,"title":{},"body":{"classes/Organization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/organization/schemas/organization.schema.ts:12",{"_index":1133,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:15",{"_index":1138,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:18",{"_index":1126,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:21",{"_index":1127,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:24",{"_index":1125,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:27",{"_index":1130,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:30",{"_index":1124,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:33",{"_index":1139,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:36",{"_index":1128,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:39",{"_index":1129,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:42",{"_index":1135,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:45",{"_index":1131,"title":{},"body":{"classes/Organization.html":{}}}],["src/organization/schemas/organization.schema.ts:48",{"_index":1136,"title":{},"body":{"classes/Organization.html":{}}}],["src/resource/dto/create",{"_index":647,"title":{},"body":{"classes/CreateResourceDto.html":{},"coverage.html":{}}}],["src/resource/dto/update",{"_index":1606,"title":{},"body":{"classes/UpdateResourceDto.html":{},"coverage.html":{}}}],["src/resource/resource.controller.ts",{"_index":1310,"title":{},"body":{"controllers/ResourceController.html":{},"coverage.html":{}}}],["src/resource/resource.controller.ts:22",{"_index":1312,"title":{},"body":{"controllers/ResourceController.html":{}}}],["src/resource/resource.controller.ts:28",{"_index":1314,"title":{},"body":{"controllers/ResourceController.html":{}}}],["src/resource/resource.controller.ts:34",{"_index":1319,"title":{},"body":{"controllers/ResourceController.html":{}}}],["src/resource/resource.controller.ts:40",{"_index":1318,"title":{},"body":{"controllers/ResourceController.html":{}}}],["src/resource/resource.controller.ts:46",{"_index":1322,"title":{},"body":{"controllers/ResourceController.html":{}}}],["src/resource/resource.controller.ts:52",{"_index":1320,"title":{},"body":{"controllers/ResourceController.html":{}}}],["src/resource/resource.module.ts",{"_index":1336,"title":{},"body":{"modules/ResourceModule.html":{}}}],["src/resource/resource.repository.ts",{"_index":1344,"title":{},"body":{"injectables/ResourceRepository.html":{},"coverage.html":{}}}],["src/resource/resource.repository.ts:14",{"_index":1345,"title":{},"body":{"injectables/ResourceRepository.html":{}}}],["src/resource/resource.repository.ts:19",{"_index":1347,"title":{},"body":{"injectables/ResourceRepository.html":{}}}],["src/resource/resource.repository.ts:34",{"_index":1346,"title":{},"body":{"injectables/ResourceRepository.html":{}}}],["src/resource/resource.service.ts",{"_index":1365,"title":{},"body":{"injectables/ResourceService.html":{},"coverage.html":{}}}],["src/resource/resource.service.ts:10",{"_index":1366,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/resource.service.ts:15",{"_index":1370,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/resource.service.ts:20",{"_index":1369,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/resource.service.ts:28",{"_index":1367,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/resource.service.ts:32",{"_index":1368,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/resource.service.ts:36",{"_index":1372,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/resource.service.ts:40",{"_index":1371,"title":{},"body":{"injectables/ResourceService.html":{}}}],["src/resource/schemas/resource",{"_index":1351,"title":{},"body":{"classes/ResourceRole.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/resource/schemas/resource.schema.ts",{"_index":1293,"title":{},"body":{"classes/Resource.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/resource/schemas/resource.schema.ts:10",{"_index":1295,"title":{},"body":{"classes/Resource.html":{}}}],["src/resource/schemas/resource.schema.ts:13",{"_index":1298,"title":{},"body":{"classes/Resource.html":{}}}],["src/resource/schemas/resource.schema.ts:18",{"_index":1297,"title":{},"body":{"classes/Resource.html":{}}}],["src/role/dto/create",{"_index":654,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/role/dto/update",{"_index":1608,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/role/role.controller.ts",{"_index":1401,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/role/role.controller.ts:22",{"_index":1403,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:28",{"_index":1404,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:34",{"_index":1406,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:40",{"_index":1405,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:46",{"_index":1409,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:52",{"_index":1407,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.middleware.ts",{"_index":1753,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/role/role.module",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/role/role.module.ts",{"_index":1418,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/role/role.repository.ts",{"_index":1423,"title":{},"body":{"injectables/RoleRepository.html":{},"coverage.html":{}}}],["src/role/role.repository.ts:14",{"_index":1424,"title":{},"body":{"injectables/RoleRepository.html":{}}}],["src/role/role.repository.ts:19",{"_index":1426,"title":{},"body":{"injectables/RoleRepository.html":{}}}],["src/role/role.repository.ts:30",{"_index":1425,"title":{},"body":{"injectables/RoleRepository.html":{}}}],["src/role/role.service",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/role/role.service.ts",{"_index":1428,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/role/role.service.ts:10",{"_index":1431,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:15",{"_index":1436,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:19",{"_index":1437,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:23",{"_index":1435,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:28",{"_index":1434,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:36",{"_index":1432,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:40",{"_index":1433,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:44",{"_index":1439,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:48",{"_index":1438,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/schemas/role.schema",{"_index":982,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"classes/ResourceRole.html":{}}}],["src/role/schemas/role.schema.ts",{"_index":1378,"title":{},"body":{"classes/Role.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/role/schemas/role.schema.ts:15",{"_index":1379,"title":{},"body":{"classes/Role.html":{}}}],["src/role/schemas/role.schema.ts:18",{"_index":1381,"title":{},"body":{"classes/Role.html":{}}}],["src/role/schemas/role.schema.ts:21",{"_index":1380,"title":{},"body":{"classes/Role.html":{}}}],["src/shared/decorators/is",{"_index":575,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/RegisterMember.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/errors/duplicate",{"_index":671,"title":{},"body":{"classes/DuplicateFieldError.html":{},"classes/User.html":{},"coverage.html":{}}}],["src/shared/filters/all",{"_index":6,"title":{},"body":{"classes/AllErrorFilter.html":{},"coverage.html":{}}}],["src/shared/filters/query",{"_index":1283,"title":{},"body":{"classes/QueryErrorFilter.html":{},"coverage.html":{}}}],["src/shared/paginator/decorator.ts",{"_index":1216,"title":{},"body":{"interfaces/PaginateQuery.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/paginator/paginate",{"_index":1758,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/shared.repository",{"_index":1087,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["src/shared/shared.repository.ts",{"_index":1442,"title":{},"body":{"injectables/SharedRepository.html":{},"coverage.html":{}}}],["src/shared/shared.repository.ts:17",{"_index":1443,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:19",{"_index":1448,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:27",{"_index":1453,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:29",{"_index":1449,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:45",{"_index":1450,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:61",{"_index":1446,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:66",{"_index":1451,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:78",{"_index":1447,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:82",{"_index":1452,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:85",{"_index":1445,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.repository.ts:88",{"_index":1444,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["src/shared/shared.service",{"_index":1108,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["src/shared/shared.service.ts",{"_index":1467,"title":{},"body":{"classes/SharedService.html":{},"coverage.html":{}}}],["src/shared/shared.service.ts:3",{"_index":1468,"title":{},"body":{"classes/SharedService.html":{}}}],["src/sms/dto/termii",{"_index":947,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"coverage.html":{}}}],["src/sms/interfaces/termii",{"_index":1518,"title":{},"body":{"interfaces/TermiiSendSmsResponse.html":{},"coverage.html":{}}}],["src/sms/sms.module",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/sms/sms.module.ts",{"_index":1474,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/sms.service",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/sms/sms.service.ts",{"_index":1477,"title":{},"body":{"injectables/SmsService.html":{},"coverage.html":{}}}],["src/sms/sms.service.ts:10",{"_index":1490,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:21",{"_index":1488,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:31",{"_index":1492,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:38",{"_index":1486,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:7",{"_index":1483,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/termii.service.ts",{"_index":1522,"title":{},"body":{"injectables/TermiiService.html":{},"coverage.html":{}}}],["src/sms/termii.service.ts:10",{"_index":1540,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:11",{"_index":1547,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:113",{"_index":1538,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:18",{"_index":1550,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:21",{"_index":1527,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:25",{"_index":1528,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:33",{"_index":1534,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:68",{"_index":1536,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:82",{"_index":1532,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/sms/termii.service.ts:9",{"_index":1552,"title":{},"body":{"injectables/TermiiService.html":{}}}],["src/subscription/enums/subscription",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/subscription/subscription.module",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/subscription/subscription.service",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/dto/create",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/schemas/user.schema",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"classes/Member.html":{},"classes/Organization.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{}}}],["src/user/schemas/user.schema.ts",{"_index":1617,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/schemas/user.schema.ts:12",{"_index":1623,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:15",{"_index":1624,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:31",{"_index":1622,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:45",{"_index":1627,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:48",{"_index":1629,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:51",{"_index":1630,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:54",{"_index":1625,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":1669,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:23",{"_index":1672,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:29",{"_index":1671,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":1673,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":1674,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":1691,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.repository.ts",{"_index":1695,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.repository.ts:15",{"_index":1697,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/user.repository.ts:20",{"_index":1700,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/user.repository.ts:37",{"_index":1699,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/user/user.service",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/user/user.service.ts",{"_index":1704,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":1705,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":1709,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:27",{"_index":1708,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":1706,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:39",{"_index":1707,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:43",{"_index":1711,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":1710,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1843,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1846,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1848,"title":{},"body":{"index.html":{}}}],["started",{"_index":1825,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1836,"title":{},"body":{"index.html":{}}}],["state",{"_index":606,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/Organization.html":{}}}],["statements",{"_index":1727,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["status.enum",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["stay",{"_index":1869,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":829,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":39,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string).split",{"_index":1259,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["subdocuments",{"_index":1302,"title":{},"body":{"classes/Resource.html":{}}}],["subject",{"_index":920,"title":{},"body":{"injectables/MailService.html":{}}}],["subscription",{"_index":989,"title":{},"body":{"classes/Member.html":{},"injectables/MemberService.html":{}}}],["subscription.member",{"_index":990,"title":{},"body":{"classes/Member.html":{}}}],["subscriptionmodule",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["subscriptions",{"_index":991,"title":{},"body":{"classes/Member.html":{}}}],["subscriptionservice",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscriptionstatus",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscriptionstatus.pending",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":730,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{}}}],["summary",{"_index":1028,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":793,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Role.html":{}}}],["super(model",{"_index":1090,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["super(repo",{"_index":1110,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["super.canactivate(context",{"_index":820,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.catch(exception",{"_index":45,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["super.create(dto",{"_index":1191,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["support",{"_index":939,"title":{},"body":{"injectables/MailService.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":1880,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1803,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1764,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1763,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":760,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["team",{"_index":940,"title":{},"body":{"injectables/MailService.html":{}}}],["template",{"_index":715,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["templatename",{"_index":690,"title":{},"body":{"injectables/ElasticMailService.html":{},"injectables/MailService.html":{}}}],["templatesapi",{"_index":681,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["templatesapi(this.config",{"_index":713,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["termii",{"_index":1484,"title":{},"body":{"injectables/SmsService.html":{}}}],["termii.service",{"_index":1476,"title":{},"body":{"modules/SmsModule.html":{},"injectables/SmsService.html":{}}}],["termii_api_key",{"_index":1558,"title":{},"body":{"injectables/TermiiService.html":{}}}],["termii_url",{"_index":1523,"title":{},"body":{"injectables/TermiiService.html":{}}}],["termiirequestparams",{"_index":950,"title":{"classes/TermiiRequestParams.html":{}},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{},"coverage.html":{}}}],["termiisendsmsresponse",{"_index":1517,"title":{"interfaces/TermiiSendSmsResponse.html":{}},"body":{"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"coverage.html":{}}}],["termiiservice",{"_index":1473,"title":{"injectables/TermiiService.html":{}},"body":{"modules/SmsModule.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1851,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1854,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1853,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1850,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1860,"title":{},"body":{"index.html":{}}}],["themes",{"_index":1804,"title":{},"body":{"dependencies.html":{}}}],["then((organization",{"_index":803,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["then((perms",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.apikey",{"_index":1549,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.appservice.gethello",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createnewaccount(dto",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createorganization(req.tokendata.userid",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.finduserorganizations(dto",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logintoorganization(dto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.registermember(dto",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepersonaldetails(req.tokendata.userid",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatenewuserotp(request.user._id",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateotp(dto",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyemailorphone(dto",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.axios.post",{"_index":1567,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.checkifapikeyisset",{"_index":1563,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.clienturl",{"_index":936,"title":{},"body":{"injectables/MailService.html":{}}}],["this.clienturl}?token=${token",{"_index":938,"title":{},"body":{"injectables/MailService.html":{}}}],["this.configservice.get('client_url",{"_index":907,"title":{},"body":{"injectables/MailService.html":{}}}],["this.configservice.get('is_dev_server",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('mail_api_key",{"_index":705,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.configservice.get('mail_from",{"_index":709,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.configservice.get('salt_rounds",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MemberService.html":{}}}],["this.configservice.get('termii_api_key",{"_index":1539,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.constructor.findone",{"_index":1637,"title":{},"body":{"classes/User.html":{}}}],["this.create(dto",{"_index":1199,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/UserRepository.html":{}}}],["this.createnewaccount",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createtoken(dto.username",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.data",{"_index":1569,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.emailsapi.emailspost(data",{"_index":739,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.emailsapi.emailstransactionalpost(data",{"_index":722,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.findbyid(organizationid",{"_index":1196,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["this.firstname",{"_index":1651,"title":{},"body":{"classes/User.html":{}}}],["this.frommail",{"_index":735,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.getauthdata",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getauthdata(member",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isdevserver",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.decode",{"_index":812,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.jwtservice.sign(payload",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastname",{"_index":1652,"title":{},"body":{"classes/User.html":{}}}],["this.logger.error(error.message",{"_index":732,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.logger.log",{"_index":723,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.mailerservice.send",{"_index":918,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendverificationcode",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailservice.welcomeregisteredorganization(user",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.membercommonfieldservice.createmany(bulkdto",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memberservice.createone",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memberservice.findbyid(member._id",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memberservice.findbyid(memberid",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memberservice.findbyid(user._id",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memberservice.repo.findone",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.membershipplanservice.findone",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.model",{"_index":1456,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["this.model(dto",{"_index":1461,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["this.model.find(options).exec",{"_index":1455,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["this.model.findbyidandremove(id",{"_index":1464,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["this.model.findbyidandupdate(id",{"_index":1463,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["this.model.findone",{"_index":1201,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["this.model.findoneandupdate",{"_index":1197,"title":{},"body":{"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{}}}],["this.model.findoneandupdate(query",{"_index":1702,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.moduleref.resolve(authservice",{"_index":868,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.organizationid",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.organizationservice",{"_index":801,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.organizationservice.createone",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.organizationservice.createone(dto",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.organizationservice.findbysitename",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.populateonfind",{"_index":1458,"title":{},"body":{"injectables/SharedRepository.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":795,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.reflector.getallandoverride(user_without_organization",{"_index":817,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.repo.create(dto",{"_index":1113,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{}}}],["this.repo.delete(id",{"_index":1117,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["this.repo.find",{"_index":1114,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["this.repo.findbyid(id",{"_index":1115,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["this.repo.findbysitename(username",{"_index":1213,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["this.repo.findbyslug(slug",{"_index":1376,"title":{},"body":{"injectables/ResourceService.html":{},"injectables/RoleService.html":{}}}],["this.repo.findbyusername(username",{"_index":1713,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repo.findone",{"_index":1440,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.repo.findorcreate(dto",{"_index":1375,"title":{},"body":{"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["this.repo.update(id",{"_index":1116,"title":{},"body":{"injectables/MemberService.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["this.request",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers[organization_api_header",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.tokendata.organizationid",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.roleservice.getdefaultadminrole",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":1112,"title":{},"body":{"injectables/MemberService.html":{}}}],["this.sendbulkmail(emailmessagedata",{"_index":740,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.sendmail(emaildata",{"_index":738,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.sendsmsfromrandomnumber(to",{"_index":1564,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.service.createone(dto",{"_index":1030,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{}}}],["this.service.findall",{"_index":1031,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["this.service.findall(filter",{"_index":1680,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.findbyid(id",{"_index":1034,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.service.findbyslug(slug",{"_index":1331,"title":{},"body":{"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["this.service.findorcreate(createuserdto",{"_index":1681,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.findorcreate(dto",{"_index":1328,"title":{},"body":{"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["this.service.remove(id",{"_index":1042,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.service.update(id",{"_index":1037,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{}}}],["this.service.updatepassword(id",{"_index":1039,"title":{},"body":{"controllers/MemberController.html":{}}}],["this.setowner(dto.owner",{"_index":1192,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["this.smsservice.sendotp(dto.username",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.smsservice.verifyotp(user.phone",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.subscriptionservice.createone",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.templatesapi.templatesbynameget(templatename",{"_index":741,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["this.termii.sendotp(phone.replace",{"_index":1498,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.termii.sendsms",{"_index":1495,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.termii.verifyotp(phone.replace",{"_index":1497,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.termii_url",{"_index":1543,"title":{},"body":{"injectables/TermiiService.html":{}}}],["this.tokenrepo.create",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenrepo.findone",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findoneandupdate",{"_index":1193,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["this.userservice.findbyid(userid",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyusername(dto.username",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findorcreate",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findorcreateuserbyusername(dto.username",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyusername(payload.username",{"_index":840,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.update(id",{"_index":1685,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateone(user.id",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["throwerror",{"_index":1208,"title":{},"body":{"injectables/OrganizationService.html":{},"injectables/ResourceService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["timestamps",{"_index":1305,"title":{},"body":{"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/Token.html":{}}}],["to.decorator",{"_index":579,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/UpdateMemberPasswordDto.html":{}}}],["to.decorator.ts",{"_index":1755,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["todo",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":251,"title":{"classes/Token.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTokenDto.html":{},"injectables/MailService.html":{},"classes/Token.html":{},"injectables/TokenRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.dto",{"_index":1593,"title":{},"body":{"injectables/TokenRepository.html":{}}}],["token.dto.ts",{"_index":660,"title":{},"body":{"classes/CreateTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:2",{"_index":662,"title":{},"body":{"classes/CreateTokenDto.html":{}}}],["token.dto.ts:3",{"_index":661,"title":{},"body":{"classes/CreateTokenDto.html":{}}}],["token.name",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.remove",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.repository",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["token.toobject().token",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokendata",{"_index":363,"title":{"classes/TokenData.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/TokenData.html":{},"interfaces/TokenRequest.html":{},"coverage.html":{}}}],["tokenrepo",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenrepository",{"_index":232,"title":{"injectables/TokenRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TokenRepository.html":{},"coverage.html":{},"overview.html":{}}}],["tokenrequest",{"_index":127,"title":{"interfaces/TokenRequest.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/TokenRequest.html":{},"coverage.html":{}}}],["tokenschema",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tostring",{"_index":966,"title":{},"body":{"interfaces/Media.html":{},"classes/TermiiRequestParams.html":{},"injectables/TermiiService.html":{}}}],["touch",{"_index":1870,"title":{},"body":{"index.html":{}}}],["transactionid",{"_index":726,"title":{},"body":{"injectables/ElasticMailService.html":{}}}],["transformer",{"_index":1615,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["true",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Member.html":{},"classes/Organization.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/Resource.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/Token.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"injectables/TermiiService.html":{},"classes/User.html":{}}}],["ts",{"_index":718,"title":{},"body":{"injectables/ElasticMailService.html":{},"dependencies.html":{}}}],["twitter",{"_index":1876,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AllErrorFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/ElasticMailService.html":{},"classes/FindUserOrganization.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"interfaces/Media.html":{},"classes/Member.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"classes/QueryErrorFilter.html":{},"classes/RegisterMember.html":{},"classes/Resource.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"classes/ResourceRole.html":{},"injectables/ResourceService.html":{},"classes/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"classes/SharedService.html":{},"injectables/SmsService.html":{},"classes/TermiiRequestParams.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TermiiService.html":{},"classes/Token.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/UpdateMemberDto.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":38,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{}}}],["types/bcrypt",{"_index":1779,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["ui",{"_index":1806,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":975,"title":{},"body":{"classes/Member.html":{},"classes/Organization.html":{},"interfaces/PaginateQuery.html":{},"classes/Resource.html":{},"classes/ResourceRole.html":{},"classes/Role.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":1137,"title":{},"body":{"classes/Organization.html":{}}}],["unique.decorator",{"_index":627,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["unique.decorator.ts",{"_index":751,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["unit",{"_index":1849,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"interfaces/PaginateQuery.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1889,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":1036,"title":{},"body":{"controllers/MemberController.html":{},"controllers/OrganizationController.html":{},"controllers/ResourceController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":1012,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["updatedto",{"_index":1082,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["updatememberdto",{"_index":1013,"title":{"classes/UpdateMemberDto.html":{}},"body":{"controllers/MemberController.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"classes/UpdateMemberDto.html":{},"coverage.html":{}}}],["updatememberpassworddto",{"_index":1017,"title":{"classes/UpdateMemberPasswordDto.html":{}},"body":{"controllers/MemberController.html":{},"injectables/MemberService.html":{},"classes/UpdateMemberPasswordDto.html":{},"coverage.html":{}}}],["updateorganizationdto",{"_index":1157,"title":{"classes/UpdateOrganizationDto.html":{}},"body":{"controllers/OrganizationController.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["updatepassword",{"_index":998,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberService.html":{}}}],["updatepassword(id",{"_index":1016,"title":{},"body":{"controllers/MemberController.html":{},"injectables/MemberService.html":{}}}],["updatepersonaldetails",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepersonaldetails(userid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateresourcedto",{"_index":1321,"title":{"classes/UpdateResourceDto.html":{}},"body":{"controllers/ResourceController.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"classes/UpdateResourceDto.html":{},"coverage.html":{}}}],["updateroledto",{"_index":1408,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RoleController.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":204,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upsert",{"_index":1058,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["upsert(id",{"_index":1084,"title":{},"body":{"injectables/MemberRepository.html":{},"injectables/OrganizationRepository.html":{},"injectables/ResourceRepository.html":{},"injectables/RoleRepository.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{}}}],["uri",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":937,"title":{},"body":{"injectables/MailService.html":{},"interfaces/Media.html":{},"interfaces/PaginateQuery.html":{},"classes/TermiiRequestParams.html":{},"miscellaneous/variables.html":{}}}],["url(originalurl",{"_index":1250,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["urlparts",{"_index":1249,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["urlparts.host",{"_index":1252,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["urlparts.pathname",{"_index":1253,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["urlparts.protocol",{"_index":1251,"title":{},"body":{"interfaces/PaginateQuery.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["used",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{}}}],["usefactory",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":147,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMemberDto.html":{},"classes/FindUserOrganization.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/Member.html":{},"injectables/MemberService.html":{},"classes/Organization.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"classes/Role.html":{},"interfaces/TermiiSendSmsResponse.html":{},"injectables/TokenRepository.html":{},"interfaces/TokenRequest.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1647,"title":{},"body":{"classes/User.html":{}}}],["user._id",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":1692,"title":{},"body":{"modules/UserModule.html":{}}}],["user.created",{"_index":1682,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:13",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":1613,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["user.firstname",{"_index":926,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.name",{"_index":1173,"title":{},"body":{"modules/OrganizationModule.html":{},"modules/UserModule.html":{}}}],["user.phone",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.repository",{"_index":1693,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.save",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":1676,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.toobject",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.verifiedemail",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.verifiedphone",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/schemas/user.schema",{"_index":911,"title":{},"body":{"injectables/MailService.html":{}}}],["user/user.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["user_without_organization",{"_index":789,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1668,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdocument",{"_index":1631,"title":{},"body":{"classes/User.html":{}}}],["userid",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TokenData.html":{},"injectables/TokenRepository.html":{}}}],["usermodel",{"_index":1178,"title":{},"body":{"injectables/OrganizationRepository.html":{}}}],["usermodule",{"_index":72,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindUserOrganization.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/OrganizationService.html":{},"classes/RegisterMember.html":{},"classes/TokenData.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["username.decorator",{"_index":747,"title":{},"body":{"classes/FindUserOrganization.html":{},"classes/RegisterMember.html":{},"classes/VerifyEmailDto.html":{},"classes/VerifyOtpDto.html":{}}}],["username.decorator.ts",{"_index":1757,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["usernamefield",{"_index":861,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":1690,"title":{"injectables/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["users",{"_index":1392,"title":{},"body":{"classes/Role.html":{},"controllers/UserController.html":{}}}],["userschema",{"_index":1172,"title":{},"body":{"modules/OrganizationModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.post('save",{"_index":1653,"title":{},"body":{"classes/User.html":{}}}],["userschema.virtual('name').get(function",{"_index":1649,"title":{},"body":{"classes/User.html":{}}}],["userservice",{"_index":298,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithoutorganization",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":1636,"title":{},"body":{"classes/User.html":{}}}],["validate",{"_index":822,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{}}}],["validate(payload",{"_index":825,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":856,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(value",{"_index":764,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{}}}],["validatemember",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatemember(dto",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenewuserotp",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["validatenewuserotp(memberid",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenewuserotp(request",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateotp",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["validateotp(@body",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateotp(dto",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["validationoptions",{"_index":754,"title":{},"body":{"interfaces/IDoesNotExistParams.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateMemberDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateOrganizationPasswordDto.html":{},"classes/CreateResourceDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IDoesNotExistParams.html":{},"classes/InviteMemberDto.html":{},"classes/RegisterMember.html":{},"injectables/SmsService.html":{},"injectables/TokenRepository.html":{},"classes/UpdateMemberPasswordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["value",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ElasticMailService.html":{},"interfaces/IDoesNotExistParams.html":{},"injectables/MailService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TermiiService.html":{},"injectables/TokenRepository.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1729,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1890,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["verification",{"_index":928,"title":{},"body":{"injectables/MailService.html":{},"injectables/UserService.html":{}}}],["verified",{"_index":1611,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["verifiedemail",{"_index":1619,"title":{},"body":{"classes/User.html":{}}}],["verifiedphone",{"_index":1620,"title":{},"body":{"classes/User.html":{}}}],["verifyemaildto",{"_index":155,"title":{"classes/VerifyEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyEmailDto.html":{},"coverage.html":{}}}],["verifyemailorphone",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyemailorphone(@body",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemailorphone(dto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyotp",{"_index":1481,"title":{},"body":{"injectables/SmsService.html":{},"injectables/TermiiService.html":{},"injectables/UserService.html":{}}}],["verifyotp(phone",{"_index":1491,"title":{},"body":{"injectables/SmsService.html":{}}}],["verifyotp(pin_id",{"_index":1537,"title":{},"body":{"injectables/TermiiService.html":{}}}],["verifyotpdto",{"_index":145,"title":{"classes/VerifyOtpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["verifyyouremail",{"_index":1813,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":1887,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1717,"title":{},"body":{"injectables/UserService.html":{}}}],["virtual",{"_index":1646,"title":{},"body":{"classes/User.html":{}}}],["visit",{"_index":1560,"title":{},"body":{"injectables/TermiiService.html":{}}}],["void",{"_index":26,"title":{},"body":{"classes/AllErrorFilter.html":{},"classes/QueryErrorFilter.html":{},"injectables/TermiiService.html":{}}}],["want",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["watch",{"_index":1844,"title":{},"body":{"index.html":{}}}],["website",{"_index":1874,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/SmsService.html":{}}}],["welcomeregisteredorganization",{"_index":891,"title":{},"body":{"injectables/MailService.html":{}}}],["welcomeregisteredorganization(user",{"_index":905,"title":{},"body":{"injectables/MailService.html":{}}}],["welcometogembrs",{"_index":1812,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["whatsapp",{"_index":1531,"title":{},"body":{"injectables/TermiiService.html":{}}}],["without",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MemberService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["workaround",{"_index":844,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["world",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MemberRepository.html":{},"injectables/MemberService.html":{},"injectables/OrganizationRepository.html":{},"injectables/OrganizationService.html":{},"injectables/ResourceRepository.html":{},"injectables/ResourceService.html":{},"injectables/RoleRepository.html":{},"injectables/RoleService.html":{},"injectables/SharedRepository.html":{},"injectables/TokenRepository.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1864,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":922,"title":{},"body":{"injectables/MailService.html":{}}}],["z]+:/i.exec(error.message)[0].replace",{"_index":1662,"title":{},"body":{"classes/User.html":{}}}],["za",{"_index":1661,"title":{},"body":{"classes/User.html":{}}}],["zoom",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MemberModule.html":{},"modules/OrganizationModule.html":{},"modules/ResourceModule.html":{},"modules/RoleModule.html":{},"modules/SmsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllErrorFilter.html":{"url":"classes/AllErrorFilter.html","title":"class - AllErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filters/all-error.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                    \n                    catch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filters/all-error.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost, BadRequestException } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { DuplicateFieldError } from '../errors/duplicate-field.error';\n\n@Catch()\nexport class AllErrorFilter extends BaseExceptionFilter {\n  public catch(exception: any, host: ArgumentsHost): void {\n    const detail = exception.message;\n    if (typeof detail === 'string' && detail.includes('already exists.')) {\n      exception = new BadRequestException(detail);\n    }\n    return super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMemberModule\n\nMemberModule\n\nAppModule -->\n\nMemberModule->AppModule\n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nAppModule -->\n\nOrganizationModule->AppModule\n\n\n\n\n\nResourceModule\n\nResourceModule\n\nAppModule -->\n\nResourceModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MemberModule\n                        \n                        \n                            OrganizationModule\n                        \n                        \n                            ResourceModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserModule } from './user/user.module';\nimport { MemberModule } from './member/member.module';\nimport { OrganizationModule } from './organization/organization.module';\nimport { RoleModule } from './role/role.module';\nimport { ResourceModule } from './resource/resource.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './config/configuration';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n      isGlobal: true,\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URI'),\n      }),\n      inject: [ConfigService],\n    }),\n    UserModule,\n    MemberModule,\n    OrganizationModule,\n    RoleModule,\n    ResourceModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewAccount\n                            \n                            \n                                currentOrganization\n                            \n                            \n                                findUserOrganizations\n                            \n                            \n                                login\n                            \n                            \n                                me\n                            \n                            \n                                validateNewUserOTP\n                            \n                            \n                                validateOTP\n                            \n                            \n                                verifyEmailOrPhone\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createNewAccount\n                        \n                    \n                \n            \n            \n                \ncreateNewAccount(dto: CreateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('create-account')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentOrganization\n                        \n                    \n                \n            \n            \n                \ncurrentOrganization(req: TokenRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('current-organization')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                TokenRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findUserOrganizations\n                        \n                    \n                \n            \n            \n                \nfindUserOrganizations(req: TokenRequest, dto: FindUserOrganization)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AllowUserWithoutOrganization()@Post('find-organizations')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                TokenRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                FindUserOrganization\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OrganizationApi()@UseGuards(LocalAuthGuard)@Public()@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        me\n                        \n                    \n                \n            \n            \n                \nme(req: TokenRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AllowUserWithoutOrganization()@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                TokenRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateNewUserOTP\n                        \n                    \n                \n            \n            \n                \nvalidateNewUserOTP(request: TokenRequest, dto: VerifyOtpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('validate-new-user')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                TokenRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                VerifyOtpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateOTP\n                        \n                    \n                \n            \n            \n                \nvalidateOTP(dto: VerifyOtpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('validate-otp')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                VerifyOtpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyEmailOrPhone\n                        \n                    \n                \n            \n            \n                \nverifyEmailOrPhone(dto: VerifyEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('verify-email-or-phone')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                VerifyEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Request,\n  UseGuards,\n  Get,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { VerifyEmailDto } from './dto/verify-email.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AllowUserWithoutOrganization } from './decorators/allow-user-without-organization.decorator';\nimport { FindUserOrganization } from './dto/find-user-organization..dto';\nimport { Public } from './decorators/public.decorator';\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\nimport { TokenRequest } from './interfaces/token-request.interface';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { OrganizationApi } from './decorators/organization-api.decorator';\nimport { CreateAccountDto } from './dto/create-account.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @AllowUserWithoutOrganization()\n  @Get('me')\n  me(@Request() req: TokenRequest) {\n    return req.user;\n  }\n\n  @Get('current-organization')\n  currentOrganization(@Request() req: TokenRequest) {\n    return req.user.organization;\n  }\n\n  @Public()\n  @Post('verify-email-or-phone')\n  verifyEmailOrPhone(@Body() dto: VerifyEmailDto) {\n    return this.authService.verifyEmailOrPhone(dto);\n  }\n\n  @Public()\n  @Post('validate-otp')\n  validateOTP(@Body() dto: VerifyOtpDto) {\n    return this.authService.validateOTP(dto);\n  }\n\n  // @AllowUserWithoutOrganization()\n  // @Post('update-personal-details')\n  // updatePersonalDetails(\n  //   @Request() req: TokenRequest,\n  //   @Body() dto: UpdateUserDto,\n  // ) {\n  //   return this.authService.updatePersonalDetails(req.tokenData.userId, dto);\n  // }\n\n  // @AllowUserWithoutOrganization()\n  // @Post('create-organization')\n  // createOrganization(\n  //   @Request() req: TokenRequest,\n  //   @Body() dto: CreateOrganizationPasswordDto,\n  // ) {\n  //   return this.authService.createOrganization(req.tokenData.userId, dto);\n  // }\n\n  @OrganizationApi()\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @Post('login')\n  login(@Body() dto: LoginDto) {\n    return this.authService.loginToOrganization(dto);\n  }\n\n  @AllowUserWithoutOrganization()\n  @Post('find-organizations')\n  findUserOrganizations(\n    @Request() req: TokenRequest,\n    @Body() dto: FindUserOrganization,\n  ) {\n    return this.authService.findUserOrganizations(dto);\n  }\n\n  @Public()\n  @Post('create-account')\n  createNewAccount(@Body() dto: CreateAccountDto) {\n    return this.authService.createNewAccount(dto);\n  }\n\n  @Post('validate-new-user')\n  validateNewUserOTP(\n    @Request() request: TokenRequest,\n    @Body() dto: VerifyOtpDto,\n  ) {\n    return this.authService.validateNewUserOTP(request.user._id, dto);\n  }\n\n  // @Public()\n  // @OrganizationApi()\n  // @Post('register-member')\n  // registerMember(@Body() dto: RegisterMember) {\n  //   return this.authService.registerMember(dto);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nMemberModule\n\nMemberModule\n\nAuthModule -->\n\nMemberModule->AuthModule\n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nAuthModule -->\n\nOrganizationModule->AuthModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthModule -->\n\nRoleModule->AuthModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthModule -->\n\nSmsModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nLocalStrategy \n\nLocalStrategy \n\nLocalStrategy  -->\n\nAuthModule->LocalStrategy \n\n\n\n\n\nTokenRepository \n\nTokenRepository \n\nTokenRepository  -->\n\nAuthModule->TokenRepository \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTokenRepository\n\nTokenRepository\n\nAuthModule -->\n\nTokenRepository->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TokenRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            MemberModule\n                        \n                        \n                            OrganizationModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TokenRepository\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MailModule } from 'src/mail/mail.module';\nimport { OrganizationModule } from 'src/organization/organization.module';\nimport { UserModule } from 'src/user/user.module';\nimport { MemberModule } from 'src/member/member.module';\nimport { jwtConstants } from './constants';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { RoleModule } from 'src/role/role.module';\nimport { SmsModule } from 'src/sms/sms.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TokenRepository } from './token.repository';\nimport { Token, TokenSchema } from './schemas/token.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n// import { MemberCommonFieldModule } from 'src/member-common-field/member-common-field.module';\n// import { MembershipPlanModule } from 'src/membership-plan/membership-plan.module';\n// import { SubscriptionModule } from 'src/subscription/subscription.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Token.name, schema: TokenSchema }]),\n    ConfigModule,\n    MailModule,\n    SmsModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60d' },\n    }),\n    PassportModule.register({ defaultStrategy: 'Bearer' }),\n    UserModule,\n    RoleModule,\n    OrganizationModule,\n    MemberModule,\n    // MemberCommonFieldModule,\n    // MembershipPlanModule,\n    // SubscriptionModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, LocalStrategy, TokenRepository],\n  exports: [\n    AuthService,\n    JwtModule,\n    JwtStrategy,\n    LocalStrategy,\n    TokenRepository,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isDevServer\n                            \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptOrganizationInvite\n                            \n                            \n                                    Async\n                                createNewAccount\n                            \n                            \n                                    Async\n                                createOrganization\n                            \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                findUserOrganizations\n                            \n                            \n                                    Async\n                                getAuthData\n                            \n                            \n                                    Async\n                                initForgotMemberPassword\n                            \n                            \n                                    Async\n                                loginToOrganization\n                            \n                            \n                                    Async\n                                registerMember\n                            \n                            \n                                    Async\n                                resetMemberPassword\n                            \n                            \n                                    Async\n                                updatePersonalDetails\n                            \n                            \n                                    Async\n                                validateMember\n                            \n                            \n                                    Async\n                                validateNewUserOTP\n                            \n                            \n                                    Async\n                                validateOTP\n                            \n                            \n                                    Async\n                                verifyEmailOrPhone\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    organizationSlug\n                                \n                                \n                                    organizationId\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: TokenRequest, tokenRepo: TokenRepository, mailService: MailService, smsService: SmsService, jwtService: JwtService, configService: ConfigService, userService: UserService, roleService: RoleService, organizationService: OrganizationService, memberService: MemberService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        TokenRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokenRepo\n                                                  \n                                                        \n                                                                        TokenRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        smsService\n                                                  \n                                                        \n                                                                        SmsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RoleService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        organizationService\n                                                  \n                                                        \n                                                                        OrganizationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        memberService\n                                                  \n                                                        \n                                                                        MemberService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptOrganizationInvite\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptOrganizationInvite()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewAccount(dto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOrganization\n                        \n                    \n                \n            \n            \n                \n                    use this.createNewAccount instead\n                \n            \n            \n                \n                    \n                    createOrganization(userId: string, dto: CreateOrganizationPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateOrganizationPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(identifier: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    identifier\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserOrganizations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserOrganizations(dto: FindUserOrganization)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                FindUserOrganization\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuthData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthData(member: Member, dto?: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                                Member\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initForgotMemberPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    initForgotMemberPassword()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:284\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginToOrganization\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginToOrganization(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerMember(dto: RegisterMember)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:296\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                RegisterMember\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetMemberPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetMemberPassword()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:288\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePersonalDetails\n                        \n                    \n                \n            \n            \n                \n                    use this.createNewAccount instead\n                \n            \n            \n                \n                    \n                    updatePersonalDetails(userId: ObjectId | string, dto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateMember(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateNewUserOTP\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateNewUserOTP(memberId: string, dto: VerifyOtpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                VerifyOtpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateOTP\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateOTP(dto: VerifyOtpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                VerifyOtpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyEmailOrPhone\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmailOrPhone(dto: VerifyEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                VerifyEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isDevServer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : this.configService.get('IS_DEV_SERVER')\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Default value : +this.configService.get('SALT_ROUNDS')\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:45\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        organizationSlug\n                    \n                \n\n                \n                    \n                        getorganizationSlug()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/auth.service.ts:61\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        organizationId\n                    \n                \n\n                \n                    \n                        getorganizationId()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/auth.service.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Scope,\n  Inject,\n  UnauthorizedException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { UpdateUserDto } from 'src/user/dto/update-user.dto';\nimport { User } from 'src/user/schemas/user.schema';\nimport { VerifyEmailDto } from './dto/verify-email.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { isEmail } from 'class-validator';\nimport * as bcrypt from 'bcrypt';\nimport { Member } from 'src/member/schemas/member.schema';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from 'src/user/user.service';\nimport { OrganizationService } from 'src/organization/organization.service';\nimport { FindUserOrganization } from './dto/find-user-organization..dto';\nimport { MemberService } from 'src/member/member.service';\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\nimport { CreateOrganizationPasswordDto } from './dto/create-organization-password.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { ORGANIZATION_API_HEADER } from './decorators/organization-api.decorator';\nimport { RoleService } from 'src/role/role.service';\nimport { TokenData } from './dto/token-data.dto';\nimport { TokenRequest } from './interfaces/token-request.interface';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { MailService } from 'src/mail/mail.service';\nimport { SmsService } from 'src/sms/sms.service';\n// import { MemberCommonField } from 'src/member-common-field/schemas/member-common-field.schema';\n// import { MemberCommonFieldService } from 'src/member-common-field/member-common-field.service';\n// import { MembershipPlanService } from 'src/membership-plan/membership-plan.service';\n// import { RegisterMember } from './dto/register-member.dto';\n// import { SubscriptionService } from 'src/subscription/subscription.service';\n// import { SubscriptionStatus } from 'src/subscription/enums/subscription-status.enum';\n// import { PlanRenewalDuration } from 'src/membership-plan/enums/plan-renewal-duration';\nimport { DateTime, Duration } from 'luxon';\nimport { ObjectId } from 'mongoose';\nimport { RegisterMember } from './dto/register-member.dto';\nimport { TokenRepository } from './token.repository';\n@Injectable({ scope: Scope.REQUEST })\nexport class AuthService {\n  private readonly saltRounds = +this.configService.get('SALT_ROUNDS');\n  private readonly isDevServer: string =\n    this.configService.get('IS_DEV_SERVER');\n  constructor(\n    @Inject(REQUEST) private request: TokenRequest,\n    private tokenRepo: TokenRepository,\n    private mailService: MailService,\n    private smsService: SmsService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private userService: UserService,\n    private roleService: RoleService,\n    private organizationService: OrganizationService,\n    private memberService: MemberService, // public memberCommonFieldService: MemberCommonFieldService, // public membershipPlanService: MembershipPlanService, // public subscriptionService: SubscriptionService,\n  ) {}\n\n  get organizationSlug() {\n    return this.request.headers[ORGANIZATION_API_HEADER];\n  }\n\n  get organizationId() {\n    return this.request.tokenData.organizationId;\n  }\n\n  async verifyEmailOrPhone(dto: VerifyEmailDto) {\n    // const user = await this.userService.findOrCreate(\n    //   isEmail(dto.username) ? { email: dto.username } : { phone: dto.username },\n    // );\n    if (!(this.isDevServer == 'true')) {\n      if (isEmail(dto.username)) {\n        const code = Math.floor(100000 + Math.random() * 900000);\n        const token = await this.createToken(dto.username, code.toString());\n        await this.mailService.sendVerificationCode(\n          dto.username,\n          token.toObject().token,\n        );\n      } else {\n        await this.smsService.sendOTP(dto.username);\n      }\n    }\n    return { message: 'otp sent to user' };\n  }\n\n  async createToken(identifier: string, code: string) {\n    const token = await this.tokenRepo.findOne({ identifier });\n    if (token) {\n      await token.remove();\n    }\n    return this.tokenRepo.create({\n      token: code.toString(),\n      identifier: identifier,\n    });\n  }\n\n  async validateOTP(dto: VerifyOtpDto) {\n    const user = await this.userService.findByUsername(dto.username);\n    // if (!(this.isDevServer == 'true')) {\n    if (isEmail(dto.username)) {\n      const token = await this.tokenRepo.findOne({\n        where: { token: dto.otp.toString(), userId: user.id },\n      });\n      if (!token) {\n        throw new BadRequestException(\n          `The one time password (OTP) you entered is invalid`,\n        );\n      }\n      await token.remove();\n      user.verifiedEmail = true;\n    } else {\n      this.smsService.verifyOTP(user.phone, dto.otp.toString());\n      user.verifiedPhone = true;\n    }\n    // }\n    await user.save();\n    const payload = {\n      username: user.email || user.phone,\n      userId: user.id,\n    };\n    // this access token will be used to access only 4 routes\n    // update personal details, create organization, and find User Organizations, create new account\n    return {\n      accessToken: this.jwtService.sign(payload, { expiresIn: '24h' }),\n      user: user,\n    };\n  }\n\n  /** @deprecated use this.createNewAccount instead */\n  async updatePersonalDetails(userId: ObjectId | string, dto: UpdateUserDto) {\n    // TODO: send a welcome Email to user\n    return this.userService.update(userId, dto);\n  }\n\n  /** @deprecated use this.createNewAccount instead */\n  async createOrganization(userId: string, dto: CreateOrganizationPasswordDto) {\n    dto.owner = userId;\n    const user = await this.userService.findById(userId);\n    const organization = await this.organizationService.createOne(dto);\n    const role = await this.roleService.getDefaultAdminRole();\n    const member = await this.memberService.createOne({\n      organization: organization._id,\n      user: userId,\n      role: role._id,\n      password: dto.password,\n      officeTitle: dto.officeTitle,\n    });\n    const _member = member.toObject();\n    delete _member.password;\n    this.mailService.welcomeRegisteredOrganization(user, organization);\n    return { ..._member, organization, user, role };\n  }\n\n  async validateMember(dto: LoginDto) {\n    const user: User = await this.userService.findByUsername(dto.username);\n    const organizationSlug = this.request.headers[\n      ORGANIZATION_API_HEADER\n    ] as string;\n    if (!organizationSlug) {\n      throw new BadRequestException(\n        'Please specify the organization you want to login to',\n      );\n    }\n\n    const organization = await this.organizationService.findBySiteName(\n      organizationSlug,\n    );\n    if (!organization) {\n      throw new NotFoundException(\n        `We do not have an organization with the site name \"${organizationSlug}\"`,\n      );\n    }\n\n    const member = await (\n      await this.memberService.repo.findOne({\n        user: user._id,\n        organization: organization._id,\n      })\n    ).populate(['organization', 'user', 'role']);\n    if (!member) {\n      throw new UnauthorizedException(\n        `You are not a member of this organization, try joining the organization first.`,\n      );\n    }\n\n    const passwordMatch = await bcrypt.compare(dto.password, member.password);\n    if (passwordMatch) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = member;\n      return result;\n    }\n    return member;\n  }\n\n  async loginToOrganization(dto: LoginDto) {\n    const Member = (this.request as any).user;\n    return this.getAuthData(Member, dto);\n  }\n\n  async getAuthData(member: Member, dto?: LoginDto) {\n    const payload: TokenData = {\n      username: dto?.username || member.user.email || member.user.phone,\n      memberId: member._id,\n      organizationId: member.organization._id,\n      userId: member.user._id,\n      roleId: member.role._id,\n    };\n    return {\n      accessToken: this.jwtService.sign(payload),\n      user: member,\n    };\n  }\n\n  async findUserOrganizations(dto: FindUserOrganization) {\n    const user = await this.userService.findByUsername(dto.username);\n\n    const member = await (\n      await this.memberService.findById(user._id)\n    ).populate('organization');\n    return member.organization;\n  }\n\n  async createNewAccount(dto: CreateAccountDto) {\n    const user = (\n      await this.userService.findOrCreate({\n        email: dto.email,\n        firstName: dto.firstName,\n        lastName: dto.lastName,\n        phone: dto.phone,\n      })\n    ).user.toObject();\n    const organization = await this.organizationService.createOne({\n      // contactEmail: user.email,\n      name: dto.organizationName,\n      siteName: dto.organizationSiteName,\n      // contactPhone: user.phone,\n    });\n    const role = await this.roleService.getDefaultAdminRole();\n    const member = await this.memberService.createOne({\n      organization: organization._id,\n      user: user._id,\n      role: role._id,\n      password: dto.password,\n      officeTitle: dto.officeTitle,\n      // contactPhone: user.phone,\n    });\n    this.mailService.welcomeRegisteredOrganization(user, organization);\n    return this.getAuthData(\n      await (\n        await this.memberService.findById(member._id)\n      ).populate(['organization', 'user', 'role']),\n    );\n  }\n\n  async validateNewUserOTP(memberId: string, dto: VerifyOtpDto) {\n    const user = await this.userService.findByUsername(dto.username);\n    // if (!(this.isDevServer == 'true')) {\n    if (isEmail(dto.username)) {\n      const token = await this.tokenRepo.findOne({\n        where: { token: dto.otp.toString(), userId: user.id },\n      });\n      if (!token) {\n        throw new BadRequestException(\n          `The one time password (OTP) you entered is invalid`,\n        );\n      }\n      await token.remove();\n      user.verifiedEmail = true;\n    } else {\n      this.smsService.verifyOTP(user.phone, dto.otp.toString());\n      user.verifiedPhone = true;\n    }\n    // }\n    await user.save();\n    return this.getAuthData(\n      await (\n        await this.memberService.findById(memberId)\n      ).populate(['organization', 'user', 'role']),\n    );\n  }\n\n  async initForgotMemberPassword() {\n    //\n  }\n\n  async resetMemberPassword() {\n    //\n  }\n\n  async acceptOrganizationInvite() {\n    //\n  }\n\n  async registerMember(dto: RegisterMember) {\n    /*\n    const membershipPlan = await this.membershipPlanService.findOne(\n      dto.membershipPlanId,\n    );\n    if (!membershipPlan) {\n      throw new BadRequestException('Membership level not found');\n    }\n\n    let user = await this.userService.findOrCreateUserByUsername(dto.username);\n    user = await this.userService.updateOne(user.id, {\n      firstName: dto.firstName,\n      lastName: dto.lastName,\n    });\n\n    const Member = await this.MemberService.createOne(\n      new Member({\n        userId: user.id,\n        organizationId: this.organizationId,\n        password: dto.password, // password is hashed in this method.\n      }),\n    );\n\n    // save all fields that are not default fields\n    const bulkDto: MemberCommonField[] = dto.commonFields.map(\n      (commonField) =>\n        new MemberCommonField({\n          ...commonField,\n          memberId: Member.id,\n          organizationId: this.organizationId,\n        }),\n    );\n\n    await this.memberCommonFieldService.createMany(bulkDto);\n\n    const currentDt = DateTime.now();\n    const endDt = currentDt.plus(\n      Duration.fromObject({\n        [membershipPlan.renewalDuration]: membershipPlan.renewalDurationCount,\n      }),\n    );\n\n    this.subscriptionService.createOne({\n      organizationId: this.organizationId,\n      memberId: Member.id,\n      membershipPlanId: membershipPlan.id,\n      status: SubscriptionStatus.Pending,\n      currentPeriodStart: currentDt.toJSDate(),\n      currentPeriodEnd: endDt.toJSDate(),\n      cancelAtPeriodEnd: true,\n      defaultPaymentMethod: membershipPlan.paymentMethod,\n    });\n\n    await Member.reload();\n    return Member;\n    */\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-account.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                officeTitle\n                            \n                            \n                                organizationName\n                            \n                            \n                                organizationSiteName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)@MaxLength(20)@IsEqualTo('password')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        officeTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organizationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organizationSiteName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsSlug()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPhoneNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-account.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  MinLength,\n  MaxLength,\n  IsString,\n  IsOptional,\n  IsEmail,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { IsSlug } from 'src/shared/decorators/is-slug.decorator';\nimport { IsEqualTo } from 'src/shared/decorators/is-equal-to.decorator';\n\nexport class CreateAccountDto {\n  @IsString()\n  firstName: string;\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsPhoneNumber()\n  phone: string;\n\n  @IsString()\n  organizationName: string;\n  @IsSlug()\n  organizationSiteName: string;\n\n  @MinLength(6)\n  @MaxLength(20)\n  password: string;\n\n  @MinLength(6)\n  @MaxLength(20)\n  @IsEqualTo('password')\n  confirmPassword: string;\n\n  @IsString()\n  officeTitle: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMemberDto.html":{"url":"classes/CreateMemberDto.html","title":"class - CreateMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/dto/create-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                contactPhone\n                            \n                            \n                                    Optional\n                                officeTitle\n                            \n                            \n                                organization\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        officeTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/member/dto/create-member.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPhoneNumber, IsString } from 'class-validator';\n\nexport class CreateMemberDto {\n  user: string;\n\n  organization: string;\n\n  role: string;\n\n  @IsString()\n  bio?: string;\n\n  @IsPhoneNumber()\n  @IsOptional()\n  contactPhone?: string;\n\n  @IsString()\n  @IsOptional()\n  officeTitle?: string;\n\n  @IsString()\n  password?: string;\n\n  // @IsOptional()\n  // commonFields?: CreateMemberCommonFieldDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrganizationDto.html":{"url":"classes/CreateOrganizationDto.html","title":"class - CreateOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/dto/create-organization.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                contactEmail\n                            \n                            \n                                    Optional\n                                contactPhone\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                currency\n                            \n                            \n                                    Optional\n                                logoUrl\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                owner\n                            \n                            \n                                siteName\n                            \n                            \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        logoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        siteName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsSlug()@IsUnique({name: 'Organization', schema: OrganizationSchema}, {message: 'the specified site name has already been used, please choose another one'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsOptional } from 'class-validator';\nimport { IsSlug } from 'src/shared/decorators/is-slug.decorator';\nimport { IsUnique } from 'src/shared/decorators/is-unique.decorator';\nimport { OrganizationSchema } from '../schemas/organization.schema';\n\nexport class CreateOrganizationDto {\n  @IsString()\n  name: string;\n\n  @IsSlug()\n  @IsUnique(\n    { name: 'Organization', schema: OrganizationSchema },\n    {\n      message:\n        'the specified site name has already been used, please choose another one',\n    },\n  )\n  siteName: string;\n\n  @IsOptional()\n  @IsString()\n  contactEmail?: string;\n\n  @IsOptional()\n  @IsString()\n  contactPhone?: string;\n\n  @IsOptional()\n  @IsString()\n  bio?: string;\n\n  @IsOptional()\n  @IsString()\n  logoUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  address?: string;\n\n  @IsOptional()\n  @IsString()\n  state?: string;\n\n  @IsOptional()\n  @IsString()\n  country?: string;\n\n  @IsOptional()\n  @IsString()\n  currency?: string;\n\n  @IsOptional()\n  @IsString()\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrganizationPasswordDto.html":{"url":"classes/CreateOrganizationPasswordDto.html","title":"class - CreateOrganizationPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrganizationPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-organization-password.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateOrganizationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                officeTitle\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                contactEmail\n                            \n                            \n                                    Optional\n                                contactPhone\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                currency\n                            \n                            \n                                    Optional\n                                logoUrl\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                owner\n                            \n                            \n                                siteName\n                            \n                            \n                                    Optional\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)@MaxLength(20)@IsEqualTo('password')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-organization-password.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        officeTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-organization-password.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-organization-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contactPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        logoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:55\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        siteName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsSlug()@IsUnique({name: 'Organization', schema: OrganizationSchema}, {message: 'the specified site name has already been used, please choose another one'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:19\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateOrganizationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateOrganizationDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MinLength, MaxLength, IsString } from 'class-validator';\nimport { CreateOrganizationDto } from 'src/organization/dto/create-organization.dto';\nimport { IsEqualTo } from 'src/shared/decorators/is-equal-to.decorator';\n\nexport class CreateOrganizationPasswordDto extends CreateOrganizationDto {\n  @MinLength(6)\n  @MaxLength(20)\n  password: string;\n\n  @MinLength(6)\n  @MaxLength(20)\n  @IsEqualTo('password')\n  confirmPassword: string;\n\n  @IsString()\n  officeTitle: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateResourceDto.html":{"url":"classes/CreateResourceDto.html","title":"class - CreateResourceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateResourceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/dto/create-resource.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                organization\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/dto/create-resource.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/dto/create-resource.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsSlug()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/dto/create-resource.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\nimport { IsSlug } from 'src/shared/decorators/is-slug.decorator';\n\nexport class CreateResourceDto {\n  @IsString()\n  name: string;\n\n  @IsSlug()\n  slug: string;\n\n  @IsOptional()\n  organization?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                    Optional\n                                organization\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/create-role.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/create-role.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsSlug()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/create-role.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\nimport { IsSlug } from 'src/shared/decorators/is-slug.decorator';\n\nexport class CreateRoleDto {\n  @IsString()\n  name: string;\n\n  @IsSlug()\n  slug: string;\n\n  @IsOptional()\n  organization?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTokenDto.html":{"url":"classes/CreateTokenDto.html","title":"class - CreateTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                identifier\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        identifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-token.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-token.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateTokenDto {\n  token: string;\n  identifier: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                    Optional\n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEmail, IsPhoneNumber, IsOptional } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  firstName?: string;\n  @IsString()\n  lastName?: string;\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n  @IsPhoneNumber()\n  @IsOptional()\n  phone?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DuplicateFieldError.html":{"url":"classes/DuplicateFieldError.html","title":"class - DuplicateFieldError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DuplicateFieldError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/errors/duplicate-field.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DuplicateFieldError extends Error {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElasticMailService.html":{"url":"injectables/ElasticMailService.html","title":"injectable - ElasticMailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ElasticMailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/elastic-mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                emailsApi\n                            \n                            \n                                fromMail\n                            \n                            \n                                logger\n                            \n                            \n                                templatesApi\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loadTemplate\n                            \n                            \n                                    Async\n                                send\n                            \n                            \n                                    Async\n                                sendBulk\n                            \n                            \n                                    Private\n                                    Async\n                                sendBulkMail\n                            \n                            \n                                    Private\n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/elastic-mail.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loadTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTemplate(templateName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/elastic-mail.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    templateName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(data: EmailTransactionalMessageData)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/elastic-mail.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EmailTransactionalMessageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendBulk\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendBulk(data: Omit)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/elastic-mail.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Omit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        sendBulkMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendBulkMail(data: EmailMessageData)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/elastic-mail.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EmailMessageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(data: EmailTransactionalMessageData)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/elastic-mail.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EmailTransactionalMessageData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Configuration({\n    apiKey: this.configService.get('MAIL_API_KEY'),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/mail/elastic-mail.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emailsApi\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EmailsApi(this.config)\n                    \n                \n                    \n                        \n                                Defined in src/mail/elastic-mail.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromMail\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('MAIL_FROM')\n                    \n                \n                    \n                        \n                                Defined in src/mail/elastic-mail.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ElasticMailService.name)\n                    \n                \n                    \n                        \n                                Defined in src/mail/elastic-mail.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templatesApi\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new TemplatesApi(this.config)\n                    \n                \n                    \n                        \n                                Defined in src/mail/elastic-mail.service.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Configuration,\n  EmailsApi,\n  EmailMessageData,\n  EmailSend,\n  EmailTransactionalMessageData,\n  TemplatesApi,\n  Template,\n} from '@elasticemail/elasticemail-client-ts-axios';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { AxiosResponse } from 'axios';\n\n@Injectable()\nexport class ElasticMailService {\n  logger = new Logger(ElasticMailService.name);\n  fromMail = this.configService.get('MAIL_FROM');\n  private config = new Configuration({\n    apiKey: this.configService.get('MAIL_API_KEY'),\n  });\n  private emailsApi = new EmailsApi(this.config);\n  templatesApi = new TemplatesApi(this.config);\n\n  constructor(private readonly configService: ConfigService) {}\n\n  private async sendMail(\n    data: EmailTransactionalMessageData,\n  ): Promise> {\n    try {\n      const response = await this.emailsApi.emailsTransactionalPost(data);\n      this.logger.log(\n        `MessageID: ${response.data.MessageID} | TransactionID: ${response.data.TransactionID} | Email API called successfully.`,\n        ElasticMailService.name,\n      );\n      return response;\n    } catch (error) {\n      this.logger.error(error.message, error, ElasticMailService.name);\n    }\n  }\n\n  async send(\n    data: EmailTransactionalMessageData,\n  ): Promise> {\n    try {\n      const emailData: EmailTransactionalMessageData = {\n        ...data,\n        Content: {\n          From: this.fromMail,\n          ReplyTo: this.fromMail,\n          ...data.Content,\n        },\n      };\n      return this.sendMail(emailData);\n    } catch (error) {\n      this.logger.error(error.message, error, ElasticMailService.name);\n    }\n  }\n\n  private async sendBulkMail(\n    data: EmailMessageData,\n  ): Promise> {\n    try {\n      const response = await this.emailsApi.emailsPost(data);\n      this.logger.log(\n        `MessageID: ${response.data.MessageID} | TransactionID: ${response.data.TransactionID} | Email API called successfully.`,\n        ElasticMailService.name,\n      );\n      return response;\n    } catch (error) {\n      this.logger.error(error.message, error, ElasticMailService.name);\n    }\n  }\n\n  async sendBulk(\n    data: Omit,\n  ): Promise> {\n    const emailMessageData: EmailMessageData = {\n      ...data,\n      Content: {\n        From: this.fromMail,\n        ReplyTo: this.fromMail,\n        ...data.Content,\n      },\n    };\n    return this.sendBulkMail(emailMessageData);\n  }\n\n  async loadTemplate(templateName: string): Promise {\n    const response = await this.templatesApi.templatesByNameGet(templateName);\n    return response.data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserOrganization.html":{"url":"classes/FindUserOrganization.html","title":"class - FindUserOrganization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/find-user-organization..dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/find-user-organization..dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUsername } from 'src/shared/decorators/is-username.decorator';\n\nexport class FindUserOrganization {\n  @IsUsername()\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDoesNotExistParams.html":{"url":"interfaces/IDoesNotExistParams.html","title":"interface - IDoesNotExistParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDoesNotExistParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/decorators/is-unique.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            schema\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        schema\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        schema:     mongoose.Schema\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     mongoose.Schema\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerDecorator, ValidationOptions } from 'class-validator';\nimport mongoose from 'mongoose';\n\nexport function IsUnique(\n  model: IDoesNotExistParams,\n  validationOptions?: ValidationOptions,\n) {\n  return function (object: Record, propertyName: string) {\n    registerDecorator({\n      name: 'IsUnique',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: {\n        message: `${model.name} with the specified ${propertyName} already exists, please choose another one`,\n        ...validationOptions,\n      },\n      validator: {\n        async validate(value: any) {\n          await mongoose.connect(process.env.MONGODB_URI);\n          const organization = await mongoose\n            .model(model.name, model.schema)\n            .findOne({ [propertyName]: value });\n          return !organization;\n        },\n      },\n    });\n  };\n}\n\nexport interface IDoesNotExistParams {\n  name: string;\n  schema?: mongoose.Schema;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InviteMemberDto.html":{"url":"classes/InviteMemberDto.html","title":"class - InviteMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InviteMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/dto/invite-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                    Optional\n                                officeTitle\n                            \n                            \n                                    Optional\n                                organizationId\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        officeTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        organizationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/invite-member.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, IsPhoneNumber, IsString } from 'class-validator';\n\nexport class InviteMemberDto {\n  organizationId?: string;\n\n  @IsString()\n  firstName: string;\n\n  @IsString()\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsPhoneNumber()\n  phone: string;\n\n  @IsString()\n  @IsOptional()\n  officeTitle?: string;\n\n  @IsString()\n  password?: string;\n\n  // membershipPlanId: string;\n\n  // @IsOptional()\n  // commonFields?: CreateMemberCommonFieldDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, jwtService: JwtService, organizationService: OrganizationService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        organizationService\n                                                  \n                                                        \n                                                                        OrganizationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ExecutionContext,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { AuthGuard } from '@nestjs/passport';\nimport { OrganizationService } from 'src/organization/organization.service';\nimport { USER_WITHOUT_ORGANIZATION } from '../decorators/allow-user-without-organization.decorator';\nimport { ORGANIZATION_API_HEADER } from '../decorators/organization-api.decorator';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\nimport { TokenData } from '../dto/token-data.dto';\nimport { TokenRequest } from '../interfaces/token-request.interface';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(\n    protected reflector: Reflector,\n    private jwtService: JwtService,\n    private organizationService: OrganizationService,\n  ) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    const request: TokenRequest = context.switchToHttp().getRequest();\n    if (isPublic) {\n      const organizationSlug = request.headers[\n        ORGANIZATION_API_HEADER\n      ] as string;\n\n      if (organizationSlug == 'gembrs') {\n        return true;\n      }\n\n      if (!organizationSlug) {\n        throw new BadRequestException(\n          'Please specify the organization you want to access',\n        );\n      }\n\n      return this.organizationService\n        .findBySiteName(organizationSlug)\n        .then((organization) => {\n          if (!organization)\n            throw new NotFoundException(\n              'No organization with the specified site name was found',\n            );\n          request.organizationId = organization.id;\n          return !!organization;\n        });\n    }\n    const bearerToken: string[] = (request.headers.authorization || '').split(\n      ' ',\n    );\n    if (bearerToken.length > 1) {\n      request.tokenData = this.jwtService.decode(\n        request.headers.authorization.split(' ')[1],\n      ) as TokenData;\n    }\n    // check if not authentication route\n    const allowUserWithoutOrganization =\n      this.reflector.getAllAndOverride(USER_WITHOUT_ORGANIZATION, [\n        context.getHandler(),\n        context.getClass(),\n      ]);\n\n    // if it is not an a allowUserWithoutOrganization route,\n    // and user has no organization, throw exception\n    if (!allowUserWithoutOrganization && !request.tokenData?.organizationId) {\n      throw new UnauthorizedException(\n        'User is not allowed to access this route',\n      );\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/strategies/jwt.strategy.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { jwtConstants } from '../constants';\nimport { UserService } from 'src/user/user.service';\nimport { Member } from 'src/member/schemas/member.schema';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(public userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    // const user = await this.userService.getUserByUsername(payload.username);\n    // if (!user) {\n    //   throw new UnauthorizedException();\n    // }\n    // if (payload.organizationId) {\n    //   const member = await Member.findOne({\n    //     where: { userId: user.id, organizationId: payload.organizationId },\n    //     relations: ['role', 'organization', 'user'],\n    //   });\n    //   // workaround for ACGuard\n    //   (member as any).roles = [member.role.slug];\n    //   // ensure password is removed\n    //   delete member.password;\n    //   return member;\n    // }\n    // return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(moduleRef: ModuleRef)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        moduleRef\n                                                  \n                                                        \n                                                                    ModuleRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private moduleRef: ModuleRef) {\n    super({\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(\n    request: Request,\n    username: string,\n    password: string,\n  ): Promise {\n    const contextId = ContextIdFactory.getByRequest(request);\n    // \"AuthService\" is a request-scoped provider\n    /*\n    const authService = await this.moduleRef.resolve(AuthService, contextId);\n    const organizationMember = await authService.validateMember({\n      username,\n      password,\n    });\n    if (!organizationMember) {\n      throw new UnauthorizedException();\n    }\n    (request as any).user = organizationMember;\n    return organizationMember;\n    */\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  username: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MailController.html":{"url":"controllers/MailController.html","title":"controller - MailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mail\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { MailService } from './mail.service';\n\n@Controller('mail')\nexport class MailController {\n  constructor(private readonly mailService: MailService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nElasticMailService\n\nElasticMailService\n\nMailModule -->\n\nElasticMailService->MailModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ElasticMailService\n                        \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { ElasticMailService } from './elastic-mail.service';\n\n@Module({\n  imports: [],\n  providers: [MailService, ElasticMailService],\n  exports: [MailService], // 👈 export for DI\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clientURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmUserEmail\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                resetPasswordRequest\n                            \n                            \n                                    Async\n                                sendVerificationCode\n                            \n                            \n                                    Async\n                                welcomeRegisteredOrganization\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: ElasticMailService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                        ElasticMailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmUserEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmUserEmail(user: User, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPasswordRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPasswordRequest(user: User, link: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    link\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationCode(email: string, code: number | string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                            number | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        welcomeRegisteredOrganization\n                        \n                    \n                \n            \n            \n                \n                    \n                    welcomeRegisteredOrganization(user: User, organization: Organization)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    organization\n                                    \n                                                Organization\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clientURL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('CLIENT_URL')\n                    \n                \n                    \n                        \n                                Defined in src/mail/mail.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { APP_NAME } from 'src/app.constants';\nimport { Organization } from 'src/organization/schemas/organization.schema';\nimport { User } from './../user/schemas/user.schema';\nimport { ElasticMailService } from './elastic-mail.service';\nimport { ElasticMailTemplateNames } from './elastic-mail.templates';\n\n@Injectable()\nexport class MailService {\n  private readonly clientURL = this.configService.get('CLIENT_URL');\n  constructor(\n    private mailerService: ElasticMailService,\n    private configService: ConfigService,\n  ) {}\n\n  async welcomeRegisteredOrganization(user: User, organization: Organization) {\n    const memberUrl = `https://${organization.siteName}.${this.clientURL}`;\n    const adminUrl = `${memberUrl}/admin`;\n\n    await this.mailerService.send({\n      Recipients: { To: [user.email] },\n      Content: {\n        Subject: `Welcome to ${APP_NAME}! Make yourself at home`,\n        TemplateName: ElasticMailTemplateNames.WelcomeToGembrs,\n        Merge: {\n          name: `${user.firstName}`,\n          memberUrl,\n          adminUrl,\n          APP_NAME,\n          organization: `${organization.name}`,\n        },\n      },\n    });\n  }\n\n  async sendVerificationCode(email: string, code: number | string) {\n    return await this.mailerService.send({\n      Recipients: { To: [email] },\n      Content: {\n        Subject: `${APP_NAME} – email verification`,\n        TemplateName: ElasticMailTemplateNames.VerifyYourEmail,\n        Merge: {\n          name: `${email}`,\n          code: `${code}`,\n          APP_NAME,\n        },\n      },\n    });\n  }\n\n  async resetPasswordRequest(user: User, link: string) {\n    return await this.mailerService.send({\n      Recipients: { To: [user.email] },\n      Content: {\n        Subject: 'You requested for a Password reset!',\n        TemplateName: './request-password-reset.template.hbs', // `.hbs` extension is appended automatically\n        Merge: {\n          name: `${user.firstName}`,\n          link,\n        },\n      },\n    });\n  }\n\n  async resetPassword(user: User) {\n    const link = this.clientURL;\n    return await this.mailerService.send({\n      Recipients: { To: [user.email] },\n      Content: {\n        Subject: 'Password Reset Successfully!',\n        TemplateName: './password-reset.template.hbs', // `.hbs` extension is appended automatically\n        Merge: {\n          name: `${user.firstName}`,\n          link,\n          APP_NAME,\n        },\n      },\n    });\n  }\n\n  async confirmUserEmail(user: User, token: string) {\n    const url = `${this.clientURL}?token=${token}`;\n\n    await this.mailerService.send({\n      Recipients: { To: [user.email] },\n      Content: {\n        // from: '\"Support Team\" ', // override default from\n        Subject: 'Welcome to Nice App! Confirm your Email',\n        TemplateName: './confirm-email.template.hbs', // `.hbs` extension is appended automatically\n        Merge: {\n          name: `${user.firstName}`,\n          url,\n          APP_NAME,\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Media.html":{"url":"interfaces/Media.html","title":"interface - Media","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Media\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/dto/termii-request-params.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            caption\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        caption\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        caption:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export class TermiiRequestParams {\n  to: string;\n  from: string;\n  sms: string;\n  type: string;\n  channel: string;\n  api_key: string;\n  media?: Media;\n  pin: string;\n  pin_id: string;\n  pin_attempts?: number;\n  pin_time_to_live?: number;\n  pin_length?: number;\n  pin_placeholder?: string;\n  message_text?: string;\n  pin_type?: string;\n  message_type?: string;\n\n  constructor(payload: Partial) {\n    Object.assign(this, payload);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n}\n\nexport interface Media {\n  url: string;\n  caption: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Member.html":{"url":"classes/Member.html","title":"class - Member","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Member\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/schemas/member.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bio\n                            \n                            \n                                contactPhone\n                            \n                            \n                                officeTitle\n                            \n                            \n                                organization\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        officeTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Organization\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Organization'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/schemas/member.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { Organization } from 'src/organization/schemas/organization.schema';\nimport { Role } from 'src/role/schemas/role.schema';\nimport { User } from 'src/user/schemas/user.schema';\n\n// export type MemberDocument = Member & Document;\n\n@Schema()\nexport class Member extends Document {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User' })\n  user: User;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Organization' })\n  organization: Organization;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Role' })\n  role: Role;\n\n  @Prop()\n  bio: string;\n\n  @Prop()\n  contactPhone: string;\n\n  @Prop()\n  officeTitle: string;\n\n  @Prop()\n  password: string;\n\n  // @OneToMany(() => MemberCommonField, (c) => c.member, { eager: true })\n  // commonFields: MemberCommonField[];\n\n  // @OneToMany(() => Subscription, (subscription) => subscription.member)\n  // subscriptions: Subscription[];\n}\n\nexport const MemberSchema = SchemaFactory.createForClass(Member);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MemberController.html":{"url":"controllers/MemberController.html","title":"controller - MemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                member\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a Member'})\n                \n            \n\n            \n                \n                    Defined in src/member/member.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all Members'})\n                \n            \n\n            \n                \n                    Defined in src/member/member.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find a Member'})\n                \n            \n\n            \n                \n                    Defined in src/member/member.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a Members'})\n                \n            \n\n            \n                \n                    Defined in src/member/member.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, dto: UpdateMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a Member'})\n                \n            \n\n            \n                \n                    Defined in src/member/member.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePassword\n                        \n                    \n                \n            \n            \n                \nupdatePassword(id: string, dto: UpdateMemberPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a Member's password'})\n                \n            \n\n            \n                \n                    Defined in src/member/member.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMemberPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { MemberService } from './member.service';\nimport { CreateMemberDto } from './dto/create-member.dto';\nimport { UpdateMemberDto } from './dto/update-member.dto';\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\nimport { UpdateMemberPasswordDto } from './dto/update-member-password.dto';\n\n@ApiTags('Member')\n@Controller('member')\nexport class MemberController {\n  constructor(private readonly service: MemberService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a Member' })\n  create(@Body() dto: CreateMemberDto) {\n    return this.service.createOne(dto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all Members' })\n  findAll() {\n    return this.service.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find a Member' })\n  findOne(@Param('id') id: string) {\n    return this.service.findById(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a Member' })\n  update(@Param('id') id: string, @Body() dto: UpdateMemberDto) {\n    return this.service.update(id, dto);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: \"Update a Member's password\" })\n  updatePassword(\n    @Param('id') id: string,\n    @Body() dto: UpdateMemberPasswordDto,\n  ) {\n    return this.service.updatePassword(id, dto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a Members' })\n  remove(@Param('id') id: string) {\n    return this.service.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MemberModule.html":{"url":"modules/MemberModule.html","title":"module - MemberModule","body":"\n                   \n\n\n\n\n    Modules\n    MemberModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MemberModule\n\n\n\ncluster_MemberModule_exports\n\n\n\ncluster_MemberModule_providers\n\n\n\n\nMemberRepository \n\nMemberRepository \n\n\n\nMemberService \n\nMemberService \n\n\n\nMemberModule\n\nMemberModule\n\nMemberRepository  -->\n\nMemberModule->MemberRepository \n\n\n\nMemberService  -->\n\nMemberModule->MemberService \n\n\n\n\n\nMemberRepository\n\nMemberRepository\n\nMemberModule -->\n\nMemberRepository->MemberModule\n\n\n\n\n\nMemberService\n\nMemberService\n\nMemberModule -->\n\nMemberService->MemberModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/member/member.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MemberRepository\n                        \n                        \n                            MemberService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MemberController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MemberRepository\n                        \n                        \n                            MemberService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MemberService } from './member.service';\nimport { MemberController } from './member.controller';\nimport { MemberRepository } from './member.repository';\nimport { Member, MemberSchema } from './schemas/member.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Member.name, schema: MemberSchema }]),\n  ],\n  controllers: [MemberController],\n  providers: [MemberService, MemberRepository],\n  exports: [MemberService, MemberRepository],\n})\nexport class MemberModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MemberRepository.html":{"url":"injectables/MemberRepository.html","title":"injectable - MemberRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MemberRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/member.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/member/member.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:82\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         SharedRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         SharedRepository:27\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SharedRepository } from 'src/shared/shared.repository';\nimport { CreateMemberDto } from './dto/create-member.dto';\nimport { UpdateMemberDto } from './dto/update-member.dto';\nimport { Member } from './schemas/member.schema';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class MemberRepository extends SharedRepository {\n  constructor(@InjectModel(Member.name) model: Model) {\n    super(model);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MemberService.html":{"url":"injectables/MemberService.html","title":"injectable - MemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/member.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                inviteMember\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: MemberRepository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/member/member.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        MemberRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(dto: CreateMemberDto)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        inviteMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteMember(dto: InviteMemberDto)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                InviteMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | string, dto: UpdateMemberDto)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(id: ObjectId | string, dto: UpdateMemberPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/member/member.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMemberPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Default value : +this.configService.get('SALT_ROUNDS')\n                    \n                \n                    \n                        \n                                Defined in src/member/member.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ObjectId } from 'mongoose';\nimport { ConfigService } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport { SharedService } from 'src/shared/shared.service';\nimport { CreateMemberDto } from './dto/create-member.dto';\nimport { UpdateMemberPasswordDto } from './dto/update-member-password.dto';\nimport { UpdateMemberDto } from './dto/update-member.dto';\nimport { MemberRepository } from './member.repository';\nimport { InviteMemberDto } from './dto/invite-member.dto';\n\n@Injectable()\nexport class MemberService extends SharedService {\n  private readonly saltRounds = +this.configService.get('SALT_ROUNDS');\n  constructor(\n    readonly repo: MemberRepository,\n    private configService: ConfigService,\n  ) {\n    super(repo);\n  }\n\n  public async createOne(dto: CreateMemberDto) {\n    if (dto.password) {\n      dto.password = await bcrypt.hash(dto.password, this.saltRounds);\n    }\n    return this.repo.create(dto);\n  }\n\n  public async findAll(filter?: any) {\n    return this.repo.find();\n  }\n\n  public async findById(id: ObjectId | string) {\n    return this.repo.findById(id);\n  }\n\n  public async update(id: ObjectId | string, dto: UpdateMemberDto) {\n    delete dto.password;\n    return this.repo.update(id, dto);\n  }\n\n  public async remove(id: ObjectId | string) {\n    return this.repo.delete(id);\n  }\n\n  public async updatePassword(\n    id: ObjectId | string,\n    dto: UpdateMemberPasswordDto,\n  ) {\n    dto.password = await bcrypt.hash(dto.password, this.saltRounds);\n    return this.repo.update(id, { password: dto.password });\n  }\n\n  public async inviteMember(dto: InviteMemberDto) {\n    // create a new user\n    // create new subscription to a membership plan\n    // get member Role\n    // create a member without password\n    // create invitation\n    // send member an invite email\n    return this.repo.create(dto as any);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Organization.html":{"url":"classes/Organization.html","title":"class - Organization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Organization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/schemas/organization.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                bio\n                            \n                            \n                                contactEmail\n                            \n                            \n                                contactPhone\n                            \n                            \n                                country\n                            \n                            \n                                currency\n                            \n                            \n                                logoUrl\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                roles\n                            \n                            \n                                siteName\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Member[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        siteName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/schemas/organization.schema.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { Member } from 'src/member/schemas/member.schema';\nimport { Role } from 'src/role/schemas/role.schema';\nimport { User } from 'src/user/schemas/user.schema';\n\n// export type OrganizationDocument = Organization & Document;\n\n@Schema()\nexport class Organization extends Document {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true, unique: true })\n  siteName: string;\n\n  @Prop()\n  contactEmail: string;\n\n  @Prop()\n  contactPhone: string;\n\n  @Prop()\n  bio: number;\n\n  @Prop()\n  logoUrl: string;\n\n  @Prop()\n  address: string;\n\n  @Prop()\n  state: string;\n\n  @Prop()\n  country: string;\n\n  @Prop()\n  currency: string;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true })\n  owner: User;\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Member' }] })\n  members: Member[];\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Role' }] })\n  roles: Role[];\n\n  // @OneToMany(() => CommonField, (commonField) => commonField.organization)\n  // commonFields: CommonField[];\n\n  // @OneToMany(() => MembershipPlan, (mp) => mp.organization, { eager: true })\n  // membershipPlans: MembershipPlan[];\n}\n\nexport const OrganizationSchema = SchemaFactory.createForClass(Organization);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrganizationController.html":{"url":"controllers/OrganizationController.html","title":"controller - OrganizationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrganizationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                organization\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateOrganizationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Organization'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/organization/organization.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find all Organizations'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/organization/organization.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find an Organization'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/organization/organization.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete an Organization'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/organization/organization.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, dto: UpdateOrganizationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update an Organization'})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/organization/organization.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Req,\n} from '@nestjs/common';\nimport { OrganizationService } from './organization.service';\nimport { CreateOrganizationDto } from './dto/create-organization.dto';\nimport { UpdateOrganizationDto } from './dto/update-organization.dto';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Request } from 'express';\n\n@ApiTags('Organization')\n@Controller('organization')\nexport class OrganizationController {\n  constructor(private readonly service: OrganizationService) {}\n\n  @ApiOperation({ summary: 'Find all Organizations' })\n  @Get()\n  findAll() {\n    return this.service.findAll();\n  }\n\n  @ApiOperation({ summary: 'Create a Organization' })\n  @Post()\n  create(@Body() dto: CreateOrganizationDto, @Req() request: Request) {\n    // dto.ownerId = request.user.id;\n    return this.service.createOne(dto);\n  }\n\n  @ApiOperation({ summary: 'Find an Organization' })\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.service.findById(id);\n  }\n\n  @ApiOperation({ summary: 'Update an Organization' })\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() dto: UpdateOrganizationDto) {\n    return this.service.update(id, dto);\n  }\n\n  @ApiOperation({ summary: 'Delete an Organization' })\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.service.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrganizationModule.html":{"url":"modules/OrganizationModule.html","title":"module - OrganizationModule","body":"\n                   \n\n\n\n\n    Modules\n    OrganizationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OrganizationModule\n\n\n\ncluster_OrganizationModule_exports\n\n\n\ncluster_OrganizationModule_providers\n\n\n\n\nOrganizationRepository \n\nOrganizationRepository \n\n\n\nOrganizationService \n\nOrganizationService \n\n\n\nOrganizationModule\n\nOrganizationModule\n\nOrganizationRepository  -->\n\nOrganizationModule->OrganizationRepository \n\n\n\nOrganizationService  -->\n\nOrganizationModule->OrganizationService \n\n\n\n\n\nOrganizationRepository\n\nOrganizationRepository\n\nOrganizationModule -->\n\nOrganizationRepository->OrganizationModule\n\n\n\n\n\nOrganizationService\n\nOrganizationService\n\nOrganizationModule -->\n\nOrganizationService->OrganizationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/organization/organization.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrganizationRepository\n                        \n                        \n                            OrganizationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrganizationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OrganizationRepository\n                        \n                        \n                            OrganizationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrganizationService } from './organization.service';\nimport { OrganizationController } from './organization.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport {\n  Organization,\n  OrganizationSchema,\n} from './schemas/organization.schema';\nimport { OrganizationRepository } from './organization.repository';\nimport { User, UserSchema } from 'src/user/schemas/user.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Organization.name, schema: OrganizationSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n  ],\n  controllers: [OrganizationController],\n  providers: [OrganizationService, OrganizationRepository],\n  exports: [OrganizationService, OrganizationRepository],\n})\nexport class OrganizationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrganizationRepository.html":{"url":"injectables/OrganizationRepository.html","title":"injectable - OrganizationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrganizationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findBySiteName\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                setOwner\n                            \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.repository.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateOrganizationDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:25\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findBySiteName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySiteName(siteName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.repository.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    siteName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateOrganizationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setOwner\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOwner(ownerId: string, organizationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    organizationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:82\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['owner']\n                    \n                \n                        \n                            \n                                Inherited from         SharedRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         SharedRepository:23\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SharedRepository } from 'src/shared/shared.repository';\nimport { CreateOrganizationDto } from './dto/create-organization.dto';\nimport { UpdateOrganizationDto } from './dto/update-organization.dto';\nimport { Organization } from './schemas/organization.schema';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, SaveOptions } from 'mongoose';\nimport { User } from 'src/user/schemas/user.schema';\n\n@Injectable()\nexport class OrganizationRepository extends SharedRepository {\n  constructor(\n    @InjectModel(Organization.name) model: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) {\n    super(model);\n  }\n\n  populateOnFind = ['owner'];\n\n  public async create(dto: CreateOrganizationDto, options?: SaveOptions) {\n    const organization = await super.create(dto, options);\n    return await this.setOwner(dto.owner, organization._id);\n  }\n\n  public async setOwner(ownerId: string, organizationId: string) {\n    await this.userModel.findOneAndUpdate(\n      { _id: ownerId },\n      { $addToSet: { organizations: organizationId } },\n    );\n    return this.findById(organizationId);\n  }\n\n  public async findOrCreate(dto: CreateOrganizationDto) {\n    const organization = await this.model.findOneAndUpdate(\n      { siteName: dto.siteName },\n      dto,\n      {\n        upsert: true,\n        new: true,\n      },\n    );\n    if (!organization) {\n      return { organization: await this.create(dto), created: true };\n    }\n\n    return {\n      organization: await this.setOwner(dto.owner, organization._id),\n      created: false,\n    };\n  }\n\n  public async findBySiteName(siteName: string) {\n    return this.model.findOne({ siteName });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrganizationService.html":{"url":"injectables/OrganizationService.html","title":"injectable - OrganizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrganizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findBySiteName\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: OrganizationRepository)\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        OrganizationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(dto: CreateOrganizationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findBySiteName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySiteName(username: string, throwError)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    throwError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | string, dto: UpdateOrganizationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ObjectId } from 'mongoose';\nimport { SharedService } from 'src/shared/shared.service';\nimport { CreateOrganizationDto } from './dto/create-organization.dto';\nimport { UpdateOrganizationDto } from './dto/update-organization.dto';\nimport { OrganizationRepository } from './organization.repository';\n\n@Injectable()\nexport class OrganizationService extends SharedService {\n  constructor(readonly repo: OrganizationRepository) {\n    super(repo);\n  }\n\n  public async createOne(dto: CreateOrganizationDto) {\n    return this.repo.create(dto);\n  }\n\n  public async findBySiteName(username: string, throwError = true) {\n    const user = await this.repo.findBySiteName(username);\n    if (!user && throwError) {\n      throw new NotFoundException(`Organization not found`);\n    }\n    return user;\n  }\n\n  public async findAll(filter?: any) {\n    return this.repo.find();\n  }\n\n  public async findById(id: ObjectId | string) {\n    return this.repo.findById(id);\n  }\n\n  public async update(id: ObjectId | string, dto: UpdateOrganizationDto) {\n    return this.repo.update(id, dto);\n  }\n\n  public async remove(id: ObjectId | string) {\n    return this.repo.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginateQuery.html":{"url":"interfaces/PaginateQuery.html","title":"interface - PaginateQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginateQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/paginator/decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            filter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            page\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            searchBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortBy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchBy:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortBy:     []\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     []\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { Request } from 'express';\nimport { pickBy, Dictionary, isString, mapKeys } from 'lodash';\n\nexport interface PaginateQuery {\n  page?: number;\n  limit?: number;\n  sortBy?: [string, string][];\n  searchBy?: string[];\n  search?: string;\n  filter?: { [column: string]: string | string[] };\n  path: string;\n}\n\nexport const Paginate = createParamDecorator(\n  (_data: unknown, ctx: ExecutionContext): PaginateQuery => {\n    const request: Request = ctx.switchToHttp().getRequest();\n    const { query } = request;\n\n    // Determine if Express or Fastify to rebuild the original url and reduce down to protocol, host and base url\n    let originalUrl;\n    if (request.originalUrl) {\n      originalUrl =\n        request.protocol + '://' + request.get('host') + request.originalUrl;\n    } else {\n      originalUrl = request.protocol + '://' + request.hostname + request.url;\n    }\n    const urlParts = new URL(originalUrl);\n    const path = urlParts.protocol + '//' + urlParts.host + urlParts.pathname;\n\n    const sortBy: [string, string][] = [];\n    const searchBy: string[] = [];\n\n    if (query.sortBy) {\n      const params = !Array.isArray(query.sortBy)\n        ? [query.sortBy]\n        : query.sortBy;\n      for (const param of params) {\n        if (isString(param)) {\n          const items = (param as string).split(':');\n          if (items.length === 2) {\n            sortBy.push(items as [string, string]);\n          }\n        }\n      }\n    }\n\n    if (query.searchBy) {\n      const params = !Array.isArray(query.searchBy)\n        ? [query.searchBy]\n        : query.searchBy;\n      for (const param of params) {\n        if (isString(param)) {\n          searchBy.push(param as string);\n        }\n      }\n    }\n\n    const filter = mapKeys(\n      pickBy(\n        query,\n        (param, name) =>\n          name.includes('filter.') &&\n          (isString(param) ||\n            (Array.isArray(param) &&\n              (param as any[]).every((p) => isString(p)))),\n      ) as Dictionary,\n      (_param, name) => name.replace('filter.', ''),\n    );\n\n    return {\n      page: query.page ? parseInt(query.page.toString(), 10) : undefined,\n      limit: query.limit ? parseInt(query.limit.toString(), 10) : undefined,\n      sortBy: sortBy.length ? sortBy : undefined,\n      search: query.search ? query.search.toString() : undefined,\n      searchBy: searchBy.length ? searchBy : undefined,\n      filter: Object.keys(filter).length ? filter : undefined,\n      path,\n    };\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryErrorFilter.html":{"url":"classes/QueryErrorFilter.html","title":"class - QueryErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filters/query-error.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                    \n                    catch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filters/query-error.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost, BadRequestException } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { DuplicateFieldError } from '../errors/duplicate-field.error';\n\n@Catch(DuplicateFieldError)\nexport class QueryErrorFilter extends BaseExceptionFilter {\n  public catch(exception: any, host: ArgumentsHost): void {\n    console.log('Dummy QueryErrorFilter', exception);\n    const detail = exception.message;\n    if (typeof detail === 'string' && detail.includes('already exists.')) {\n      exception = new BadRequestException(detail);\n    }\n    return super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterMember.html":{"url":"classes/RegisterMember.html","title":"class - RegisterMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                membershipPlanId\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-member.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-member.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        membershipPlanId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-member.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-member.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-member.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, MaxLength, MinLength } from 'class-validator';\n// import { CreateMemberCommonFieldDto } from 'src/member-common-field/dto/create-member-common-field.dto';\nimport { IsUsername } from 'src/shared/decorators/is-username.decorator';\n\nexport class RegisterMember {\n  @IsString()\n  firstName: string;\n\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsUsername()\n  username: string;\n\n  @MinLength(6)\n  @MaxLength(20)\n  password: string;\n  membershipPlanId: number;\n  // commonFields: CreateMemberCommonFieldDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Resource.html":{"url":"classes/Resource.html","title":"class - Resource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Resource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/schemas/resource.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                resources_roles\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resources_roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ResourceRole[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { ResourceRole } from './resource-role.schema';\n\n// export type ResourceDocument = Resource & Document;\n// https://stackoverflow.com/questions/62704600/mongoose-subdocuments-in-nest-js\n@Schema({ timestamps: true })\nexport class Resource extends Document {\n  @Prop()\n  name: string;\n\n  @Prop()\n  slug: string;\n\n  @Prop({\n    type: [{ type: mongoose.Types.ObjectId, ref: 'ResourceRole' }],\n  })\n  resources_roles: ResourceRole[];\n}\n\nexport const ResourceSchema = SchemaFactory.createForClass(Resource);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ResourceController.html":{"url":"controllers/ResourceController.html","title":"controller - ResourceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ResourceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/resource.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                resource\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findBySlug\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateResourceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Find or Create a Resource'})\n                \n            \n\n            \n                \n                    Defined in src/resource/resource.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateResourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all Resources'})\n                \n            \n\n            \n                \n                    Defined in src/resource/resource.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findBySlug\n                        \n                    \n                \n            \n            \n                \nfindBySlug(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/by-slug/:slug')@ApiOperation({summary: 'Find a Resource by slug'})\n                \n            \n\n            \n                \n                    Defined in src/resource/resource.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find a Resource'})\n                \n            \n\n            \n                \n                    Defined in src/resource/resource.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a Resource'})\n                \n            \n\n            \n                \n                    Defined in src/resource/resource.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, dto: UpdateResourceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a Resource'})\n                \n            \n\n            \n                \n                    Defined in src/resource/resource.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateResourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ResourceService } from './resource.service';\nimport { CreateResourceDto } from './dto/create-resource.dto';\nimport { UpdateResourceDto } from './dto/update-resource.dto';\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('Resource')\n@Controller('resource')\nexport class ResourceController {\n  constructor(private readonly service: ResourceService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Find or Create a Resource' })\n  create(@Body() dto: CreateResourceDto) {\n    return this.service.findOrCreate(dto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all Resources' })\n  findAll() {\n    return this.service.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find a Resource' })\n  findOne(@Param('id') id: string) {\n    return this.service.findById(id);\n  }\n\n  @Get('/by-slug/:slug')\n  @ApiOperation({ summary: 'Find a Resource by slug' })\n  findBySlug(@Param('slug') slug: string) {\n    return this.service.findBySlug(slug);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a Resource' })\n  update(@Param('id') id: string, @Body() dto: UpdateResourceDto) {\n    return this.service.update(id, dto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a Resource' })\n  remove(@Param('id') id: string) {\n    return this.service.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResourceModule.html":{"url":"modules/ResourceModule.html","title":"module - ResourceModule","body":"\n                   \n\n\n\n\n    Modules\n    ResourceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ResourceModule\n\n\n\ncluster_ResourceModule_providers\n\n\n\ncluster_ResourceModule_exports\n\n\n\n\nResourceRepository \n\nResourceRepository \n\n\n\nResourceService \n\nResourceService \n\n\n\nResourceModule\n\nResourceModule\n\nResourceRepository  -->\n\nResourceModule->ResourceRepository \n\n\n\nResourceService  -->\n\nResourceModule->ResourceService \n\n\n\n\n\nResourceRepository\n\nResourceRepository\n\nResourceModule -->\n\nResourceRepository->ResourceModule\n\n\n\n\n\nResourceService\n\nResourceService\n\nResourceModule -->\n\nResourceService->ResourceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resource/resource.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResourceRepository\n                        \n                        \n                            ResourceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ResourceController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResourceRepository\n                        \n                        \n                            ResourceService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResourceService } from './resource.service';\nimport { ResourceController } from './resource.controller';\nimport { ResourceRepository } from './resource.repository';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Resource, ResourceSchema } from './schemas/resource.schema';\nimport {\n  ResourceRole,\n  ResourceRoleSchema,\n} from './schemas/resource-role.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Resource.name, schema: ResourceSchema },\n      { name: ResourceRole.name, schema: ResourceRoleSchema },\n    ]),\n  ],\n  controllers: [ResourceController],\n  providers: [ResourceService, ResourceRepository],\n  exports: [ResourceService, ResourceRepository],\n})\nexport class ResourceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRepository.html":{"url":"injectables/ResourceRepository.html","title":"injectable - ResourceRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/resource.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBySlug\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/resource/resource.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findBySlug\n                        \n                    \n                \n            \n            \n                \nfindBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateResourceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateResourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:82\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         SharedRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         SharedRepository:27\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SharedRepository } from 'src/shared/shared.repository';\nimport { CreateResourceDto } from './dto/create-resource.dto';\nimport { UpdateResourceDto } from './dto/update-resource.dto';\nimport { Resource } from './schemas/resource.schema';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class ResourceRepository extends SharedRepository {\n  constructor(@InjectModel(Resource.name) model: Model) {\n    super(model);\n  }\n\n  public async findOrCreate(dto: CreateResourceDto) {\n    const resource = await this.model.findOneAndUpdate(\n      { slug: dto.slug },\n      dto,\n      {\n        upsert: true,\n        new: true,\n      },\n    );\n    if (!resource) {\n      return { resource: await this.create(dto), created: true };\n    }\n    return { resource, created: false };\n  }\n\n  findBySlug(slug: string) {\n    return this.model.findOne({ slug: slug }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRole.html":{"url":"classes/ResourceRole.html","title":"class - ResourceRole","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRole\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/schemas/resource-role.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rCreate\n                            \n                            \n                                rDelete\n                            \n                            \n                                role\n                            \n                            \n                                rRead\n                            \n                            \n                                rUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        rCreate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource-role.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource-role.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource-role.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rRead\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource-role.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rUpdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resource/schemas/resource-role.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { Role } from 'src/role/schemas/role.schema';\n\n// export type ResourceRoleDocument = ResourceRole & Document;\n\n@Schema({ timestamps: true })\nexport class ResourceRole extends Document {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Role' })\n  role: Role;\n\n  @Prop()\n  rCreate: boolean;\n\n  @Prop()\n  rDelete: boolean;\n\n  @Prop()\n  rUpdate: boolean;\n\n  @Prop()\n  rRead: boolean;\n}\n\nexport const ResourceRoleSchema = SchemaFactory.createForClass(ResourceRole);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceService.html":{"url":"injectables/ResourceService.html","title":"injectable - ResourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/resource.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findBySlug\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: ResourceRepository)\n                    \n                \n                        \n                            \n                                Defined in src/resource/resource.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        ResourceRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string, throwError)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    throwError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateResourceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateResourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | string, dto: UpdateResourceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/resource/resource.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateResourceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ObjectId } from 'mongoose';\nimport slugify from 'slugify';\nimport { SharedService } from 'src/shared/shared.service';\nimport { CreateResourceDto } from './dto/create-resource.dto';\nimport { UpdateResourceDto } from './dto/update-resource.dto';\nimport { ResourceRepository } from './resource.repository';\n\n@Injectable()\nexport class ResourceService extends SharedService {\n  constructor(readonly repo: ResourceRepository) {\n    super(repo);\n  }\n\n  public async findOrCreate(dto: CreateResourceDto) {\n    dto.slug = (dto.slug ?? slugify(dto.name)).toLowerCase();\n    return this.repo.findOrCreate(dto);\n  }\n\n  public async findBySlug(slug: string, throwError = true) {\n    const resource = await this.repo.findBySlug(slug);\n    if (!resource && throwError) {\n      throw new NotFoundException(`Resource not found`);\n    }\n    return resource;\n  }\n\n  public async findAll(filter?: any) {\n    return this.repo.find();\n  }\n\n  public async findById(id: ObjectId | string) {\n    return this.repo.findById(id);\n  }\n\n  public async update(id: ObjectId | string, dto: UpdateResourceDto) {\n    return this.repo.update(id, dto);\n  }\n\n  public async remove(id: ObjectId | string) {\n    return this.repo.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/schemas/role.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                organization\n                            \n                            \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/schemas/role.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Organization\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Organization'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/schemas/role.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/schemas/role.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\nimport { Organization } from 'src/organization/schemas/organization.schema';\n\n/* \n  RBAC - role-based access control\n  first create roles; role =[ \"user\", \"guest\", \"organization\",  \"super-admin\" \"global-super-admin\"]\n  next, create resource, add their roles_id and permissions\n  finally create users and indicate their roles\n*/\n// https://blog.nextwebb.tech/role-based-access-control-rbac-for-nosql-db-in-nodejs\n@Schema({ timestamps: true })\nexport class Role extends Document {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true })\n  slug: string;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Organization' })\n  organization: Organization;\n}\n\nexport const RoleSchema = SchemaFactory.createForClass(Role);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findBySlug\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Fond or Create a Role'})\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all Roles'})\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findBySlug\n                        \n                    \n                \n            \n            \n                \nfindBySlug(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/by-slug/:slug')@ApiOperation({summary: 'Find a Role by slug'})\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find a Role'})\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a Role'})\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, dto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a Role'})\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { RoleService } from './role.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('Role')\n@Controller('role')\nexport class RoleController {\n  constructor(private readonly service: RoleService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Fond or Create a Role' })\n  create(@Body() dto: CreateRoleDto) {\n    return this.service.findOrCreate(dto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all Roles' })\n  findAll() {\n    return this.service.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find a Role' })\n  findOne(@Param('id') id: string) {\n    return this.service.findById(id);\n  }\n\n  @Get('/by-slug/:slug')\n  @ApiOperation({ summary: 'Find a Role by slug' })\n  findBySlug(@Param('slug') slug: string) {\n    return this.service.findBySlug(slug);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a Role' })\n  update(@Param('id') id: string, @Body() dto: UpdateRoleDto) {\n    return this.service.update(id, dto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a Role' })\n  remove(@Param('id') id: string) {\n    return this.service.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\n\nRoleRepository \n\nRoleRepository \n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleRepository  -->\n\nRoleModule->RoleRepository \n\n\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleRepository\n\nRoleRepository\n\nRoleModule -->\n\nRoleRepository->RoleModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleRepository\n                        \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleRepository\n                        \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleService } from './role.service';\nimport { RoleController } from './role.controller';\nimport { RoleRepository } from './role.repository';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Role, RoleSchema } from './schemas/role.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Role.name, schema: RoleSchema }]),\n  ],\n  controllers: [RoleController],\n  providers: [RoleService, RoleRepository],\n  exports: [RoleService, RoleRepository],\n})\nexport class RoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleRepository.html":{"url":"injectables/RoleRepository.html","title":"injectable - RoleRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findBySlug\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/role/role.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findBySlug\n                        \n                    \n                \n            \n            \n                \nfindBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:82\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         SharedRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         SharedRepository:27\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SharedRepository } from 'src/shared/shared.repository';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { Role } from './schemas/role.schema';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class RoleRepository extends SharedRepository {\n  constructor(@InjectModel(Role.name) model: Model) {\n    super(model);\n  }\n\n  public async findOrCreate(dto: CreateRoleDto) {\n    const role = await this.model.findOneAndUpdate({ slug: dto.slug }, dto, {\n      upsert: true,\n      new: true,\n    });\n    if (!role) {\n      return { role: await this.create(dto), created: true };\n    }\n    return { role, created: false };\n  }\n\n  findBySlug(slug: string) {\n    return this.model.findOne({ slug: slug }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findBySlug\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                getDefaultAdminRole\n                            \n                            \n                                    Public\n                                    Async\n                                getDefaultMemberRole\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: RoleRepository)\n                    \n                \n                        \n                            \n                                Defined in src/role/role.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        RoleRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string, throwError)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    throwError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDefaultAdminRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDefaultAdminRole()\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getDefaultMemberRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDefaultMemberRole()\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | string, dto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ObjectId } from 'mongoose';\nimport slugify from 'slugify';\nimport { SharedService } from 'src/shared/shared.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { RoleRepository } from './role.repository';\n\n@Injectable()\nexport class RoleService extends SharedService {\n  constructor(readonly repo: RoleRepository) {\n    super(repo);\n  }\n\n  public async getDefaultAdminRole() {\n    return this.repo.findOne({ slug: 'admin' });\n  }\n\n  public async getDefaultMemberRole() {\n    return this.repo.findOne({ slug: 'member' });\n  }\n\n  public async findOrCreate(dto: CreateRoleDto) {\n    dto.slug = (dto.slug ?? slugify(dto.name)).toLowerCase();\n    return this.repo.findOrCreate(dto);\n  }\n\n  public async findBySlug(slug: string, throwError = true) {\n    const role = await this.repo.findBySlug(slug);\n    if (!role && throwError) {\n      throw new NotFoundException(`Role not found`);\n    }\n    return role;\n  }\n\n  public async findAll(filter?: any) {\n    return this.repo.find();\n  }\n\n  public async findById(id: ObjectId | string) {\n    return this.repo.findById(id);\n  }\n\n  public async update(id: ObjectId | string, dto: UpdateRoleDto) {\n    return this.repo.update(id, dto);\n  }\n\n  public async remove(id: ObjectId | string) {\n    return this.repo.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SharedRepository.html":{"url":"injectables/SharedRepository.html","title":"injectable - SharedRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SharedRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/shared.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/shared/shared.repository.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.repository.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/shared/shared.repository.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  FilterQuery,\n  HydratedDocument,\n  Model,\n  ObjectId,\n  ProjectionType,\n  QueryOptions,\n  SaveOptions,\n} from 'mongoose';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class SharedRepository {\n  constructor(readonly model: Model) {}\n  public async find(\n    options?: any,\n  ): Promise, Record>[]\n  > {\n    return this.model.find(options).exec();\n  }\n\n  populateOnFind: string[] = [];\n\n  public async findById(id: ObjectId | any, options?: QueryOptions) {\n    return (\n      this.model\n        .findById(\n          id,\n          {},\n          {\n            populate: this.populateOnFind,\n            ...options,\n          },\n        )\n        // .populate(this.populateOnFind)\n        .exec()\n    );\n  }\n\n  public async findOne(\n    filter?: FilterQuery,\n    projection?: ProjectionType | null,\n    options?: QueryOptions | null,\n  ) {\n    return (\n      this.model\n        .findOne(filter, projection, {\n          populate: this.populateOnFind,\n          ...options,\n        })\n        // .populate(this.populateOnFind)\n        .exec()\n    );\n  }\n\n  public async create(dto: CreateDto, options?: SaveOptions) {\n    const createdUser = new this.model(dto);\n    return createdUser.save(options);\n  }\n\n  public async update(\n    id: ObjectId | any,\n    dto: UpdateDto,\n    options?: QueryOptions,\n  ): Promise {\n    return this.model.findByIdAndUpdate(id, dto, {\n      new: true,\n      ...options,\n      populate: this.populateOnFind,\n    });\n  }\n\n  public async delete(id?: ObjectId | any, options?: QueryOptions) {\n    return this.model.findByIdAndRemove(id, options);\n  }\n\n  public async upsert(id: ObjectId | any, dto: any): Promise {\n    throw new Error('Method not implemented.');\n  }\n  public async aggregatePaginate(options?: any): Promise {\n    throw new Error('Method not implemented.');\n  }\n  public async aggregate(options?: any): Promise {\n    throw new Error('Method not implemented.');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SharedService.html":{"url":"classes/SharedService.html","title":"class - SharedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SharedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/shared.service.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: Repo)\n                    \n                \n                        \n                            \n                                Defined in src/shared/shared.service.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                    Repo\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SharedRepository } from './shared.repository';\n\nexport class SharedService {\n  constructor(readonly repo: Repo) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\n\nSmsService \n\nSmsService \n\n\n\nTermiiService \n\nTermiiService \n\n\n\nSmsModule\n\nSmsModule\n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\nTermiiService  -->\n\nSmsModule->TermiiService \n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nTermiiService\n\nTermiiService\n\nSmsModule -->\n\nTermiiService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmsService\n                        \n                        \n                            TermiiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SmsService\n                        \n                        \n                            TermiiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { SmsService } from './sms.service';\nimport { TermiiService } from './termii.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [SmsService, TermiiService],\n  exports: [SmsService, TermiiService],\n})\nexport class SmsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmsService.html":{"url":"injectables/SmsService.html","title":"injectable - SmsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendOTP\n                            \n                            \n                                sendOTPLocal\n                            \n                            \n                                sendWelcomeSMS\n                            \n                            \n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termii: TermiiService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/sms.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termii\n                                                  \n                                                        \n                                                                        TermiiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendOTP\n                        \n                    \n                \n            \n            \n                \nsendOTP(phone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendOTPLocal\n                        \n                    \n                \n            \n            \n                \nsendOTPLocal(phone: string, otp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendWelcomeSMS\n                        \n                    \n                \n            \n            \n                \nsendWelcomeSMS(phone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \nverifyOTP(phone: string, otp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { isPhoneNumber } from 'class-validator';\nimport { APP_NAME } from 'src/app.constants';\nimport { TermiiService } from './termii.service';\n\n@Injectable()\nexport class SmsService {\n  constructor(private termii: TermiiService) {}\n\n  sendWelcomeSMS(phone: string) {\n    if (!isPhoneNumber(phone)) {\n      throw Error('Invalid phone number');\n    }\n    return this.termii.sendSms(\n      phone.replace('+', ''),\n      `Welcome to ${APP_NAME}`,\n      APP_NAME,\n    );\n  }\n\n  sendOTPLocal(phone: string, otp: string) {\n    if (!isPhoneNumber(phone)) {\n      throw Error('Invalid phone number');\n    }\n    return this.termii.sendSms(\n      phone.replace('+', ''),\n      `Your otp is ${otp} from ${APP_NAME}`,\n    );\n  }\n\n  verifyOTP(phone: string, otp: string) {\n    if (!isPhoneNumber(phone)) {\n      throw Error('Invalid phone number');\n    }\n    return this.termii.verifyOtp(phone.replace('+', ''), otp);\n  }\n\n  sendOTP(phone: string) {\n    if (!isPhoneNumber(phone)) {\n      throw Error('Invalid phone number');\n    }\n    return this.termii.sendOtp(phone.replace('+', ''), 'Gembrs', 'dnd');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TermiiRequestParams.html":{"url":"classes/TermiiRequestParams.html","title":"class - TermiiRequestParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TermiiRequestParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/dto/termii-request-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                api_key\n                            \n                            \n                                channel\n                            \n                            \n                                from\n                            \n                            \n                                    Optional\n                                media\n                            \n                            \n                                    Optional\n                                message_text\n                            \n                            \n                                    Optional\n                                message_type\n                            \n                            \n                                pin\n                            \n                            \n                                    Optional\n                                pin_attempts\n                            \n                            \n                                pin_id\n                            \n                            \n                                    Optional\n                                pin_length\n                            \n                            \n                                    Optional\n                                pin_placeholder\n                            \n                            \n                                    Optional\n                                pin_time_to_live\n                            \n                            \n                                    Optional\n                                pin_type\n                            \n                            \n                                sms\n                            \n                            \n                                to\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(payload: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/sms/dto/termii-request-params.dto.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        api_key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Media\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        message_text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        message_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pin_attempts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pin_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pin_length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pin_placeholder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pin_time_to_live\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pin_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/termii-request-params.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/sms/dto/termii-request-params.dto.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class TermiiRequestParams {\n  to: string;\n  from: string;\n  sms: string;\n  type: string;\n  channel: string;\n  api_key: string;\n  media?: Media;\n  pin: string;\n  pin_id: string;\n  pin_attempts?: number;\n  pin_time_to_live?: number;\n  pin_length?: number;\n  pin_placeholder?: string;\n  message_text?: string;\n  pin_type?: string;\n  message_type?: string;\n\n  constructor(payload: Partial) {\n    Object.assign(this, payload);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n}\n\nexport interface Media {\n  url: string;\n  caption: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TermiiSendSmsResponse.html":{"url":"interfaces/TermiiSendSmsResponse.html","title":"interface - TermiiSendSmsResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TermiiSendSmsResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/interfaces/termii-send-sms-response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            message_id\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TermiiSendSmsResponse {\n  message_id: string;\n  message: string;\n  balance: number;\n  user: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TermiiService.html":{"url":"injectables/TermiiService.html","title":"injectable - TermiiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TermiiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/termii.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                apiKey\n                            \n                            \n                                    Private\n                                axios\n                            \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                    Readonly\n                                TERMII_URL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkIfApiKeyIsSet\n                            \n                            \n                                    Async\n                                sendOtp\n                            \n                            \n                                    Async\n                                sendSms\n                            \n                            \n                                    Async\n                                sendSMSFromRandomNumber\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/termii.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkIfApiKeyIsSet\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfApiKeyIsSet()\n                \n            \n\n\n            \n                \n                    Defined in src/sms/termii.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendOtp(to: string, from: string, channel: \"generic\" | \"whatsapp\" | \"dnd\")\n                \n            \n\n\n            \n                \n                    Defined in src/sms/termii.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    from\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    channel\n                                    \n                                            \"generic\" | \"whatsapp\" | \"dnd\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'generic'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendSms\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSms(to: string, message: string, from: string, channel: \"generic\" | \"whatsapp\" | \"dnd\")\n                \n            \n\n\n            \n                \n                    Defined in src/sms/termii.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    from\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                                \n                                    channel\n                                    \n                                            \"generic\" | \"whatsapp\" | \"dnd\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'generic'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendSMSFromRandomNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSMSFromRandomNumber(to: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/termii.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    to\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyOtp(pin_id: string, pin: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/termii.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pin_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pin\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('TERMII_API_KEY')\n                    \n                \n                    \n                        \n                                Defined in src/sms/termii.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        axios\n                        \n                    \n                \n            \n                \n                    \n                        Default value : axios.create({\n    baseURL: this.TERMII_URL,\n    headers: {\n      'Content-Type': 'Application/json',\n      Accept: 'Application/json',\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/sms/termii.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'plain',\n    api_key: this.apiKey,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/sms/termii.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        TERMII_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://termii.com/api'\n                    \n                \n                    \n                        \n                                Defined in src/sms/termii.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport axios from 'axios';\nimport { TermiiRequestParams } from './dto/termii-request-params.dto';\nimport { TermiiSendSmsResponse } from './interfaces/termii-send-sms-response.interface';\n\n@Injectable()\nexport class TermiiService {\n  private readonly TERMII_URL = 'https://termii.com/api';\n  private readonly apiKey = this.configService.get('TERMII_API_KEY');\n  private axios = axios.create({\n    baseURL: this.TERMII_URL,\n    headers: {\n      'Content-Type': 'Application/json',\n      Accept: 'Application/json',\n    },\n  });\n  private data: Partial = {\n    type: 'plain',\n    api_key: this.apiKey,\n  };\n\n  constructor(private configService: ConfigService) {}\n\n  private checkIfApiKeyIsSet() {\n    if (!this.apiKey) {\n      throw new Error(\n        'TERMII_API_KEY is not set. Visit https://termii.com/account/api to get your api key',\n      );\n    }\n  }\n\n  async sendSms(\n    to: string,\n    message: string,\n    from: string = null,\n    channel: 'generic' | 'whatsapp' | 'dnd' = 'generic',\n  ) {\n    this.checkIfApiKeyIsSet();\n\n    try {\n      if (!from && channel === 'generic') {\n        return await this.sendSMSFromRandomNumber(to, message);\n      }\n      if (!from && channel !== 'generic') {\n        throw new InternalServerErrorException(\n          \"'From' phone number is required for non-generic channels\",\n        );\n      }\n\n      const response = await this.axios.post(\n        '/sms/send',\n        new TermiiRequestParams({\n          to,\n          sms: message,\n          from,\n          ...this.data,\n          channel,\n        }).toString(),\n      );\n      return response.data;\n    } catch (error) {\n      console.log(error.response.data);\n      return error;\n    }\n  }\n\n  async sendSMSFromRandomNumber(to: string, message: string) {\n    this.checkIfApiKeyIsSet();\n\n    const response = await this.axios.post(\n      '/sms/number/send',\n      new TermiiRequestParams({\n        to,\n        sms: message,\n        ...this.data,\n      }).toString(),\n    );\n    return response.data;\n  }\n\n  async sendOtp(\n    to: string,\n    from: string,\n    channel: 'generic' | 'whatsapp' | 'dnd' = 'generic',\n  ) {\n    this.checkIfApiKeyIsSet();\n\n    try {\n      const response = await this.axios.post(\n        '/sms/otp/send',\n        new TermiiRequestParams({\n          api_key: this.apiKey,\n          message_type: 'NUMERIC',\n          to: to,\n          from: from,\n          channel: channel,\n          pin_attempts: 10,\n          pin_time_to_live: 5,\n          pin_length: 6,\n          pin_placeholder: '',\n          message_text: 'Your pin is ',\n          pin_type: 'NUMERIC',\n        }),\n      );\n      return response.data;\n    } catch (error) {\n      console.log(error.response.data);\n      return error;\n    }\n  }\n\n  async verifyOtp(pin_id: string, pin: string) {\n    this.checkIfApiKeyIsSet();\n\n    return (\n      await this.axios.post(\n        '/sms/otp/verify',\n        new TermiiRequestParams({\n          api_key: this.apiKey,\n          pin_id,\n          pin,\n        }).toString(),\n      )\n    ).data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/schemas/token.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                identifier\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        identifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/token.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/token.schema.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\n@Schema({ timestamps: true })\nexport class Token extends Document {\n  @Prop()\n  token: string;\n\n  @Prop()\n  identifier: string;\n}\n\nexport const TokenSchema = SchemaFactory.createForClass(Token);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenData.html":{"url":"classes/TokenData.html","title":"class - TokenData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-data.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                memberId\n                            \n                            \n                                organizationId\n                            \n                            \n                                roleId\n                            \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        memberId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-data.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organizationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-data.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-data.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-data.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-data.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenData {\n  username: string;\n  userId: string;\n  organizationId: string;\n  memberId: string;\n  roleId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenRepository.html":{"url":"injectables/TokenRepository.html","title":"injectable - TokenRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findTokenByUser\n                            \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/token.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findTokenByUser\n                        \n                    \n                \n            \n            \n                \nfindTokenByUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:82\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         SharedRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         SharedRepository:27\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SharedRepository } from 'src/shared/shared.repository';\nimport { CreateTokenDto } from './dto/create-token.dto';\nimport { Token } from './schemas/token.schema';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { isEmail } from 'class-validator';\n\n@Injectable()\nexport class TokenRepository extends SharedRepository {\n  constructor(@InjectModel(Token.name) model: Model) {\n    super(model);\n  }\n\n  findTokenByUser(userId: string) {\n    return this.model.findOne({ user: userId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenRequest.html":{"url":"interfaces/TokenRequest.html","title":"interface - TokenRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/token-request.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            organizationId\n                                        \n                                \n                                \n                                        \n                                            tokenData\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        organizationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        organizationId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenData:         TokenData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TokenData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         Member\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Member\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Member } from 'src/member/schemas/member.schema';\nimport { TokenData } from '../dto/token-data.dto';\n\nexport interface TokenRequest extends Request {\n  user: Member;\n  tokenData: TokenData;\n  organizationId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMemberDto.html":{"url":"classes/UpdateMemberDto.html","title":"class - UpdateMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/dto/update-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/member/dto/update-member.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateMemberDto } from './create-member.dto';\n\nexport class UpdateMemberDto extends PartialType(CreateMemberDto) {\n  id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMemberPasswordDto.html":{"url":"classes/UpdateMemberPasswordDto.html","title":"class - UpdateMemberPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMemberPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/member/dto/update-member-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                passwordConfirm\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/update-member-password.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordConfirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEqualTo('password')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/member/dto/update-member-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\nimport { IsEqualTo } from 'src/shared/decorators/is-equal-to.decorator';\n\nexport class UpdateMemberPasswordDto {\n  @IsString()\n  password: string;\n  @IsEqualTo('password')\n  passwordConfirm: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrganizationDto.html":{"url":"classes/UpdateOrganizationDto.html","title":"class - UpdateOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/dto/update-organization.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/update-organization.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateOrganizationDto } from './create-organization.dto';\n\nexport class UpdateOrganizationDto extends PartialType(CreateOrganizationDto) {\n  id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateResourceDto.html":{"url":"classes/UpdateResourceDto.html","title":"class - UpdateResourceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateResourceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resource/dto/update-resource.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateResourceDto } from './create-resource.dto';\n\nexport class UpdateResourceDto extends PartialType(CreateResourceDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/role/dto/update-role.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {\n  id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { Exclude } from 'class-transformer';\nimport { IsOptional } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  @IsOptional()\n  @Exclude()\n  verified?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                memberships\n                            \n                            \n                                phone\n                            \n                            \n                                verifiedEmail\n                            \n                            \n                                verifiedPhone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({lowercase: true, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        memberships\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Member[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifiedEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(Boolean)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifiedPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(Boolean)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BadRequestException } from '@nestjs/common';\nimport { isEmail, isPhoneNumber } from 'class-validator';\nimport mongoose, { Document } from 'mongoose';\nimport { Member } from 'src/member/schemas/member.schema';\n// import { DuplicateFieldError } from 'src/shared/errors/duplicate-field.error';\n\n// export type UserDocument = User & Document;\n@Schema()\nexport class User extends Document {\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n\n  @Prop({\n    lowercase: true,\n    validate: async function (value) {\n      if (!value) return true;\n      if (!isEmail(value))\n        throw new Error('Please enter a valid email address.');\n      const user = await this.constructor.findOne({ email: value });\n      if (user)\n        throw new Error(\n          'A user is already registered with this email address.',\n        );\n    },\n    // match: [/.+@.+\\..+/g, 'Please fill a valid email address'],\n  })\n  email: string;\n\n  @Prop({\n    validate: async function (value) {\n      if (!value) return true;\n      if (!isPhoneNumber(value))\n        throw new Error(\n          'Please enter a valid phone number. Ensure you include the country code',\n        );\n      const user = await this.constructor.findOne({ phone: value });\n      if (user)\n        throw new Error('A user is already registered with this phone number');\n    },\n  })\n  phone: string;\n\n  @Prop(Boolean)\n  verifiedEmail: boolean;\n\n  @Prop(Boolean)\n  verifiedPhone: boolean;\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Member' }] })\n  memberships: Member[];\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n// Virtual for user's full name\nUserSchema.virtual('name').get(function () {\n  let fullName = '';\n  if (this.firstName && this.lastName) {\n    fullName = `${this.firstName} ${this.lastName}`;\n  }\n  if (!this.firstName || !this.lastName) {\n    fullName = this.firstName || this.lastName;\n  }\n  return fullName;\n});\n\nUserSchema.post('save', function (error, doc, next) {\n  if (error.name === 'MongoServerError' && error.code === 11000) {\n    const field = /{\\s[a-zA-Z]+:/i.exec(error.message)[0].replace(/{|:| /g, '');\n    next(new BadRequestException('The ' + field + ' already exists.'));\n  } else {\n    next(new BadRequestException('Bad input try again'));\n  }\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Find or Create a User'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(filter: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all Users'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find a User'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a User'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Query,\n  Res,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { Response } from 'express';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('User')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly service: UserService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Find all Users' })\n  findAll(@Query('filter') filter: any) {\n    return this.service.findAll(filter);\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Find or Create a User' })\n  public async create(\n    @Body() createUserDto: CreateUserDto,\n    @Res() response: Response,\n  ) {\n    const user = await this.service.findOrCreate(createUserDto);\n    if (user.created) {\n      return response.status(201).json(user.user);\n    }\n    return response.status(200).json(user.user);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find a User' })\n  findOne(@Param('id') id: string) {\n    return this.service.findById(id);\n  }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() dto: UpdateUserDto) {\n  //   return this.userService.update(id, dto);\n  // }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a User' })\n  public async remove(@Param('id') id: string) {\n    await this.service.remove(id);\n    return { message: 'User deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserRepository \n\nUserRepository \n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserRepository } from './user.repository';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [UserService, UserRepository],\n  exports: [UserService, UserRepository],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                populateOnFind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByUsername\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregate\n                            \n                            \n                                    Public\n                                    Async\n                                aggregatePaginate\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.repository.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByUsername\n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:88\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        aggregatePaginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregatePaginate(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateDto, options?: SaveOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id?: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(options?: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | any, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:29\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(filter?: FilterQuery, projection?: ProjectionType | null, options?: QueryOptions | null)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            ProjectionType | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | any, dto: UpdateDto, options?: QueryOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                            UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            QueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsert(id: ObjectId | any, dto: any)\n                \n            \n\n\n            \n                \n                    Inherited from         SharedRepository\n\n                \n            \n            \n                \n                        Defined in         SharedRepository:82\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        populateOnFind\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                Inherited from         SharedRepository\n\n                            \n                        \n                    \n                        \n                                Defined in         SharedRepository:27\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SharedRepository } from 'src/shared/shared.repository';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './schemas/user.schema';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { isEmail } from 'class-validator';\n\n@Injectable()\nexport class UserRepository extends SharedRepository {\n  constructor(@InjectModel(User.name) model: Model) {\n    super(model);\n  }\n\n  public async findOrCreate(dto: CreateUserDto) {\n    const query =\n      dto.email && dto.phone\n        ? { $or: [{ email: dto.email }, { phone: dto.phone }] }\n        : dto.email\n        ? { email: dto.email }\n        : { phone: dto.phone };\n    const user = await this.model.findOneAndUpdate(query, dto, {\n      upsert: true,\n      new: true,\n    });\n    if (!user) {\n      return { user: await this.create(dto), created: true };\n    }\n    return { user, created: false };\n  }\n\n  findByUsername(username: string) {\n    return this.model.findOne(\n      isEmail(username) ? { email: username } : { phone: username },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        SharedService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findByUsername\n                            \n                            \n                                    Public\n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(filter?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string, throwError)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    throwError\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: ObjectId | string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: ObjectId | string, dto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { SharedService } from 'src/shared/shared.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserRepository } from './user.repository';\nimport { ObjectId } from 'mongoose';\n\n@Injectable()\nexport class UserService extends SharedService {\n  constructor(readonly repo: UserRepository) {\n    super(repo);\n  }\n\n  public async findOrCreate(dto: CreateUserDto) {\n    if (!(dto.email || dto.phone)) {\n      throw new BadRequestException(\n        'You need to enter either your email or phone number',\n      );\n    }\n    return this.repo.findOrCreate(dto);\n  }\n\n  public async findByUsername(username: string, throwError = true) {\n    const user = await this.repo.findByUsername(username);\n    if (!user && throwError) {\n      throw new NotFoundException(`User not found`);\n    }\n    return user;\n  }\n\n  public async findAll(filter?: any) {\n    return this.repo.find();\n  }\n\n  public async findById(id: ObjectId | string) {\n    return this.repo.findById(id);\n  }\n\n  public async update(id: ObjectId | string, dto: UpdateUserDto) {\n    delete dto.verified; // verification can only happen via auth verifyOTP route\n    return this.repo.update(id, dto);\n  }\n\n  public async remove(id: ObjectId | string) {\n    return this.repo.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyEmailDto.html":{"url":"classes/VerifyEmailDto.html","title":"class - VerifyEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/verify-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/verify-email.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUsername } from 'src/shared/decorators/is-username.decorator';\n\nexport class VerifyEmailDto {\n  @IsUsername()\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyOtpDto.html":{"url":"classes/VerifyOtpDto.html","title":"class - VerifyOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/verify-otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                otp\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/verify-otp.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/verify-otp.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\nimport { IsUsername } from 'src/shared/decorators/is-username.decorator';\n\nexport class VerifyOtpDto {\n  @IsUsername()\n  username: string;\n\n  @IsNumber()\n  otp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.constants.ts\n            \n            variable\n            APP_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/allow-user-without-organization.decorator.ts\n            \n            variable\n            AllowUserWithoutOrganization\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/allow-user-without-organization.decorator.ts\n            \n            variable\n            USER_WITHOUT_ORGANIZATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/organization-api.decorator.ts\n            \n            function\n            OrganizationApi\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/organization-api.decorator.ts\n            \n            variable\n            ORGANIZATION_API_HEADER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/dto/create-organization-password.dto.ts\n            \n            class\n            CreateOrganizationPasswordDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/auth/dto/create-token.dto.ts\n            \n            class\n            CreateTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/find-user-organization..dto.ts\n            \n            class\n            FindUserOrganization\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-member.dto.ts\n            \n            class\n            RegisterMember\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/token-data.dto.ts\n            \n            class\n            TokenData\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/verify-email.dto.ts\n            \n            class\n            VerifyEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/verify-otp.dto.ts\n            \n            class\n            VerifyOtpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/token-request.interface.ts\n            \n            interface\n            TokenRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/schemas/token.schema.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/schemas/token.schema.ts\n            \n            variable\n            TokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.repository.ts\n            \n            injectable\n            TokenRepository\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/mail/elastic-mail.service.ts\n            \n            injectable\n            ElasticMailService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/mail/mail.controller.ts\n            \n            controller\n            MailController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/member/dto/create-member.dto.ts\n            \n            class\n            CreateMemberDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/member/dto/invite-member.dto.ts\n            \n            class\n            InviteMemberDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/member/dto/update-member-password.dto.ts\n            \n            class\n            UpdateMemberPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/member/dto/update-member.dto.ts\n            \n            class\n            UpdateMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/member/member.controller.ts\n            \n            controller\n            MemberController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/member/member.repository.ts\n            \n            injectable\n            MemberRepository\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/member/member.service.ts\n            \n            injectable\n            MemberService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/member/schemas/member.schema.ts\n            \n            class\n            Member\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/member/schemas/member.schema.ts\n            \n            variable\n            MemberSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/organization/dto/create-organization.dto.ts\n            \n            class\n            CreateOrganizationDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/organization/dto/update-organization.dto.ts\n            \n            class\n            UpdateOrganizationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/organization/organization.controller.ts\n            \n            controller\n            OrganizationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/organization/organization.repository.ts\n            \n            injectable\n            OrganizationRepository\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/organization/organization.service.ts\n            \n            injectable\n            OrganizationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/organization/schemas/organization.schema.ts\n            \n            class\n            Organization\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/organization/schemas/organization.schema.ts\n            \n            variable\n            OrganizationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resource/dto/create-resource.dto.ts\n            \n            class\n            CreateResourceDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resource/dto/update-resource.dto.ts\n            \n            class\n            UpdateResourceDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resource/resource.controller.ts\n            \n            controller\n            ResourceController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/resource/resource.repository.ts\n            \n            injectable\n            ResourceRepository\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/resource/resource.service.ts\n            \n            injectable\n            ResourceService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/resource/schemas/resource-role.schema.ts\n            \n            class\n            ResourceRole\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/resource/schemas/resource-role.schema.ts\n            \n            variable\n            ResourceRoleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resource/schemas/resource.schema.ts\n            \n            class\n            Resource\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resource/schemas/resource.schema.ts\n            \n            variable\n            ResourceSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/role/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/role/role.middleware.ts\n            \n            variable\n            getAuth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/role.repository.ts\n            \n            injectable\n            RoleRepository\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/role/schemas/role.schema.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/role/schemas/role.schema.ts\n            \n            variable\n            RoleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-equal-to.decorator.ts\n            \n            function\n            IsEqualTo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-slug.decorator.ts\n            \n            function\n            IsSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-unique.decorator.ts\n            \n            interface\n            IDoesNotExistParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-unique.decorator.ts\n            \n            function\n            IsUnique\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/is-username.decorator.ts\n            \n            function\n            IsUsername\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/errors/duplicate-field.error.ts\n            \n            class\n            DuplicateFieldError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filters/all-error.filter.ts\n            \n            class\n            AllErrorFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/filters/query-error.filter.ts\n            \n            class\n            QueryErrorFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/paginator/decorator.ts\n            \n            interface\n            PaginateQuery\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/shared/paginator/decorator.ts\n            \n            variable\n            Paginate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/paginator/paginate-query-options.decorator.ts\n            \n            function\n            PaginateQueryOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/shared.repository.ts\n            \n            injectable\n            SharedRepository\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/shared/shared.service.ts\n            \n            class\n            SharedService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sms/dto/termii-request-params.dto.ts\n            \n            class\n            TermiiRequestParams\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/sms/dto/termii-request-params.dto.ts\n            \n            interface\n            Media\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/interfaces/termii-send-sms-response.interface.ts\n            \n            interface\n            TermiiSendSmsResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sms/sms.service.ts\n            \n            injectable\n            SmsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sms/termii.service.ts\n            \n            injectable\n            TermiiService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @elasticemail/elasticemail-client-ts-axios : ^4.0.18\n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.1.1\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/event-emitter : ^1.3.1\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @types/bcrypt : ^5.0.0\n        \n            axios : ^0.27.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            handlebars : ^4.7.7\n        \n            lodash : ^4.17.21\n        \n            luxon : ^3.0.3\n        \n            mongoose : ^6.6.1\n        \n            nodemailer : ^6.7.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            slugify : ^1.6.5\n        \n            swagger-themes : ^1.2.22\n        \n            swagger-ui-express : ^4.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ElasticMailTemplateNames   (src/.../elastic-mail.templates.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/mail/elastic-mail.templates.ts\n    \n        \n            \n                \n                    \n                        \n                        ElasticMailTemplateNames\n                    \n                \n                        \n                            \n                                 WelcomeToGembrs\n                            \n                        \n                        \n                            \n                                Value : WelcomeToGembrs\n                            \n                        \n                        \n                            \n                                 VerifyYourEmail\n                            \n                        \n                        \n                            \n                                Value : VerifyYourEmail\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsEqualTo   (src/.../is-equal-to.decorator.ts)\n                        \n                        \n                            IsSlug   (src/.../is-slug.decorator.ts)\n                        \n                        \n                            IsUnique   (src/.../is-unique.decorator.ts)\n                        \n                        \n                            IsUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            OrganizationApi   (src/.../organization-api.decorator.ts)\n                        \n                        \n                            PaginateQueryOptions   (src/.../paginate-query-options.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/decorators/is-equal-to.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsEqualTo\n                        \n                    \n                \n            \n            \n                \nIsEqualTo(property: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/shared/decorators/is-slug.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsSlug\n                        \n                    \n                \n            \n            \n                \nIsSlug(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/shared/decorators/is-unique.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUnique\n                        \n                    \n                \n            \n            \n                \nIsUnique(model: IDoesNotExistParams, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                IDoesNotExistParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/shared/decorators/is-username.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsUsername\n                        \n                    \n                \n            \n            \n                \nIsUsername(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/auth/decorators/organization-api.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OrganizationApi\n                        \n                    \n                \n            \n            \n                \nOrganizationApi()\n                \n            \n\n\n\n\n        \n    \n    src/shared/paginator/paginate-query-options.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginateQueryOptions\n                        \n                    \n                \n            \n            \n                \nPaginateQueryOptions()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MemberModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrganizationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResourceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MemberModule\n\n\n\ncluster_MemberModule_exports\n\n\n\ncluster_MemberModule_providers\n\n\n\ncluster_OrganizationModule\n\n\n\ncluster_OrganizationModule_exports\n\n\n\ncluster_OrganizationModule_providers\n\n\n\ncluster_ResourceModule\n\n\n\ncluster_ResourceModule_exports\n\n\n\ncluster_ResourceModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nLocalStrategy \n\nLocalStrategy \n\nLocalStrategy  -->\n\nAuthModule->LocalStrategy \n\n\n\n\n\nTokenRepository \n\nTokenRepository \n\nTokenRepository  -->\n\nAuthModule->TokenRepository \n\n\n\n\n\nMemberModule\n\nMemberModule\n\nAuthModule -->\n\nMemberModule->AuthModule\n\n\n\nAppModule -->\n\nMemberModule->AppModule\n\n\n\n\n\nMemberRepository \n\nMemberRepository \n\nMemberRepository  -->\n\nMemberModule->MemberRepository \n\n\n\n\n\nMemberService \n\nMemberService \n\nMemberService  -->\n\nMemberModule->MemberService \n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nAuthModule -->\n\nOrganizationModule->AuthModule\n\n\n\nAppModule -->\n\nOrganizationModule->AppModule\n\n\n\n\n\nOrganizationRepository \n\nOrganizationRepository \n\nOrganizationRepository  -->\n\nOrganizationModule->OrganizationRepository \n\n\n\n\n\nOrganizationService \n\nOrganizationService \n\nOrganizationService  -->\n\nOrganizationModule->OrganizationService \n\n\n\n\n\nResourceModule\n\nResourceModule\n\nAppModule -->\n\nResourceModule->AppModule\n\n\n\n\n\nResourceRepository \n\nResourceRepository \n\nResourceRepository  -->\n\nResourceModule->ResourceRepository \n\n\n\n\n\nResourceService \n\nResourceService \n\nResourceService  -->\n\nResourceModule->ResourceService \n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAuthModule -->\n\nRoleModule->AuthModule\n\n\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleRepository \n\nRoleRepository \n\nRoleRepository  -->\n\nRoleModule->RoleRepository \n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAuthModule -->\n\nSmsModule->AuthModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nTermiiService \n\nTermiiService \n\nTermiiService  -->\n\nSmsModule->TermiiService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTokenRepository\n\nTokenRepository\n\nAuthModule -->\n\nTokenRepository->AuthModule\n\n\n\n\n\nElasticMailService\n\nElasticMailService\n\nMailModule -->\n\nElasticMailService->MailModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMemberRepository\n\nMemberRepository\n\nMemberModule -->\n\nMemberRepository->MemberModule\n\n\n\n\n\nMemberService\n\nMemberService\n\nMemberModule -->\n\nMemberService->MemberModule\n\n\n\n\n\nOrganizationRepository\n\nOrganizationRepository\n\nOrganizationModule -->\n\nOrganizationRepository->OrganizationModule\n\n\n\n\n\nOrganizationService\n\nOrganizationService\n\nOrganizationModule -->\n\nOrganizationService->OrganizationModule\n\n\n\n\n\nResourceRepository\n\nResourceRepository\n\nResourceModule -->\n\nResourceRepository->ResourceModule\n\n\n\n\n\nResourceService\n\nResourceService\n\nResourceModule -->\n\nResourceService->ResourceModule\n\n\n\n\n\nRoleRepository\n\nRoleRepository\n\nRoleModule -->\n\nRoleRepository->RoleModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nTermiiService\n\nTermiiService\n\nSmsModule -->\n\nTermiiService->SmsModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    33 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllowUserWithoutOrganization   (src/.../allow-user-without-organization.decorator.ts)\n                        \n                        \n                            APP_NAME   (src/.../app.constants.ts)\n                        \n                        \n                            getAuth   (src/.../role.middleware.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            MemberSchema   (src/.../member.schema.ts)\n                        \n                        \n                            ORGANIZATION_API_HEADER   (src/.../organization-api.decorator.ts)\n                        \n                        \n                            OrganizationSchema   (src/.../organization.schema.ts)\n                        \n                        \n                            Paginate   (src/.../decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            ResourceRoleSchema   (src/.../resource-role.schema.ts)\n                        \n                        \n                            ResourceSchema   (src/.../resource.schema.ts)\n                        \n                        \n                            RoleSchema   (src/.../role.schema.ts)\n                        \n                        \n                            TokenSchema   (src/.../token.schema.ts)\n                        \n                        \n                            USER_WITHOUT_ORGANIZATION   (src/.../allow-user-without-organization.decorator.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/allow-user-without-organization.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AllowUserWithoutOrganization\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return applyDecorators(\n    SetMetadata(USER_WITHOUT_ORGANIZATION, true),\n    ApiBearerAuth(),\n  );\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_WITHOUT_ORGANIZATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UserWithoutOrganization'\n                    \n                \n\n\n        \n    \n\n    src/app.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        APP_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Gembrs'\n                    \n                \n\n\n        \n    \n\n    src/role/role.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req, res, next) {\n  const token = req.headers['authorization'];\n  const db = req.app.get('db');\n  if (req.user) {\n    // query to get the user role's  permissions for a resource\n    if (token) {\n      // handle jwt token authenticity and decrypt payload\n\n      // get permission handler\n      db.getPerms({ role_id: req.user.role_id, resource_id: req.resource.id })\n        .then((perms) => {\n          let allow = false;\n          // mapping of methods to permissions\n          perms.forEach(function (perm) {\n            if (req.method == 'POST' && perms.create) allow = true;\n            else if (req.method == 'GET' && perms.read) allow = true;\n            else if (req.method == 'PUT' && perms.write) allow = true;\n            else if (req.method == 'DELETE' && perm.delete) allow = true;\n          });\n          if (allow) next();\n          else {\n            res.status(403).send({ error: 'access denied' });\n          }\n        })\n        .catch((err) => {\n          // handle your reject and catch here\n        });\n    } else {\n      res.status(400).send({ error: 'invalid token' });\n    }\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.SECRET || 'secret',\n}\n                    \n                \n\n\n        \n    \n\n    src/member/schemas/member.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MemberSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Member)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/organization-api.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ORGANIZATION_API_HEADER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'x-organization-slug'\n                    \n                \n\n\n        \n    \n\n    src/organization/schemas/organization.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OrganizationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Organization)\n                    \n                \n\n\n        \n    \n\n    src/shared/paginator/decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Paginate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, ctx: ExecutionContext): PaginateQuery => {\n    const request: Request = ctx.switchToHttp().getRequest();\n    const { query } = request;\n\n    // Determine if Express or Fastify to rebuild the original url and reduce down to protocol, host and base url\n    let originalUrl;\n    if (request.originalUrl) {\n      originalUrl =\n        request.protocol + '://' + request.get('host') + request.originalUrl;\n    } else {\n      originalUrl = request.protocol + '://' + request.hostname + request.url;\n    }\n    const urlParts = new URL(originalUrl);\n    const path = urlParts.protocol + '//' + urlParts.host + urlParts.pathname;\n\n    const sortBy: [string, string][] = [];\n    const searchBy: string[] = [];\n\n    if (query.sortBy) {\n      const params = !Array.isArray(query.sortBy)\n        ? [query.sortBy]\n        : query.sortBy;\n      for (const param of params) {\n        if (isString(param)) {\n          const items = (param as string).split(':');\n          if (items.length === 2) {\n            sortBy.push(items as [string, string]);\n          }\n        }\n      }\n    }\n\n    if (query.searchBy) {\n      const params = !Array.isArray(query.searchBy)\n        ? [query.searchBy]\n        : query.searchBy;\n      for (const param of params) {\n        if (isString(param)) {\n          searchBy.push(param as string);\n        }\n      }\n    }\n\n    const filter = mapKeys(\n      pickBy(\n        query,\n        (param, name) =>\n          name.includes('filter.') &&\n          (isString(param) ||\n            (Array.isArray(param) &&\n              (param as any[]).every((p) => isString(p)))),\n      ) as Dictionary,\n      (_param, name) => name.replace('filter.', ''),\n    );\n\n    return {\n      page: query.page ? parseInt(query.page.toString(), 10) : undefined,\n      limit: query.limit ? parseInt(query.limit.toString(), 10) : undefined,\n      sortBy: sortBy.length ? sortBy : undefined,\n      search: query.search ? query.search.toString() : undefined,\n      searchBy: searchBy.length ? searchBy : undefined,\n      filter: Object.keys(filter).length ? filter : undefined,\n      path,\n    };\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/resource/schemas/resource-role.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResourceRoleSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ResourceRole)\n                    \n                \n\n\n        \n    \n\n    src/resource/schemas/resource.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResourceSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Resource)\n                    \n                \n\n\n        \n    \n\n    src/role/schemas/role.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Role)\n                    \n                \n\n\n        \n    \n\n    src/auth/schemas/token.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Token)\n                    \n                \n\n\n        \n    \n\n    src/user/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
